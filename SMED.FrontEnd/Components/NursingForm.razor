@using SMED.FrontEnd.Components
@using SMED.Shared.DTOs
@using SMED.FrontEnd.Services
@inject MedicalCareService MedicalCareService
@inject TypeOfServiceService TypeOfServiceService
@inject HealthProfessionalService HealthProfessionalService
@inject VitalSignsService VitalSignsService
@inject MedicalServiceService MedicalServiceService
@inject TypeOfProceduresService TypeOfProceduresService
@inject ProceduresService ProceduresService
@inject MedicalProcedureService MedicalProcedureService
@inject PlaceOfAttentionService PlaceService
@inject ReasonForConsultationService ReasonForConsultationService
@inject LocationService LocationService
@inject AuthorizationService AuthorizationService
@inject IJSRuntime JS

<div class="medical-care-form">
    <!-- Tabs Navigation -->
    <ul class="nav nav-tabs" id="medicalCareTabs" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link @(activeTab == "patient" ? "active" : "")"
                    @onclick="@(() => SetActiveTab("patient"))"
                    type="button" role="tab">
                <i class="fas fa-user me-2"></i>Selección de Paciente
                @if (IsPatientTabComplete())
                {
                    <span class="badge bg-success ms-1">✓</span>
                }
                else
                {
                    <span class="badge bg-danger ms-1">*</span>
                }
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link @(activeTab == "vitals" ? "active" : "")"
                    @onclick="@(() => SetActiveTab("vitals"))"
                    type="button" role="tab"
                    disabled="@(!IsPatientTabComplete())">
                <i class="fas fa-heartbeat me-2"></i>Signos Vitales
                @if (HasVitalSignsData())
                {
                    <span class="badge bg-success ms-1">✓</span>
                }
                <small class="text-muted ms-1">(Opcional)</small>
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link @(activeTab == "services" ? "active" : "")"
                    @onclick="@(() => SetActiveTab("services"))"
                    type="button" role="tab"
                    disabled="@(!IsPatientTabComplete())">
                <i class="fas fa-stethoscope me-2"></i>Servicios
                @if (serviciosList.Any())
                {
                    <span class="badge bg-primary ms-1">@serviciosList.Count</span>
                }
                <small class="text-muted ms-1">(Opcional)</small>
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link @(activeTab == "procedures" ? "active" : "")"
                    @onclick="@(() => SetActiveTab("procedures"))"
                    type="button" role="tab"
                    disabled="@(!IsPatientTabComplete())">
                <i class="fas fa-procedures me-2"></i>Procedimientos
                @if (procedimientosList.Any())
                {
                    <span class="badge bg-info ms-1">@procedimientosList.Count</span>
                }
                <small class="text-muted ms-1">(Opcional)</small>
            </button>
        </li>
    </ul>

    <!-- Tab Content -->
    <div class="tab-content mt-3">
        <!-- Patient Selection Tab -->
        <div class="tab-pane @(activeTab == "patient" ? "show active" : "")" role="tabpanel">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-user me-2"></i>Selección de Paciente
                        <span class="badge bg-danger ms-2">Obligatorio</span>
                        <!-- Badge para mostrar el área fija -->
                        <span class="badge bg-success ms-2">
                            <i class="fas fa-hospital me-1"></i>Área: Enfermería
                        </span>
                    </h5>
                </div>
                <div class="card-body">
                    @if (!isEditMode)
                    {
                        <div class="mb-3">
                            <label class="form-label fw-bold">Paciente *</label>
                            <PatientSelector @bind-Value="clinicalHistoryId"
                                             OnPatientSelected="HandlePatientSelected" />
                            @if (showValidationErrors && selectedPatientId <= 0)
                            {
                                <div class="text-danger mt-1">
                                    <small><i class="fas fa-exclamation-triangle me-1"></i>Debe seleccionar un paciente</small>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle me-2"></i>
                            Editando atención médica existente. Paciente: @selectedHistoryNumber
                        </div>
                    }

                    @if (selectedPatientId > 0)
                    {
                        <div class="alert alert-success mt-3">
                            <i class="fas fa-check-circle me-2"></i>
                            Paciente seleccionado correctamente. Historia Clínica: @selectedHistoryNumber
                        </div>

                        <!-- Información del área fija -->
                        <div class="alert alert-info mb-3">
                            <div class="d-flex align-items-center">
                                <i class="fas fa-info-circle me-2"></i>
                                <div>
                                    <strong>Área de Atención:</strong> Enfermería
                                    <br>
                                    <small class="text-muted">Esta atención médica se registrará automáticamente en el área de Enfermería.</small>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-12 mb-3">
                                <label class="form-label fw-bold">Lugar de Atención *</label>
                                <select class="form-select @(showValidationErrors && string.IsNullOrEmpty(lugarSeleccionada) ? "is-invalid" : "")"
                                        @bind="lugarSeleccionada">
                                    <option value="">Seleccione el lugar de Atención</option>
                                    @foreach (var lugar in lugaresAtencion)
                                    {
                                        <option value="@lugar.Id">@lugar.Name</option>
                                    }
                                </select>
                                @if (showValidationErrors && string.IsNullOrEmpty(lugarSeleccionada))
                                {
                                    <div class="invalid-feedback">
                                        Debe seleccionar un lugar de atención
                                    </div>
                                }
                            </div>
                        </div>

                        <!-- Motivo de Consulta -->
                        <div class="mb-3">
                            <label class="form-label fw-bold">Motivo de la Consulta *</label>
                            <textarea class="form-control @(showValidationErrors && string.IsNullOrWhiteSpace(motivoConsulta) ? "is-invalid" : "")"
                                      @bind="motivoConsulta"
                                      rows="3"
                                      placeholder="Describa el motivo principal de la consulta médica..."
                                      maxlength="500"></textarea>
                            @if (showValidationErrors && string.IsNullOrWhiteSpace(motivoConsulta))
                            {
                                <div class="invalid-feedback">
                                    Debe ingresar el motivo de la consulta
                                </div>
                            }
                        </div>

                        <div class="mb-3">
                            <label class="form-label fw-bold">Especialista en Enfermería</label>

                            @if (profesionalCargado)
                            {
                                @if (profesionalLogueado != null)
                                {
                                    <div class="alert alert-success">
                                        <i class="fas fa-user-md me-2"></i>
                                        <strong>Especialista asignado automáticamente:</strong>
                                        @profesionalLogueado.FullName - @profesionalLogueado.NameTypeProfessional
                                        <input type="hidden" @bind="selectedHealthProfessionalId" />
                                        <div class="mt-1">
                                            <small class="text-muted">
                                                <i class="fas fa-info-circle me-1"></i>
                                                Usted ha sido asignado automáticamente como el especialista responsable en enfermería.
                                            </small>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="alert alert-warning">
                                        <i class="fas fa-exclamation-triangle me-2"></i>
                                        <strong>No se pudo identificar su perfil profesional.</strong>
                                        <div class="mt-2">
                                            <select class="form-select @(showValidationErrors && selectedHealthProfessionalId <= 0 ? "is-invalid" : "")"
                                                    @bind="selectedHealthProfessionalId">
                                                <option value="0">Seleccione un especialista de enfermería manualmente</option>
                                                @foreach (var profesional in especialistasEnfermeria)
                                                {
                                                    <option value="@profesional.HealthProfessionalId">
                                                        @profesional.FullName - @profesional.NameTypeProfessional
                                                    </option>
                                                }
                                            </select>
                                        </div>
                                        @if (showValidationErrors && selectedHealthProfessionalId <= 0)
                                        {
                                            <div class="invalid-feedback d-block">
                                                Debe seleccionar un especialista en enfermería responsable
                                            </div>
                                        }
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="text-center">
                                    <div class="spinner-border spinner-border-sm me-2"></div>
                                    <span>Cargando información del especialista en enfermería...</span>
                                </div>
                            }
                        </div>

                        @if (!IsPatientTabComplete())
                        {
                            <div class="alert alert-warning">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                Complete todos los campos obligatorios para continuar a las siguientes pestañas.
                            </div>
                        }

                        <div class="d-flex justify-content-between mt-3">
                            <div>
                                <button class="btn btn-outline-secondary" @onclick="ValidateAndShowErrors">
                                    <i class="fas fa-check me-2"></i>Validar Información
                                </button>
                            </div>
                            <div>
                                @if (IsPatientTabComplete())
                                {
                                    <button class="btn btn-primary" @onclick="@(() => SetActiveTab("vitals"))">
                                        Continuar <i class="fas fa-arrow-right ms-2"></i>
                                    </button>
                                }
                                else
                                {
                                    <button class="btn btn-secondary" disabled>
                                        Complete la información obligatoria
                                    </button>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- VITAL SIGNS TAB CON VALIDACIONES NUMÉRICAS MEJORADAS -->
        <div class="tab-pane @(activeTab == "vitals" ? "show active" : "")" role="tabpanel">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-heartbeat me-2"></i>Signos Vitales
                        <span class="badge bg-info ms-2">Opcional</span>
                    </h5>
                    <div>
                        <button class="btn btn-sm btn-outline-danger" @onclick="LimpiarSignosVitales"
                                title="Limpiar todos los campos de signos vitales">
                            <i class="fas fa-broom me-1"></i>Limpiar
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    @if (selectedPatientId > 0)
                    {
                        <!-- Alerta informativa sobre validaciones -->
                        <div class="alert alert-info mb-4">
                            <div class="d-flex align-items-center">
                                <i class="fas fa-info-circle me-2"></i>
                                <div>
                                    <strong>Información importante:</strong>
                                    Solo ingrese valores numéricos. Los campos se validan automáticamente y el IMC se calcula al ingresar peso y talla.
                                    La presión arterial debe tener formato: 120/80
                                </div>
                            </div>
                        </div>

                        <!-- Grid de signos vitales con validaciones -->
                        <div class="row g-3">
                            <!-- Peso -->
                            <div class="col-md-6">
                                <label class="form-label fw-bold">Peso (kg)</label>
                                <input type="text"
                                       class="@GetVitalSignInputClass("peso")"
                                       @bind="pesoInput"
                                       @oninput="@((e) => OnNumericInput(e, "peso"))"
                                       placeholder="70.5" />
                                @if (!string.IsNullOrEmpty(GetVitalSignError("peso")))
                                {
                                    <div class="invalid-feedback" style="display: block;">
                                        <i class="fas fa-exclamation-triangle me-1"></i>@GetVitalSignError("peso")
                                    </div>
                                }
                                <!-- Ajustado el rango máximo a 99.99 para decimal(4,2) -->
                                <small class="form-text text-muted">Rango válido: 0.1 - 99.99 kg</small>
                            </div>

                            <!-- Talla -->
                            <div class="col-md-6">
                                <label class="form-label fw-bold">Talla (cm)</label>
                                <input type="text"
                                       class="@GetVitalSignInputClass("talla")"
                                       @bind="tallaInput"
                                       @oninput="@((e) => OnNumericInput(e, "talla"))"
                                       placeholder="175" />
                                @if (!string.IsNullOrEmpty(GetVitalSignError("talla")))
                                {
                                    <div class="invalid-feedback" style="display: block;">
                                        <i class="fas fa-exclamation-triangle me-1"></i>@GetVitalSignError("talla")
                                    </div>
                                }
                                <!-- Ajustado el rango máximo a 250 cm para decimal(5,2) -->
                                <small class="form-text text-muted">Rango válido: 1 - 250 cm</small>
                            </div>

                            <!-- IMC (calculado automáticamente) -->
                            <div class="col-md-6">
                                <label class="form-label fw-bold">IMC</label>
                                <input type="text"
                                       class="form-control bg-light"
                                       value="@imcCalculado"
                                       readonly
                                       placeholder="Se calcula automáticamente" />
                                <small class="form-text text-muted">Se calcula automáticamente: Peso / (Talla/100)²</small>
                            </div>

                            <!-- Perímetro Abdominal -->
                            <div class="col-md-6">
                                <label class="form-label fw-bold">Perímetro Abdominal (cm)</label>
                                <input type="text"
                                       class="@GetVitalSignInputClass("perimetroAbdominal")"
                                       @bind="perimetroAbdominalInput"
                                       @oninput="@((e) => OnNumericInput(e, "perimetroAbdominal"))"
                                       placeholder="85" />
                                @if (!string.IsNullOrEmpty(GetVitalSignError("perimetroAbdominal")))
                                {
                                    <div class="invalid-feedback" style="display: block;">
                                        <i class="fas fa-exclamation-triangle me-1"></i>@GetVitalSignError("perimetroAbdominal")
                                    </div>
                                }
                                <!-- Ajustado el rango máximo a 99.99 para decimal(4,2) -->
                                <small class="form-text text-muted">Rango válido: 1 - 99.99 cm</small>
                            </div>

                            <!-- Presión Arterial (formato especial) -->
                            <div class="col-md-6">
                                <label class="form-label fw-bold">Presión Arterial</label>
                                <input type="text"
                                       class="@GetVitalSignInputClass("presionArterial")"
                                       @bind="presionArterialInput"
                                       @oninput="OnBloodPressureInput"
                                       placeholder="120/80"
                                       maxlength="7" />
                                @if (!string.IsNullOrEmpty(GetVitalSignError("presionArterial")))
                                {
                                    <div class="invalid-feedback" style="display: block;">
                                        <i class="fas fa-exclamation-triangle me-1"></i>@GetVitalSignError("presionArterial")
                                    </div>
                                }
                                <small class="form-text text-muted">Formato: 120/80 (Sistólica/Diastólica)</small>
                            </div>

                            <!-- Temperatura -->
                            <div class="col-md-6">
                                <label class="form-label fw-bold">Temperatura (°C)</label>
                                <input type="text"
                                       class="@GetVitalSignInputClass("temperatura")"
                                       @bind="temperaturaInput"
                                       @oninput="@((e) => OnNumericInput(e, "temperatura"))"
                                       placeholder="36.5" />
                                @if (!string.IsNullOrEmpty(GetVitalSignError("temperatura")))
                                {
                                    <div class="invalid-feedback" style="display: block;">
                                        <i class="fas fa-exclamation-triangle me-1"></i>@GetVitalSignError("temperatura")
                                    </div>
                                }
                                <small class="form-text text-muted">Rango válido: 30 - 45°C</small>
                            </div>

                            <!-- Presión Arterial Media -->
                            <div class="col-md-6">
                                <label class="form-label fw-bold">Presión Arterial Media</label>
                                <input type="text"
                                       class="@GetVitalSignInputClass("pam")"
                                       @bind="pamInput"
                                       @oninput="@((e) => OnNumericInput(e, "pam"))"
                                       placeholder="90" />
                                @if (!string.IsNullOrEmpty(GetVitalSignError("pam")))
                                {
                                    <div class="invalid-feedback" style="display: block;">
                                        <i class="fas fa-exclamation-triangle me-1"></i>@GetVitalSignError("pam")
                                    </div>
                                }
                                <!-- Ajustado el rango máximo a 180 para decimal(5,2) -->
                                <small class="form-text text-muted">Rango válido: 40 - 180 mmHg</small>
                            </div>

                            <!-- Frecuencia Cardíaca -->
                            <div class="col-md-6">
                                <label class="form-label fw-bold">Frecuencia Cardíaca</label>
                                <input type="text"
                                       class="@GetVitalSignInputClass("frecuenciaCardiaca")"
                                       @bind="frecuenciaCardiacaInput"
                                       @oninput="@((e) => OnNumericInput(e, "frecuenciaCardiaca"))"
                                       placeholder="72" />
                                @if (!string.IsNullOrEmpty(GetVitalSignError("frecuenciaCardiaca")))
                                {
                                    <div class="invalid-feedback" style="display: block;">
                                        <i class="fas fa-exclamation-triangle me-1"></i>@GetVitalSignError("frecuenciaCardiaca")
                                    </div>
                                }
                                <small class="form-text text-muted">Rango válido: 30 - 200 bpm</small>
                            </div>

                            <!-- Saturación de Oxígeno -->
                            <div class="col-md-6">
                                <label class="form-label fw-bold">Saturación Oxígeno (%)</label>
                                <input type="text"
                                       class="@GetVitalSignInputClass("saturacionOxigeno")"
                                       @bind="saturacionOxigenoInput"
                                       @oninput="@((e) => OnNumericInput(e, "saturacionOxigeno"))"
                                       placeholder="98" />
                                @if (!string.IsNullOrEmpty(GetVitalSignError("saturacionOxigeno")))
                                {
                                    <div class="invalid-feedback" style="display: block;">
                                        <i class="fas fa-exclamation-triangle me-1"></i>@GetVitalSignError("saturacionOxigeno")
                                    </div>
                                }
                                <!-- Ajustado el rango máximo a 100 para decimal(5,2) -->
                                <small class="form-text text-muted">Rango válido: 70 - 100%</small>
                            </div>

                            <!-- Frecuencia Respiratoria -->
                            <div class="col-md-6">
                                <label class="form-label fw-bold">Frecuencia Respiratoria</label>
                                <input type="text"
                                       class="@GetVitalSignInputClass("frecuenciaRespiratoria")"
                                       @bind="frecuenciaRespiratoriaInput"
                                       @oninput="@((e) => OnNumericInput(e, "frecuenciaRespiratoria"))"
                                       placeholder="16" />
                                @if (!string.IsNullOrEmpty(GetVitalSignError("frecuenciaRespiratoria")))
                                {
                                    <div class="invalid-feedback" style="display: block;">
                                        <i class="fas fa-exclamation-triangle me-1"></i>@GetVitalSignError("frecuenciaRespiratoria")
                                    </div>
                                }
                                <small class="form-text text-muted">Rango válido: 5 - 60 rpm</small>
                            </div>

                            <!-- Glucosa Capilar -->
                            <div class="col-md-6">
                                <label class="form-label fw-bold">Glucosa Capilar</label>
                                <input type="text"
                                       class="@GetVitalSignInputClass("glucosaCapilar")"
                                       @bind="glucosaCapilarInput"
                                       @oninput="@((e) => OnNumericInput(e, "glucosaCapilar"))"
                                       placeholder="100" />
                                @if (!string.IsNullOrEmpty(GetVitalSignError("glucosaCapilar")))
                                {
                                    <div class="invalid-feedback" style="display: block;">
                                        <i class="fas fa-exclamation-triangle me-1"></i>@GetVitalSignError("glucosaCapilar")
                                    </div>
                                }
                                <!-- Ajustado el rango máximo a 999.99 para decimal(5,2) -->
                                <small class="form-text text-muted">Rango válido: 50 - 999.99 mg/dl</small>
                            </div>

                            <!-- Hemoglobina -->
                            <div class="col-md-6">
                                <label class="form-label fw-bold">Hemoglobina</label>
                                <input type="text"
                                       class="@GetVitalSignInputClass("hemoglobina")"
                                       @bind="hemoglobinaInput"
                                       @oninput="@((e) => OnNumericInput(e, "hemoglobina"))"
                                       placeholder="14" />
                                @if (!string.IsNullOrEmpty(GetVitalSignError("hemoglobina")))
                                {
                                    <div class="invalid-feedback" style="display: block;">
                                        <i class="fas fa-exclamation-triangle me-1"></i>@GetVitalSignError("hemoglobina")
                                    </div>
                                }
                                <!-- Ajustado el rango máximo a 20 para decimal(4,2) -->
                                <small class="form-text text-muted">Rango válido: 5 - 20 g/dl</small>
                            </div>
                        </div>

                        <!-- Botones de navegación -->
                        <div class="d-flex justify-content-between mt-4">
                            <button class="btn btn-secondary" @onclick="@(() => SetActiveTab("patient"))">
                                <i class="fas fa-arrow-left me-2"></i>Volver
                            </button>
                            <div>
                                <button class="btn btn-outline-primary me-2" @onclick="@(() => SetActiveTab("services"))">
                                    Ir a Servicios <i class="fas fa-arrow-right ms-2"></i>
                                </button>
                                <button class="btn btn-outline-info" @onclick="@(() => SetActiveTab("procedures"))">
                                    Ir a Procedimientos <i class="fas fa-arrow-right ms-2"></i>
                                </button>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Services Tab -->
        <div class="tab-pane @(activeTab == "services" ? "show active" : "")" role="tabpanel">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-stethoscope me-2"></i>Servicios Médicos
                        <span class="badge bg-info ms-2">Opcional</span>
                    </h5>
                </div>
                <div class="card-body">
                    @if (selectedPatientId > 0)
                    {
                        <EditableTable Title="Servicios Médicos"
                                       ColumnHeaders="@serviceColumnHeaders"
                                       Rows="@serviceRows"
                                       RowIds="@serviceRowIds"
                                       EmptyMessage="No hay servicios agregados"
                                       DeleteConfirmationMessage="¿Está seguro que desea eliminar este servicio?"
                                       ShowAddButton="true"
                                       ShowEditButton="true"
                                       ShowDeleteButton="true"
                                       ShowActions="true"
                                       OnAddRequested="@OnAddServiceRequested"
                                       OnEditRequested="@OnEditServiceRequested"
                                       OnDeleteRequested="@OnDeleteServiceRequested"
                                       OnSaveRequested="@OnSaveServiceRequested"
                                       IsValidForm="@IsServiceFormValid">
                            <EditModalContent>
                                @if (currentService != null)
                                {
                                    <div class="row g-3">
                                        <!-- Fecha del Servicio -->
                                        <div class="col-md-6">
                                            <label class="form-label fw-bold">Fecha del Servicio <span class="text-danger">*</span></label>
                                            <input type="datetime-local"
                                                   class="form-control @(serviceErrors.ContainsKey("ServiceDate") ? "is-invalid" : "")"
                                                   @bind="currentService.ServiceDate" />
                                            @if (serviceErrors.ContainsKey("ServiceDate"))
                                            {
                                                <div class="invalid-feedback">@serviceErrors["ServiceDate"]</div>
                                            }
                                        </div>

                                        <!-- Tipo de Servicio -->
                                        <div class="col-md-6">
                                            <label class="form-label fw-bold">Tipo de Servicio <span class="text-danger">*</span></label>
                                            <select class="form-select @(serviceErrors.ContainsKey("ServiceType") ? "is-invalid" : "")"
                                                    @bind="currentService.ServiceType">
                                                <option value="">Seleccione un tipo</option>
                                                @foreach (var serviceType in availableServiceTypes)
                                                {
                                                    <option value="@serviceType.Name">@serviceType.Name</option>
                                                }
                                            </select>
                                            @if (serviceErrors.ContainsKey("ServiceType"))
                                            {
                                                <div class="invalid-feedback">@serviceErrors["ServiceType"]</div>
                                            }
                                        </div>

                                        <!-- Diagnóstico -->
                                        <div class="col-md-12">
                                            <label class="form-label fw-bold">Diagnóstico</label>
                                            <textarea class="form-control"
                                                      @bind="currentService.Diagnosis"
                                                      rows="2"
                                                      maxlength="500"
                                                      placeholder="Diagnóstico principal..."
                                                      style="resize: vertical; max-height: 100px;"></textarea>
                                            <small class="form-text text-muted">
                                                Máximo 500 caracteres. Restantes: @(500 - (currentService.Diagnosis?.Length ?? 0))
                                            </small>
                                        </div>

                                        <!-- Observaciones -->
                                        <div class="col-md-12">
                                            <label class="form-label fw-bold">Observaciones</label>
                                            <textarea class="form-control"
                                                      @bind="currentService.Observations"
                                                      rows="3"
                                                      maxlength="1000"
                                                      placeholder="Observaciones adicionales sobre el servicio..."
                                                      style="resize: vertical; max-height: 150px;"></textarea>
                                            <small class="form-text text-muted">
                                                Máximo 1000 caracteres. Restantes: @(1000 - (currentService.Observations?.Length ?? 0))
                                            </small>
                                        </div>

                                        <!-- Recomendaciones -->
                                        <div class="col-md-12">
                                            <label class="form-label fw-bold">Recomendaciones</label>
                                            <textarea class="form-control"
                                                      @bind="currentService.Recommendations"
                                                      rows="2"
                                                      maxlength="500"
                                                      placeholder="Recomendaciones para el paciente..."
                                                      style="resize: vertical; max-height: 100px;"></textarea>
                                            <small class="form-text text-muted">
                                                Máximo 500 caracteres. Restantes: @(500 - (currentService.Recommendations?.Length ?? 0))
                                            </small>
                                        </div>
                                    </div>
                                    @if (!string.IsNullOrEmpty(serviceFormError))
                                    {
                                        <div class="alert alert-danger mt-3">
                                            <i class="fas fa-exclamation-triangle me-2"></i>
                                            @serviceFormError
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="text-center py-4">
                                        <div class="spinner-border text-primary" role="status">
                                            <span class="visually-hidden">Cargando...</span>
                                        </div>
                                        <p class="mt-2">Cargando datos del servicio...</p>
                                    </div>
                                }
                            </EditModalContent>
                        </EditableTable>

                        <div class="d-flex justify-content-between mt-4">
                            <button class="btn btn-secondary" @onclick="@(() => SetActiveTab("vitals"))">
                                <i class="fas fa-arrow-left me-2"></i>Volver
                            </button>
                            <button class="btn btn-outline-info" @onclick="@(() => SetActiveTab("procedures"))">
                                Ir a Procedimientos <i class="fas fa-arrow-right ms-2"></i>
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Procedures Tab-->
        <div class="tab-pane @(activeTab == "procedures" ? "show active" : "")" role="tabpanel">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <div>
                        <h5 class="mb-0">
                            <i class="fas fa-procedures me-2"></i>Procedimientos Médicos
                            <span class="badge bg-info ms-2">Opcional</span>
                        </h5>
                    </div>
                </div>

                <div class="card-body">
                    @if (currentMedicalCareId > 0)
                    {
                        <div class="alert alert-info mb-3">
                            <i class="fas fa-info-circle me-2"></i>
                            <strong>Información:</strong> Puede registrar múltiples procedimientos médicos para esta atención médica.
                        </div>

                        <EditableTable Title="Procedimientos Médicos"
                                       ColumnHeaders="@procedureColumnHeaders"
                                       Rows="@procedureRows"
                                       RowIds="@procedureRowIds"
                                       EmptyMessage="No hay procedimientos agregados"
                                       DeleteConfirmationMessage="¿Está seguro que desea eliminar este procedimiento?"
                                       ShowAddButton="true"
                                       ShowEditButton="true"
                                       ShowDeleteButton="true"
                                       ShowActions="true"
                                       OnAddRequested="@OnAddProcedureRequested"
                                       OnEditRequested="@OnEditProcedureRequested"
                                       OnDeleteRequested="@OnDeleteProcedureRequested"
                                       OnSaveRequested="@OnSaveProcedureRequested"
                                       IsValidForm="@IsProcedureFormValid">
                            <EditModalContent>
                                @if (currentProcedure != null)
                                {
                                    <div class="row g-3">
                                        <!-- Fecha del Procedimiento -->
                                        <div class="col-md-6">
                                            <label class="form-label fw-bold">Fecha del Procedimiento <span class="text-danger">*</span></label>
                                            <input type="datetime-local"
                                                   class="form-control @(procedureErrors.ContainsKey("ProcedureDate") ? "is-invalid" : "")"
                                                   @bind="currentProcedure.ProcedureDate" />
                                            @if (procedureErrors.ContainsKey("ProcedureDate"))
                                            {
                                                <div class="invalid-feedback">@procedureErrors["ProcedureDate"]</div>
                                            }
                                        </div>

                                        <!-- Tipo de Procedimiento -->
                                        <div class="col-md-6">
                                            <label class="form-label fw-bold">Tipo de Procedimiento <span class="text-danger">*</span></label>
                                            <select class="form-select @(procedureErrors.ContainsKey("TypeOfProcedureId") ? "is-invalid" : "")"
                                                    @bind:get="selectedTypeOfProcedureId"
                                                    @bind:set="OnTypeOfProcedureChangedAsync">
                                                <option value="0">Seleccione un tipo</option>
                                                @foreach (var type in availableTypesOfProcedures)
                                                {
                                                    <option value="@type.Id">@type.Name</option>
                                                }
                                            </select>
                                            @if (procedureErrors.ContainsKey("TypeOfProcedureId"))
                                            {
                                                <div class="invalid-feedback">@procedureErrors["TypeOfProcedureId"]</div>
                                            }
                                        </div>

                                        <!-- Procedimiento Específico -->
                                        <div class="col-md-6">
                                            <label class="form-label fw-bold">Procedimiento Específico <span class="text-danger">*</span></label>
                                            <select class="form-select @(procedureErrors.ContainsKey("SpecificProcedureId") ? "is-invalid" : "")"
                                                    @bind="currentProcedure.SpecificProcedureId"
                                                    disabled="@(selectedTypeOfProcedureId <= 0)">
                                                <option value="0">Seleccione un procedimiento</option>
                                                @foreach (var procedure in filteredProcedures)
                                                {
                                                    <option value="@procedure.Id">@procedure.Description</option>
                                                }
                                            </select>
                                            @if (procedureErrors.ContainsKey("SpecificProcedureId"))
                                            {
                                                <div class="invalid-feedback">@procedureErrors["SpecificProcedureId"]</div>
                                            }
                                        </div>

                                        <!-- Observaciones -->
                                        <div class="col-md-12">
                                            <label class="form-label fw-bold">Observaciones</label>
                                            <textarea class="form-control"
                                                      @bind="currentProcedure.Observations"
                                                      rows="3"
                                                      maxlength="1000"
                                                      placeholder="Observaciones adicionales sobre el procedimiento..."
                                                      style="resize: vertical; max-height: 150px;"></textarea>
                                            <small class="form-text text-muted">
                                                Máximo 1000 caracteres. Restantes: @(1000 - (currentProcedure.Observations?.Length ?? 0))
                                            </small>
                                        </div>
                                    </div>
                                    @if (!string.IsNullOrEmpty(procedureFormError))
                                    {
                                        <div class="alert alert-danger mt-3">
                                            <i class="fas fa-exclamation-triangle me-2"></i>
                                            @procedureFormError
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="text-center py-4">
                                        <div class="spinner-border text-primary" role="status">
                                            <span class="visually-hidden">Cargando...</span>
                                        </div>
                                        <p class="mt-2">Cargando datos del procedimiento...</p>
                                    </div>
                                }
                            </EditModalContent>
                        </EditableTable>

                        <div class="d-flex justify-content-between mt-4">
                            <button class="btn btn-secondary" @onclick="@(() => SetActiveTab("services"))">
                                <i class="fas fa-arrow-left me-2"></i>Volver a Servicios
                            </button>
                            <div>
                                <button class="btn btn-outline-secondary me-2" @onclick="OnCancel">
                                    <i class="fas fa-times me-2"></i>Cancelar
                                </button>
                                <button class="btn btn-success" @onclick="GuardarAtencionMedica" disabled="@isSaving">
                                    @if (isSaving)
                                    {
                                        <span>
                                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                            Guardando...
                                        </span>
                                    }
                                    else
                                    {
                                        <span>
                                            <i class="fas fa-save me-2"></i>Guardar Atención Médica
                                        </span>
                                    }
                                </button>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            Debe completar y guardar los datos básicos del paciente antes de agregar procedimientos.
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>



@code {
    [Parameter] public MedicalCareDTO? MedicalCare { get; set; }
    [Parameter] public EventCallback<MedicalCareDTO> OnSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private string activeTab = "patient";
    private int clinicalHistoryId = 0;
    private int selectedPatientId = 0;
    private string selectedHistoryNumber = "";
    private string profesionalSeleccionado = "";
    private string motivoConsulta = "";
    private bool isEditMode = false;
    private string lugarSeleccionada = "";
    private int enfermerialLocationId = 0; // Added to store dynamic LocationId
    private int selectedHealthProfessionalId = 0;
    private HealthProfessionalDTO? currentProfessional = null;
    private HealthProfessionalDTO? profesionalLogueado;
    private bool profesionalCargado = false;
    private List<HealthProfessionalDTO> especialistasEnfermeria = new();
    private string imcInput = "";



    private bool showValidationErrors = false;
    private bool isSaving = false;

    // Variables para inputs de signos vitales con validación
    private string pesoInput = "";
    private string tallaInput = "";
    private string imcCalculado = "";
    private string perimetroAbdominalInput = "";
    private string presionArterialInput = "";
    private string temperaturaInput = "";
    private string pamInput = "";
    private string frecuenciaCardiacaInput = "";
    private string saturacionOxigenoInput = "";
    private string frecuenciaRespiratoriaInput = "";
    private string glucosaCapilarInput = "";
    private string hemoglobinaInput = "";

    // Diccionario para errores de validación de signos vitales
    private Dictionary<string, string> vitalSignsErrors = new Dictionary<string, string>();

    // Variables originales para compatibilidad
    private string peso = "";
    private string talla = "";
    private string imc = "";
    private string perimetroAbdominal = "";
    private string presionArterial = "";
    private string temperatura = "";
    private string pam = "";
    private string frecuenciaCardiaca = "";
    private string saturacionOxigeno = "";
    private string frecuenciaRespiratoria = "";
    private string glucosaCapilar = "";
    private string hemoglobina = "";

    // Listas dinámicas
    private List<TypeOfServiceDTO> tipoServicios = new();
    private List<HealthProfessionalDTO> profesionales = new();
    private List<TypeOfProceduresDTO> tiposProcedimientos = new();
    private List<ProceduresDTO> todosProcedimientos = new();
    private List<PlaceOfAttentionDTO> lugaresAtencion = new();

    // Listas de servicios y procedimientos
    private List<MedicalServiceDTO> serviciosList = new();
    private List<MedicalProcedureDTO> procedimientosList = new();
    private int currentMedicalCareId = 0;
    private List<TypeOfProceduresDTO> availableTypesOfProcedures = new();
    private Dictionary<string, string> procedureErrors = new();
    private int? selectedLocationId;
    private int selectedTypeOfProcedureId = 0;
    private List<ProceduresDTO> filteredProcedures = new();
    private List<ProceduresDTO> availableProcedures = new();
    private List<LocationDTO> availableLocations = new();
    private string? procedureFormError;


    // Variables para Services
    private List<string> serviceColumnHeaders = new() { "Fecha", "Tipo", "Diagnóstico", "Observaciones" };
    private List<List<string>> serviceRows = new();
    private List<int> serviceRowIds = new();
    private Dictionary<string, string> serviceErrors = new();
    private string? serviceFormError;
    private List<TypeOfServiceDTO> availableServiceTypes = new();



    // Para edición
    private VitalSignsDTO? existingVitalSigns;
    private ReasonForConsultationDTO? existingReasonForConsultation;

    // Modales
    private bool showServiceModal = false;
    private MedicalServiceDTO? currentService;
    private int? createdCareId = null;

    @* Added properties for EditableTable integration *@
    private List<string> procedureColumnHeaders = new() { "Fecha", "Tipo", "Procedimiento", "Observaciones" };
    private List<List<string>> procedureRows = new();
    private List<int> procedureRowIds = new();

    //Location
    private async Task LoadEnfermeriaLocationId()
    {
        try
        {
            var locationId = await LocationService.GetLocationIdByNameAsync("Enfermería");
            if (locationId.HasValue)
            {
                enfermerialLocationId = locationId.Value;
                selectedLocationId = locationId.Value; // ¡IMPORTANTE! Asignar también a selectedLocationId
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Error: No se encontró la ubicación 'Enfermería' en la base de datos.");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error al cargar la ubicación de Enfermería: {ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Inicializar diccionario de errores
        InitializeVitalSignsErrors();
        await LoadTypeOfServices();
        await LoadHealthProfessionals();
        await LoadTypeOfProcedures();
        await LoadProcedures();
        await LoadLugaresAtencion();
        await LoadEnfermeriaLocationId();
        await AssignCurrentProfessional();
        await ObtenerProfesionalLogueado();

        //SERVICIos
        await LoadAvailableServiceTypes();

        // CARGAR DATOS DE PROCEDIMIENTOS (AÑADIR ESTO)
        await LoadAvailableTypesOfProcedures();
        await LoadAvailableProcedures();

        // Si es modo edición, cargar los datos existentes
        if (MedicalCare != null && MedicalCare.CareId > 0)
        {
            isEditMode = true;
            await LoadExistingData();
        }
        else
        {
            await AsignarProfesionalLogueado();

        }
    }

    private async Task ObtenerProfesionalLogueado()
    {
        try
        {
            profesionalLogueado = await HealthProfessionalService.GetCurrentHealthProfessionalAsync(AuthorizationService);

            if (profesionalLogueado != null)
            {
                await JS.InvokeVoidAsync("console.log",
                    $"✅ Profesional logueado encontrado: {profesionalLogueado.FullName}, ID: {profesionalLogueado.HealthProfessionalId}");
            }
            else
            {
                await JS.InvokeVoidAsync("console.warn", "⚠️ No se pudo encontrar el profesional logueado");
            }

            profesionalCargado = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", $"❌ Error obteniendo profesional logueado: {ex.Message}");
            profesionalCargado = true;
        }
    }

    private async Task AsignarProfesionalLogueado()
    {
        if (profesionalLogueado != null)
        {
            selectedHealthProfessionalId = profesionalLogueado.HealthProfessionalId;
            await JS.InvokeVoidAsync("console.log",
                $"✅ Profesional logueado asignado automáticamente: {profesionalLogueado.FullName}");
        }
        else if (especialistasEnfermeria.Any())
        {
            await JS.InvokeVoidAsync("console.warn",
                "⚠️ No se encontró profesional logueado, mostrando selector manual");
        }
    }

    //Aignación de profesional
    private async Task AssignCurrentProfessional()
    {
        try
        {
            // Obtener el usuario actual logueado
            var currentUser = await AuthorizationService.GetCurrentUserAsync();
            if (currentUser != null)
            {
                // Buscar el profesional correspondiente al usuario
                currentProfessional = profesionales.FirstOrDefault(hp =>
                    hp.HealthProfessionalId == currentUser.PersonId)
                    ?? profesionales.FirstOrDefault(hp =>
                        hp.RegistrationNumber == currentUser.RegistrationNumber);

                if (currentProfessional != null)
                {
                    // Asignar automáticamente
                    selectedHealthProfessionalId = currentProfessional.HealthProfessionalId;
                    StateHasChanged();

                    await JS.InvokeVoidAsync("console.log",
                        "[MedicalCare] Professional auto-assigned:",
                        currentProfessional.FullName);
                }
                else
                {
                    // Fallback si no encuentra el profesional
                    selectedHealthProfessionalId = currentUser.PersonId ?? 0;
                    await JS.InvokeVoidAsync("console.warn",
                        "[MedicalCare] Using PersonId as fallback:",
                        selectedHealthProfessionalId);
                }
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error",
                "[MedicalCare] Error assigning professional:", ex.Message);
        }
    }

    //SERVICIOS
    private async Task LoadAvailableServiceTypes()
    {
        try
        {
            availableServiceTypes = await TypeOfServiceService.GetAllAsync() ?? new();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", "Error loading service types:", ex.Message);
        }
    }

    private bool IsServiceFormValid()
    {
        return ValidateServiceForm();
    }

    private bool ValidateServiceForm()
    {
        serviceErrors.Clear();
        serviceFormError = "";

        if (currentService?.ServiceDate == default)
        {
            serviceErrors["ServiceDate"] = "Debe seleccionar una fecha";
        }

        if (string.IsNullOrWhiteSpace(currentService?.ServiceType))
        {
            serviceErrors["ServiceType"] = "Debe seleccionar un tipo de servicio";
        }

        return serviceErrors.Count == 0;
    }

    private async Task OnAddServiceRequested()
    {
        if (createdCareId == null)
        {
            await JS.InvokeVoidAsync("alert", "Debe guardar primero los datos básicos del paciente.");
            return;
        }

        ClearServiceForm();

        currentService = new MedicalServiceDTO
            {
                ServiceId = 0,
                PatientId = selectedPatientId,
                HealthProfessionalId = selectedHealthProfessionalId,
                CareId = createdCareId.Value,
                ServiceDate = DateTime.Now
            };

        StateHasChanged();
    }

    private async Task OnEditServiceRequested(int serviceId)
    {
        try
        {
            currentService = null;
            await InvokeAsync(StateHasChanged);
            await Task.Delay(50);

            var service = serviciosList.FirstOrDefault(s => s.ServiceId == serviceId);
            if (service != null)
            {
                currentService = new MedicalServiceDTO
                    {
                        ServiceId = service.ServiceId,
                        PatientId = service.PatientId,
                        HealthProfessionalId = service.HealthProfessionalId,
                        CareId = service.CareId,
                        ServiceDate = service.ServiceDate,
                        ServiceType = service.ServiceType,
                        Diagnosis = service.Diagnosis,
                        Observations = service.Observations,
                        Recommendations = service.Recommendations
                    };

                serviceErrors.Clear();
                serviceFormError = "";
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", "Error in OnEditServiceRequested:", ex.Message);
            serviceFormError = $"Error al cargar el servicio: {ex.Message}";
        }
    }
    private async Task OnDeleteServiceRequested(int serviceId)
    {
        var service = serviciosList.FirstOrDefault(s => s.ServiceId == serviceId);
        if (service == null) return;

        try
        {
            var deleteResult = await MedicalServiceService.DeleteAsync(service.ServiceId);
            if (deleteResult.Success)
            {
                serviciosList.Remove(service);
                await UpdateServiceTableData();
                await JS.InvokeVoidAsync("alert", "Servicio eliminado exitosamente");
            }
            else
            {
                await JS.InvokeVoidAsync("alert", $"Error al eliminar: {deleteResult.Error}");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error al eliminar servicio: {ex.Message}");
        }
    }

    private async Task OnSaveServiceRequested()
    {
        if (!ValidateServiceForm())
        {
            return;
        }

        try
        {
            // Asegurar IDs correctos
            currentService.PatientId = selectedPatientId;
            currentService.HealthProfessionalId = selectedHealthProfessionalId;
            currentService.CareId = createdCareId.Value;

            MedicalServiceDTO savedService;

            if (currentService.ServiceId > 0)
            {
                var updateResult = await MedicalServiceService.UpdateAsync(currentService);
                if (!updateResult.Success)
                {
                    serviceFormError = $"Error al actualizar: {updateResult.Error}";
                    return;
                }
                savedService = updateResult.Data;
            }
            else
            {
                var createResult = await MedicalServiceService.CreateAsync(currentService);
                if (!createResult.Success)
                {
                    serviceFormError = $"Error al crear: {createResult.Error}";
                    return;
                }
                savedService = createResult.Data;
            }

            // Recargar servicios desde la base de datos
            await LoadServices();

            await JS.InvokeVoidAsync("alert", "Servicio guardado exitosamente");
        }
        catch (Exception ex)
        {
            serviceFormError = $"Error al guardar servicio: {ex.Message}";
            await JS.InvokeVoidAsync("console.error", "Error saving service:", ex.Message);
        }
    }

    private void ClearServiceForm()
    {
        currentService = null;
        serviceErrors.Clear();
        serviceFormError = "";
    }

    private async Task UpdateServiceTableData()
    {
        serviceRows.Clear();
        serviceRowIds.Clear();

        foreach (var servicio in serviciosList)
        {
            var row = new List<string>
        {
            servicio.ServiceDate?.ToString("dd/MM/yyyy HH:mm") ?? "N/A",
            servicio.ServiceType ?? "Sin especificar",
            servicio.Diagnosis ?? "N/A",
            servicio.Observations?.Length > 50 ?
                servicio.Observations.Substring(0, 50) + "..." :
                servicio.Observations ?? "N/A"
        };

            serviceRows.Add(row);
            serviceRowIds.Add(servicio.ServiceId);
        }

        StateHasChanged();
    }

    private async Task LoadServices()
    {
        if (createdCareId.HasValue)
        {
            var existingServices = await MedicalServiceService.GetByCareIdAsync(createdCareId.Value);
            serviciosList = existingServices ?? new List<MedicalServiceDTO>();
            await UpdateServiceTableData();
        }
    }





    // MÉTODOS DE VALIDACIÓN PARA SIGNOS VITALES
    private void InitializeVitalSignsErrors()
    {
        var fields = new[] { "peso", "talla", "perimetroAbdominal", "temperatura", "pam",
                           "frecuenciaCardiaca", "saturacionOxigeno", "frecuenciaRespiratoria",
                           "glucosaCapilar", "hemoglobina", "presionArterial" };
        foreach (var field in fields)
        {
            vitalSignsErrors[field] = "";
        }
    }

    // Método para manejar inputs numéricos
    private void OnNumericInput(ChangeEventArgs e, string field)
    {
        var input = e.Value?.ToString() ?? "";
        // Filtrar solo números y punto decimal
        var numericInput = System.Text.RegularExpressions.Regex.Replace(input, @"[^\d.]", "");

        // Asegurar que solo haya un punto decimal
        var parts = numericInput.Split('.');
        if (parts.Length > 2)
        {
            numericInput = parts[0] + "." + string.Join("", parts.Skip(1));
        }

        // Limitar decimales a 2 posiciones
        if (parts.Length == 2 && parts[1].Length > 2)
        {
            numericInput = parts[0] + "." + parts[1].Substring(0, 2);
        }

        // Asignar el valor filtrado según el campo
        switch (field)
        {
            case "peso":
                pesoInput = numericInput;
                ValidateVitalSign(numericInput, "peso");
                CalculateIMC();
                break;
            case "talla":
                tallaInput = numericInput;
                ValidateVitalSign(numericInput, "talla");
                CalculateIMC();
                break;
            case "perimetroAbdominal":
                perimetroAbdominalInput = numericInput;
                ValidateVitalSign(numericInput, "perimetroAbdominal");
                break;
            case "temperatura":
                temperaturaInput = numericInput;
                ValidateVitalSign(numericInput, "temperatura");
                break;
            case "pam":
                pamInput = numericInput;
                ValidateVitalSign(numericInput, "pam");
                break;
            case "frecuenciaCardiaca":
                frecuenciaCardiacaInput = numericInput;
                ValidateVitalSign(numericInput, "frecuenciaCardiaca");
                break;
            case "saturacionOxigeno":
                saturacionOxigenoInput = numericInput;
                ValidateVitalSign(numericInput, "saturacionOxigeno");
                break;
            case "frecuenciaRespiratoria":
                frecuenciaRespiratoriaInput = numericInput;
                ValidateVitalSign(numericInput, "frecuenciaRespiratoria");
                break;
            case "glucosaCapilar":
                glucosaCapilarInput = numericInput;
                ValidateVitalSign(numericInput, "glucosaCapilar");
                break;
            case "hemoglobina":
                hemoglobinaInput = numericInput;
                ValidateVitalSign(numericInput, "hemoglobina");
                break;
        }
    }

    // Método especial para presión arterial
    private void OnBloodPressureInput(ChangeEventArgs e)
    {
        var input = e.Value?.ToString() ?? "";
        // Permitir solo números y una barra
        var filteredInput = System.Text.RegularExpressions.Regex.Replace(input, @"[^\d/]", "");

        // Asegurar que solo haya una barra
        var parts = filteredInput.Split('/');
        if (parts.Length > 2)
        {
            filteredInput = parts[0] + "/" + parts[1];
        }

        presionArterialInput = filteredInput;
        presionArterial = filteredInput;
        ValidateBloodPressure(filteredInput);
        StateHasChanged();
    }

    // Validación para signos vitales
    private void ValidateVitalSign(string value, string field)
    {
        if (string.IsNullOrEmpty(value))
        {
            vitalSignsErrors[field] = "";
            return;
        }

        if (!decimal.TryParse(value, out decimal numValue))
        {
            vitalSignsErrors[field] = "Debe ser un valor numérico";
            return;
        }

        switch (field)
        {
            case "peso":
                // decimal(4,2) - máximo 99.99
                if (numValue <= 0 || numValue > 99.99m)
                    vitalSignsErrors[field] = "El peso debe estar entre 0.1 y 99.99 kg";
                else
                    vitalSignsErrors[field] = "";
                break;
            case "talla":
                // decimal(5,2) - máximo 999.99, pero limitamos a 250 por lógica médica
                if (numValue <= 0 || numValue > 250)
                    vitalSignsErrors[field] = "La talla debe estar entre 1 y 250 cm";
                else
                    vitalSignsErrors[field] = "";
                break;
            case "temperatura":
                // decimal(4,2) - máximo 99.99
                if (numValue < 30 || numValue > 45)
                    vitalSignsErrors[field] = "La temperatura debe estar entre 30 y 45°C";
                else
                    vitalSignsErrors[field] = "";
                break;
            case "frecuenciaCardiaca":
                // int - sin decimales
                if (numValue < 30 || numValue > 200)
                    vitalSignsErrors[field] = "La frecuencia cardíaca debe estar entre 30 y 200 bpm";
                else
                    vitalSignsErrors[field] = "";
                break;
            case "saturacionOxigeno":
                // decimal(5,2) - máximo 999.99
                if (numValue < 70 || numValue > 100)
                    vitalSignsErrors[field] = "La saturación debe estar entre 70 y 100%";
                else
                    vitalSignsErrors[field] = "";
                break;
            case "frecuenciaRespiratoria":
                // int - sin decimales
                if (numValue < 5 || numValue > 60)
                    vitalSignsErrors[field] = "La frecuencia respiratoria debe estar entre 5 y 60 rpm";
                else
                    vitalSignsErrors[field] = "";
                break;
            case "glucosaCapilar":
                // decimal(5,2) - máximo 999.99
                if (numValue < 50 || numValue > 999.99m)
                    vitalSignsErrors[field] = "La glucosa debe estar entre 50 y 999.99 mg/dl";
                else
                    vitalSignsErrors[field] = "";
                break;
            case "hemoglobina":
                // decimal(4,2) - máximo 99.99
                if (numValue < 5 || numValue > 20)
                    vitalSignsErrors[field] = "La hemoglobina debe estar entre 5 y 20 g/dl";
                else
                    vitalSignsErrors[field] = "";
                break;
            case "perimetroAbdominal":
                // decimal(4,2) - máximo 99.99
                if (numValue <= 0 || numValue > 99.99m)
                    vitalSignsErrors[field] = "El perímetro abdominal debe estar entre 1 y 99.99 cm";
                else
                    vitalSignsErrors[field] = "";
                break;
            case "pam":
                // decimal(5,2) - máximo 999.99
                if (numValue < 40 || numValue > 180)
                    vitalSignsErrors[field] = "La PAM debe estar entre 40 y 180 mmHg";
                else
                    vitalSignsErrors[field] = "";
                break;
            default:
                vitalSignsErrors[field] = "";
                break;
        }
    }

    // Validación especial para presión arterial
    private void ValidateBloodPressure(string value)
    {
        if (string.IsNullOrEmpty(value))
        {
            vitalSignsErrors["presionArterial"] = "";
            return;
        }

        var bpPattern = new System.Text.RegularExpressions.Regex(@"^\d{2,3}/\d{2,3}$");
        if (!bpPattern.IsMatch(value))
        {
            vitalSignsErrors["presionArterial"] = "Formato requerido: 120/80";
            return;
        }

        var parts = value.Split('/');
        if (int.TryParse(parts[0], out int systolic) && int.TryParse(parts[1], out int diastolic))
        {
            if (systolic < 70 || systolic > 250 || diastolic < 40 || diastolic > 150)
            {
                vitalSignsErrors["presionArterial"] = "Valores fuera del rango normal";
            }
            else
            {
                vitalSignsErrors["presionArterial"] = "";
            }
        }
        else
        {
            vitalSignsErrors["presionArterial"] = "Valores inválidos";
        }
    }


    // Método para obtener clases CSS de inputs
    private string GetVitalSignInputClass(string field)
    {
        var baseClass = "form-control";
        if (vitalSignsErrors.ContainsKey(field) && !string.IsNullOrEmpty(vitalSignsErrors[field]))
        {
            baseClass += " is-invalid";
        }
        else if (HasValidValue(field))
        {
            baseClass += " is-valid";
        }
        return baseClass;
    }

    // Método para obtener errores de validación
    private string GetVitalSignError(string field)
    {
        return vitalSignsErrors.ContainsKey(field) ? vitalSignsErrors[field] : "";
    }

    // Verificar si un campo tiene un valor válido
    private bool HasValidValue(string field)
    {
        var value = field switch
        {
            "peso" => pesoInput,
            "talla" => tallaInput,
            "perimetroAbdominal" => perimetroAbdominalInput,
            "temperatura" => temperaturaInput,
            "pam" => pamInput,
            "frecuenciaCardiaca" => frecuenciaCardiacaInput,
            "saturacionOxigeno" => saturacionOxigenoInput,
            "frecuenciaRespiratoria" => frecuenciaRespiratoriaInput,
            "glucosaCapilar" => glucosaCapilarInput,
            "hemoglobina" => hemoglobinaInput,
            "presionArterial" => presionArterialInput,
            _ => ""
        };

        return !string.IsNullOrEmpty(value) && string.IsNullOrEmpty(GetVitalSignError(field));
    }

    // MÉTODOS EXISTENTES (actualizados para no validar área)
    private bool IsPatientTabComplete()
    {
        return selectedPatientId > 0 &&
               !string.IsNullOrWhiteSpace(lugarSeleccionada) &&
               !string.IsNullOrWhiteSpace(motivoConsulta) &&
               selectedHealthProfessionalId > 0; 
    }

    private void ValidateAndShowErrors()
    {
        showValidationErrors = true;
        StateHasChanged();
    }

    private async Task SetActiveTab(string tab)
    {
        if (tab != "patient" && !IsPatientTabComplete())
        {
            showValidationErrors = true;
            await JS.InvokeVoidAsync("alert", "Debe completar toda la información obligatoria en la pestaña de Selección de Paciente antes de continuar.");
            return;
        }

        if (activeTab == "patient" && tab != "patient" && createdCareId == null)
        {
            await SaveMedicalCareRecord();
        }

        if ((tab == "procedures" || tab == "services") && createdCareId.HasValue)
        {
            currentMedicalCareId = createdCareId.Value;
            await JS.InvokeVoidAsync("console.log", "[v0] Set currentMedicalCareId to:", currentMedicalCareId);
        }

        activeTab = tab;
        StateHasChanged();
    }

    private async Task SaveMedicalCareRecord()
    {
        try
        {
            if (!IsPatientTabComplete())
            {
                await JS.InvokeVoidAsync("alert", "Debe completar toda la información obligatoria antes de continuar.");
                return;
            }

            // Validar que tenemos un profesional asignado automáticamente
            if (selectedHealthProfessionalId <= 0)
            {
                await JS.InvokeVoidAsync("alert",
                    "No se pudo identificar al profesional de salud. Por favor, contacte con soporte.");
                return;
            }

            // Obtener el profesional seleccionado para información adicional
            var profesional = profesionales.FirstOrDefault(p => p.HealthProfessionalId == selectedHealthProfessionalId);

            var medicalCareDto = new MedicalCareDTO
                {
                    PatientId = selectedPatientId,
                    HealthProfessionalId = selectedHealthProfessionalId, // Ya asignado automáticamente
                    PlaceOfAttentionId = int.Parse(lugarSeleccionada),
                    LocationId = enfermerialLocationId,
                    CareDate = DateTime.Now,
                };

            var result = await MedicalCareService.CreateAsync(medicalCareDto);
            if (!result.Success)
            {
                await JS.InvokeVoidAsync("alert", $"Error al crear la atención médica: {result.Error}");
                return;
            }

            createdCareId = result.Data.CareId;
            currentMedicalCareId = createdCareId.Value;

            await JS.InvokeVoidAsync("console.log", "[v0] Medical care record created with ID:", createdCareId);
            await JS.InvokeVoidAsync("console.log", "[v0] Assigned professional:",
                $"{profesional?.FullName} (ID: {selectedHealthProfessionalId})");

            // Save reason for consultation immediately
            if (!string.IsNullOrWhiteSpace(motivoConsulta))
            {
                var reasonDto = new ReasonForConsultationDTO
                    {
                        Description = motivoConsulta.Trim(),
                        MedicalCareId = createdCareId.Value
                    };
                await ReasonForConsultationService.CreateAsync(reasonDto);
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", "[v0] Error creating medical care record:", ex.Message);
            await JS.InvokeVoidAsync("alert", $"Error al crear la atención médica: {ex.Message}");
        }
    }

    private async Task LoadExistingData()
    {
        if (MedicalCare == null) return;

        selectedPatientId = MedicalCare.PatientId;
        selectedHealthProfessionalId = MedicalCare.HealthProfessionalId;
        lugarSeleccionada = MedicalCare.PlaceOfAttentionId.ToString() ?? "";
        selectedHistoryNumber = MedicalCare.NamePatient ?? "";
        currentMedicalCareId = MedicalCare.CareId;
        createdCareId = MedicalCare.CareId;

        // Cargar servicios existentes
        if (createdCareId.HasValue)
        {
            await LoadServices();

        }

        await JS.InvokeVoidAsync("console.log", "[v0] Editing existing care with professional:",
            MedicalCare.HealthProfessionalId);

        var existingReasons = await ReasonForConsultationService.GetByCareIdAsync(MedicalCare.CareId);
        existingReasonForConsultation = existingReasons?.FirstOrDefault();
        if (existingReasonForConsultation != null)
        {
            motivoConsulta = existingReasonForConsultation.Description ?? "";
        }

        var allVitalSigns = await VitalSignsService.GetAllAsync();
        existingVitalSigns = allVitalSigns?.FirstOrDefault(vs => vs.MedicalCareId == MedicalCare.CareId);
        if (existingVitalSigns != null)
        {
            // Cargar valores en las variables de input
            pesoInput = existingVitalSigns.Weight?.ToString() ?? "";
            peso = pesoInput;
            tallaInput = existingVitalSigns.Height?.ToString() ?? "";
            talla = tallaInput;
            imcCalculado = existingVitalSigns.Icm?.ToString() ?? "";
            imc = imcCalculado;
            perimetroAbdominalInput = existingVitalSigns.AbdominalCircumference?.ToString() ?? "";
            perimetroAbdominal = perimetroAbdominalInput;
            presionArterialInput = existingVitalSigns.BloodPressure ?? "";
            presionArterial = presionArterialInput;
            temperaturaInput = existingVitalSigns.Temperature?.ToString() ?? "";
            temperatura = temperaturaInput;
            pamInput = existingVitalSigns.MeanArterialPressure?.ToString() ?? "";
            pam = pamInput;
            frecuenciaCardiacaInput = existingVitalSigns.HeartRate?.ToString() ?? "";
            frecuenciaCardiaca = frecuenciaCardiacaInput;
            saturacionOxigenoInput = existingVitalSigns.OxygenSaturation?.ToString() ?? "";
            saturacionOxigeno = saturacionOxigenoInput;
            frecuenciaRespiratoriaInput = existingVitalSigns.RespiratoryRate?.ToString() ?? "";
            frecuenciaRespiratoria = frecuenciaRespiratoriaInput;
            glucosaCapilarInput = existingVitalSigns.BloodGlucose?.ToString() ?? "";
            glucosaCapilar = glucosaCapilarInput;
            hemoglobinaInput = existingVitalSigns.Hemoglobin?.ToString() ?? "";
            hemoglobina = hemoglobinaInput;
        }

        var existingServices = await MedicalServiceService.GetByCareIdAsync(MedicalCare.CareId);
        serviciosList = existingServices ?? new List<MedicalServiceDTO>();

        var existingProcedures = await MedicalProcedureService.GetAllAsync();
        procedimientosList = existingProcedures?.Where(p => p.CareId == MedicalCare.CareId).ToList() ?? new List<MedicalProcedureDTO>();

        // ¡IMPORTANTE! Actualizar la tabla de procedimientos
        await UpdateProcedureTableData();

        StateHasChanged();
    }

    private async Task LoadLugaresAtencion()
    {
        lugaresAtencion = await PlaceService.GetAllPlacesAsync();
    }

    private async Task LoadTypeOfServices()
    {
        tipoServicios = await TypeOfServiceService.GetAllAsync();
    }

    private async Task LoadHealthProfessionals()
    {
        profesionales = await HealthProfessionalService.GetAllHealthProfessionalsAsync();
    }

    private async Task LoadTypeOfProcedures()
    {
        tiposProcedimientos = await TypeOfProceduresService.GetAllAsync();
    }


    private async Task LoadProcedures()
    {
        todosProcedimientos = await ProceduresService.GetAllAsync();
    }

    private Task HandlePatientSelected((int ClinicalHistoryId, string MedicalRecordNumber, int PersonId) paciente)
    {
        clinicalHistoryId = paciente.ClinicalHistoryId;
        selectedPatientId = paciente.PersonId;
        selectedHistoryNumber = paciente.MedicalRecordNumber;
        if (selectedPatientId > 0)
        {
            showValidationErrors = false;
        }
        StateHasChanged();
        return Task.CompletedTask;
    }

    // Métodos para servicios
   
    private async Task OnServiceSaved(MedicalServiceDTO servicio)
    {
        try
        {
            // Asegurar que el servicio tenga todos los datos necesarios
            servicio.PatientId = selectedPatientId;
            servicio.HealthProfessionalId = selectedHealthProfessionalId;
            servicio.CareId = createdCareId.Value;

            MedicalServiceDTO savedService;

            if (servicio.ServiceId > 0)
            {
                // Actualizar servicio existente - AHORA USA LA NUEVA FIRMA
                var updateResult = await MedicalServiceService.UpdateAsync(servicio);
                if (!updateResult.Success)
                {
                    await JS.InvokeVoidAsync("alert", $"Error al actualizar servicio: {updateResult.Error}");
                    return;
                }
                savedService = updateResult.Data; // ← AHORA Data ESTÁ DISPONIBLE
            }
            else
            {
                // Crear nuevo servicio
                var createResult = await MedicalServiceService.CreateAsync(servicio);
                if (!createResult.Success)
                {
                    await JS.InvokeVoidAsync("alert", $"Error al crear servicio: {createResult.Error}");
                    return;
                }
                savedService = createResult.Data;
            }

            // Validar que tenemos el servicio guardado
            if (savedService == null)
            {
                await JS.InvokeVoidAsync("alert", "Error: No se pudo obtener el servicio guardado.");
                return;
            }

            // Actualizar la lista local
            var existing = serviciosList.FirstOrDefault(s => s.ServiceId == savedService.ServiceId);
            if (existing != null)
            {
                var index = serviciosList.IndexOf(existing);
                serviciosList[index] = savedService;
            }
            else
            {
                serviciosList.Add(savedService);
            }

            StateHasChanged();

            await JS.InvokeVoidAsync("console.log", "Servicio guardado exitosamente:", savedService);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", "Error al guardar servicio:", ex);
            await JS.InvokeVoidAsync("alert", $"Error al guardar servicio: {ex.Message}");
        }
    }


    //Procedimientos

    private async Task LoadAvailableTypesOfProcedures()
    {
        try
        {
            availableTypesOfProcedures = await TypeOfProceduresService.GetAllAsync() ?? new();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", "Error loading types of procedures:", ex.Message);
        }
    }

    private async Task LoadAvailableProcedures()
    {
        try
        {
            availableProcedures = await ProceduresService.GetAllAsync() ?? new();
            await JS.InvokeVoidAsync("console.log", $"Loaded {availableProcedures.Count} available procedures");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", "Error loading procedures:", ex.Message);
        }
    }

    private bool IsNursingLocation()
    {
        var location = availableLocations.FirstOrDefault(l => l.Id == selectedLocationId);
        return location?.Name.Contains("Enfermería", StringComparison.OrdinalIgnoreCase) == true;
    }

    private bool IsProcedureFormValid()
    {
        return ValidateProcedureForm();
    }

    private async Task OnTypeOfProcedureChangedAsync(int value)
    {
        selectedTypeOfProcedureId = value;

        // Actualizar filteredProcedures basado en el tipo seleccionado
        if (selectedTypeOfProcedureId > 0)
        {
            filteredProcedures = availableProcedures
                .Where(p => p.TypeOfProcedureId == selectedTypeOfProcedureId)
                .ToList();
        }
        else
        {
            filteredProcedures = new List<ProceduresDTO>();
        }

        // Resetear el procedimiento específico solo si estamos en modo agregar
        if (currentProcedure != null && currentProcedure.ProcedureId == 0)
        {
            currentProcedure.SpecificProcedureId = 0;
        }

        StateHasChanged();
    }

    private bool ValidateProcedureForm()
    {
        procedureErrors.Clear();
        procedureFormError = "";

        // Debug logging
        JS.InvokeVoidAsync("console.log", "Validating procedure form:");
        JS.InvokeVoidAsync("console.log", $"ProcedureDate: {currentProcedure?.ProcedureDate}");
        JS.InvokeVoidAsync("console.log", $"TypeOfProcedureId: {selectedTypeOfProcedureId}");
        JS.InvokeVoidAsync("console.log", $"SpecificProcedureId: {currentProcedure?.SpecificProcedureId}");
        JS.InvokeVoidAsync("console.log", $"LocationId: {currentProcedure?.LocationId}"); // Para verificar

        if (currentProcedure?.ProcedureDate == default)
        {
            procedureErrors["ProcedureDate"] = "Debe seleccionar una fecha";
        }

        if (selectedTypeOfProcedureId <= 0)
        {
            procedureErrors["TypeOfProcedureId"] = "Debe seleccionar un tipo de procedimiento";
        }

        if (currentProcedure?.SpecificProcedureId <= 0)
        {
            procedureErrors["SpecificProcedureId"] = "Debe seleccionar un procedimiento específico";
        }

        JS.InvokeVoidAsync("console.log", $"Validation errors: {procedureErrors.Count}");
        return procedureErrors.Count == 0;
    }

    @* Updated procedure management methods to work with EditableTable *@

    private async Task LoadProcedureData()
    {
        try
        {
            if (availableTypesOfProcedures.Count == 0)
            {
                availableTypesOfProcedures = await TypeOfProceduresService.GetAllAsync() ?? new();
            }

            if (availableProcedures.Count == 0)
            {
                availableProcedures = await ProceduresService.GetAllAsync() ?? new();
            }

            if (availableLocations.Count == 0)
            {
                availableLocations = await LocationService.GetAllAsync() ?? new();
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", "Error loading procedure data:", ex.Message);
        }
    }

    private void ClearProcedureForm()
    {
        currentProcedure = null;
        selectedTypeOfProcedureId = 0;
        filteredProcedures = new List<ProceduresDTO>();
        procedureErrors.Clear();
        procedureFormError = "";
    }

    private async Task OnAddProcedureRequested()
    {
        if (createdCareId == null)
        {
            await JS.InvokeVoidAsync("alert", "Debe guardar primero los datos básicos del paciente.");
            return;
        }

        ClearProcedureForm();

        currentProcedure = new MedicalProcedureDTO
            {
                ProcedureId = 0,
                PatientId = selectedPatientId,
                CareId = createdCareId.Value,
                ProcedureDate = DateTime.Now,
                Status = "Realizado",
                SpecificProcedureId = 0,
                LocationId = enfermerialLocationId
            };

        StateHasChanged();
    }


    private async Task OnEditProcedureRequested(int procedureId)
    {
        try
        {
            // Limpiar el estado actual primero
            currentProcedure = null;
            selectedTypeOfProcedureId = 0;
            filteredProcedures = new List<ProceduresDTO>();

            // Forzar una actualización de UI para limpiar cualquier estado previo
            await InvokeAsync(StateHasChanged);
            await Task.Delay(50); // Pequeño delay para asegurar que la UI se actualice

            var procedure = procedimientosList.FirstOrDefault(p => p.ProcedureId == procedureId);
            if (procedure != null)
            {
                await JS.InvokeVoidAsync("console.log", "Editing procedure:", procedure);
                await JS.InvokeVoidAsync("console.log", $"TypeOfProcedureId: {procedure.TypeOfProcedureId}");
                await JS.InvokeVoidAsync("console.log", $"SpecificProcedureId: {procedure.SpecificProcedureId}");

                currentProcedure = new MedicalProcedureDTO
                    {
                        ProcedureId = procedure.ProcedureId,
                        PatientId = procedure.PatientId,
                        CareId = procedure.CareId,
                        ProcedureDate = procedure.ProcedureDate,
                        HealthProfessionalId = procedure.HealthProfessionalId,
                        TypeOfProcedureId = procedure.TypeOfProcedureId,
                        SpecificProcedureId = procedure.SpecificProcedureId,
                        LocationId = procedure.LocationId,
                        Observations = procedure.Observations,
                        Status = procedure.Status
                    };

                selectedTypeOfProcedureId = procedure.TypeOfProcedureId ?? 0;

                await JS.InvokeVoidAsync("console.log", $"Selected TypeOfProcedureId: {selectedTypeOfProcedureId}");

                // Cargar datos si es necesario
                if (availableProcedures.Count == 0)
                {
                    await LoadProcedureData();
                }

                // Actualizar filteredProcedures basado en el tipo seleccionado
                if (selectedTypeOfProcedureId > 0)
                {
                    filteredProcedures = availableProcedures
                        .Where(p => p.TypeOfProcedureId == selectedTypeOfProcedureId)
                        .ToList();

                    await JS.InvokeVoidAsync("console.log", $"Filtered procedures count: {filteredProcedures.Count}");
                    foreach (var proc in filteredProcedures)
                    {
                        await JS.InvokeVoidAsync("console.log", $"Available procedure: {proc.Description} (ID: {proc.Id})");
                    }
                }
                else
                {
                    filteredProcedures = new List<ProceduresDTO>();
                }

                // Forzar la actualización de la UI después de que todos los datos estén listos
                await InvokeAsync(StateHasChanged);
            }

            procedureErrors.Clear();
            procedureFormError = "";
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", "Error in OnEditProcedureRequested:", ex.Message);
            procedureFormError = $"Error al cargar el procedimiento: {ex.Message}";
        }
    }

    private async Task OnDeleteProcedureRequested(int procedureId)
    {
        var procedure = procedimientosList.FirstOrDefault(p => p.ProcedureId == procedureId);
        if (procedure == null) return;

        try
        {
            var deleteResult = await MedicalProcedureService.DeleteAsync(procedure.ProcedureId);
            if (deleteResult.Success)
            {
                procedimientosList.Remove(procedure);
                ActualizarTablaProcedimientos();
                await JS.InvokeVoidAsync("alert", "Procedimiento eliminado exitosamente");
            }
            else
            {
                await JS.InvokeVoidAsync("alert", $"Error al eliminar: {deleteResult.Error}");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error al eliminar procedimiento: {ex.Message}");
        }
    }

    private void ActualizarTablaProcedimientos()
    {
        procedureRows = procedimientosList
            .Select(p => new List<string>
                        {
                p?.ProcedureDate.ToShortDateString() ?? "",
                p?.TypeOfProcedureName ?? "Sin especificar",
                p?.SpecificProcedureName ?? "Sin especificar",
                p?.Observations ?? ""
                        }).ToList();

        procedureRowIds = procedimientosList.Select(p => p.ProcedureId).ToList();

        StateHasChanged();
    }

    private async Task OnSaveProcedureRequested()
    {
        if (!ValidateProcedureForm())
        {
            return;
        }

        try
        {
            // Asegurar IDs correctos
            currentProcedure.PatientId = selectedPatientId;
            currentProcedure.CareId = currentMedicalCareId;

            // Siempre asignar el LocationId de Enfermería
            currentProcedure.LocationId = enfermerialLocationId;

            // Asignar profesional y estado según departamento
            await AssignProfessionalAndStatus();

            if (currentProcedure.ProcedureId > 0)
            {
                var updateResult = await MedicalProcedureService.UpdateAsync(currentProcedure);
                if (!updateResult.Success)
                {
                    procedureFormError = $"Error al actualizar: {updateResult.Error}";
                    return;
                }
            }
            else
            {
                var createResult = await MedicalProcedureService.CreateAsync(currentProcedure);
                if (!createResult.Success)
                {
                    procedureFormError = $"Error al crear: {createResult.Error}";
                    return;
                }
            }

            // Recargar todos los procedimientos desde la base de datos
            await CargarProcedimientos();

            await JS.InvokeVoidAsync("alert", "Procedimiento guardado exitosamente");
        }
        catch (Exception ex)
        {
            procedureFormError = $"Error al guardar procedimiento: {ex.Message}";
            await JS.InvokeVoidAsync("console.error", "Error saving procedure:", ex.Message);
        }
    }

    private async Task AssignProfessionalAndStatus()
    {
        var currentUser = await AuthorizationService.GetCurrentUserAsync();
        if (currentUser != null)
        {
            var currentProfessional = profesionales.FirstOrDefault(hp =>
                hp.HealthProfessionalId == currentUser.PersonId ||
                hp.RegistrationNumber == currentUser.RegistrationNumber);

            if (currentProfessional != null)
            {
                // El enfermero es tanto el profesional de salud como el "médico tratante"
                currentProcedure.HealthProfessionalId = currentProfessional.HealthProfessionalId;
                currentProcedure.TreatingPhysicianId = currentProfessional.HealthProfessionalId;
                currentProcedure.Status = "Realizado";

                // ¡IMPORTANTE! Asignar el LocationId de Enfermería
                currentProcedure.LocationId = enfermerialLocationId;
            }
        }
        else
        {
            // Si no hay usuario, igual asignar el LocationId de Enfermería
            currentProcedure.LocationId = enfermerialLocationId;
            currentProcedure.Status = "Realizado";
        }
    }

    private bool IsValidProcedureForm()
    {
        if (currentProcedure == null) return false;

        return currentProcedure.ProcedureDate != default &&
               currentProcedure.SpecificProcedureId > 0 &&
               currentProcedure.PatientId > 0;
    }

    private void OnCancelProcedure()
    {
        currentProcedure = null;
        StateHasChanged();
    }


    @* Removed old methods and added new method to update table data *@
    private async Task UpdateProcedureTableData()
    {
        procedureRows.Clear();
        procedureRowIds.Clear();

        // Debug logging
        await JS.InvokeVoidAsync("console.log", "Updating procedure table data:");
        await JS.InvokeVoidAsync("console.log", $"Number of procedures: {procedimientosList.Count}");

        foreach (var procedimiento in procedimientosList)
        {
            var row = new List<string>
        {
            procedimiento.ProcedureDate.ToString("dd/MM/yyyy HH:mm"),
            procedimiento.TypeOfProcedureName ?? "Sin especificar",
            procedimiento.SpecificProcedureName ?? "Sin especificar",
            procedimiento.Observations ?? ""
        };

            procedureRows.Add(row);
            procedureRowIds.Add(procedimiento.ProcedureId);

            // Debug logging for each procedure
            await JS.InvokeVoidAsync("console.log", $"Procedure: {procedimiento.SpecificProcedureName}, Date: {procedimiento.ProcedureDate}");
        }

        await JS.InvokeVoidAsync("console.log", $"Total rows: {procedureRows.Count}, Total ids: {procedureRowIds.Count}");

        StateHasChanged();
    }

    private async Task CargarProcedimientos()
    {
        if (createdCareId.HasValue)
        {
            var existingProcedures = await MedicalProcedureService.GetAllAsync();
            procedimientosList = existingProcedures?.Where(p => p.CareId == createdCareId.Value).ToList() ?? new List<MedicalProcedureDTO>();
            await UpdateProcedureTableData();
        }
    }

    private MedicalProcedureDTO? currentProcedure;
    private bool showProcedureModal = false;

    private async Task OnProcedureSaved(MedicalProcedureDTO procedimiento)
    {
        if (procedimiento == null) return;

        try
        {
            // Aseguramos IDs correctos
            procedimiento.PatientId = selectedPatientId;
            procedimiento.CareId = currentMedicalCareId;

            if (procedimiento.ProcedureId > 0)
            {
                var updateResult = await MedicalProcedureService.UpdateAsync(procedimiento);
                if (!updateResult.Success)
                {
                    await JS.InvokeVoidAsync("alert", $"Error al actualizar: {updateResult.Error}");
                    return;
                }
            }
            else
            {
                var createResult = await MedicalProcedureService.CreateAsync(procedimiento);
                if (!createResult.Success)
                {
                    await JS.InvokeVoidAsync("alert", $"Error al crear: {createResult.Error}");
                    return;
                }
            }

            // Recargar la tabla desde la base de datos
            await CargarProcedimientos();

            // Cerrar modal y limpiar
            CerrarModalProcedimiento();

            // Notificar al usuario
            await JS.InvokeVoidAsync("alert", "Procedimiento guardado exitosamente");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", "Error al guardar procedimiento:", ex.Message);
            await JS.InvokeVoidAsync("alert", $"Error al guardar procedimiento: {ex.Message}");
        }
    }

    private void CerrarModalProcedimiento()
    {
        currentProcedure = null;
        showProcedureModal = false;
        StateHasChanged();
    }

    private void LimpiarSignosVitales()
    {
        pesoInput = "";
        tallaInput = "";
        imcCalculado = "";
        imcInput = "";
        perimetroAbdominalInput = "";
        presionArterialInput = "";
        temperaturaInput = "";
        pamInput = "";
        frecuenciaCardiacaInput = "";
        saturacionOxigenoInput = "";
        frecuenciaRespiratoriaInput = "";
        glucosaCapilarInput = "";
        hemoglobinaInput = "";

        // Limpiar errores
        InitializeVitalSignsErrors();
        StateHasChanged();
    }

    private async Task GuardarAtencionMedica()
    {
        isSaving = true;
        StateHasChanged();

        try
        {
            if (!IsPatientTabComplete())
            {
                showValidationErrors = true;
                await JS.InvokeVoidAsync("alert", "Debe completar toda la información obligatoria antes de guardar.");
                await SetActiveTab("patient");
                return;
            }

            MedicalCareDTO medicalCareResult;

            // 1. CREAR O ACTUALIZAR ATENCIÓN MÉDICA
            if (createdCareId != null)
            {
                medicalCareResult = new MedicalCareDTO { CareId = createdCareId.Value };
            }
            else if (isEditMode && MedicalCare != null && MedicalCare.CareId > 0)
            {
                MedicalCare.HealthProfessionalId = selectedHealthProfessionalId;
                MedicalCare.LocationId = enfermerialLocationId;
                MedicalCare.PlaceOfAttentionId = int.Parse(lugarSeleccionada);

                var updateResult = await MedicalCareService.UpdateAsync(MedicalCare);
                if (!updateResult.Success)
                {
                    await JS.InvokeVoidAsync("alert", $"Error al actualizar la atención médica: {updateResult.Error}");
                    return;
                }
                medicalCareResult = MedicalCare;
                createdCareId = MedicalCare.CareId;
                currentMedicalCareId = MedicalCare.CareId;
            }
            else
            {
                await SaveMedicalCareRecord();
                if (createdCareId == null)
                {
                    await JS.InvokeVoidAsync("alert", "Error: No se pudo crear la atención médica.");
                    return;
                }
                medicalCareResult = new MedicalCareDTO { CareId = createdCareId.Value };
            }

            // 2. GUARDAR SIGNOS VITALES (PARTE CORREGIDA)
            if (HasVitalSignsData())
            {
                await JS.InvokeVoidAsync("console.log", "Guardando signos vitales...");

                // Calcular IMC si hay peso y talla
                decimal? calculatedIMC = null;
                if (decimal.TryParse(pesoInput, out decimal weight) &&
                    decimal.TryParse(tallaInput, out decimal height) &&
                    weight > 0 && height > 0)
                {
                    var heightInMeters = height / 100;
                    calculatedIMC = weight / (heightInMeters * heightInMeters);
                }

                var vitalSignsDto = new VitalSignsDTO
                    {
                        Id = existingVitalSigns?.Id ?? 0,
                        MedicalCareId = medicalCareResult.CareId,
                        Weight = ParseDecimal(pesoInput),
                        Height = ParseDecimal(tallaInput),
                        Icm = calculatedIMC ?? ParseDecimal(imcInput),
                        AbdominalCircumference = ParseDecimal(perimetroAbdominalInput),
                        BloodPressure = string.IsNullOrWhiteSpace(presionArterialInput) ? null : presionArterialInput.Trim(),
                        Temperature = ParseDecimal(temperaturaInput),
                        MeanArterialPressure = ParseDecimal(pamInput),
                        HeartRate = ParseInt(frecuenciaCardiacaInput),
                        OxygenSaturation = ParseDecimal(saturacionOxigenoInput),
                        RespiratoryRate = ParseInt(frecuenciaRespiratoriaInput),
                        BloodGlucose = ParseDecimal(glucosaCapilarInput),
                        Hemoglobin = ParseDecimal(hemoglobinaInput)
                    };

                try
                {
                    if (existingVitalSigns != null && existingVitalSigns.Id > 0)
                    {
                        var updateResult = await VitalSignsService.UpdateAsync(vitalSignsDto);
                        if (updateResult.Success)
                        {
                            await JS.InvokeVoidAsync("console.log", "Signos vitales actualizados exitosamente");
                        }
                        else
                        {
                            await JS.InvokeVoidAsync("alert", $"Error al actualizar signos vitales: {updateResult.Error}");
                        }
                    }
                    else
                    {
                        var createResult = await VitalSignsService.CreateAsync(vitalSignsDto);
                        if (createResult.Success)
                        {
                            existingVitalSigns = createResult.Data;
                            await JS.InvokeVoidAsync("console.log", "Signos vitales creados exitosamente");
                        }
                        else
                        {
                            await JS.InvokeVoidAsync("alert", $"Error al crear signos vitales: {createResult.Error}");
                        }
                    }
                }
                catch (Exception ex)
                {
                    await JS.InvokeVoidAsync("console.error", "Excepción guardando signos vitales:", ex.Message);
                    await JS.InvokeVoidAsync("alert", $"Error al guardar signos vitales: {ex.Message}");
                }
            }
            else if (existingVitalSigns != null && existingVitalSigns.Id > 0)
            {
                try
                {
                    await VitalSignsService.DeleteAsync(existingVitalSigns.Id);
                    existingVitalSigns = null;
                }
                catch (Exception ex)
                {
                    await JS.InvokeVoidAsync("console.error", "Error eliminando signos vitales:", ex.Message);
                }
            }

            // 3. NOTIFICAR ÉXITO
            string successMessage = isEditMode
                ? "Atención médica de enfermería actualizada exitosamente"
                : "Atención médica de enfermería creada exitosamente";

            await JS.InvokeVoidAsync("alert", successMessage);

            if (OnSaved.HasDelegate)
            {
                await OnSaved.InvokeAsync(medicalCareResult);
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", "Error general en GuardarAtencionMedica:", ex);
            await JS.InvokeVoidAsync("alert", $"Error inesperado al guardar: {ex.Message}");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private void CalculateIMC()
    {
        if (decimal.TryParse(pesoInput, out decimal weight) &&
            decimal.TryParse(tallaInput, out decimal height) &&
            weight > 0 && height > 0)
        {
            var heightInMeters = height / 100;
            var bmi = weight / (heightInMeters * heightInMeters);
            imcCalculado = bmi.ToString("F2");
            imcInput = imcCalculado; // ← Esta línea es importante
        }
        else
        {
            imcCalculado = "";
            imcInput = "";
        }
        StateHasChanged();
    }

    private bool HasVitalSignsData()
    {
        return !string.IsNullOrWhiteSpace(pesoInput) && decimal.TryParse(pesoInput, out _) ||
               !string.IsNullOrWhiteSpace(tallaInput) && decimal.TryParse(tallaInput, out _) ||
               !string.IsNullOrWhiteSpace(presionArterialInput) ||
               !string.IsNullOrWhiteSpace(temperaturaInput) && decimal.TryParse(temperaturaInput, out _) ||
               !string.IsNullOrWhiteSpace(frecuenciaCardiacaInput) && int.TryParse(frecuenciaCardiacaInput, out _) ||
               !string.IsNullOrWhiteSpace(saturacionOxigenoInput) && decimal.TryParse(saturacionOxigenoInput, out _) ||
               !string.IsNullOrWhiteSpace(frecuenciaRespiratoriaInput) && int.TryParse(frecuenciaRespiratoriaInput, out _) ||
               !string.IsNullOrWhiteSpace(glucosaCapilarInput) && decimal.TryParse(glucosaCapilarInput, out _) ||
               !string.IsNullOrWhiteSpace(hemoglobinaInput) && decimal.TryParse(hemoglobinaInput, out _) ||
               !string.IsNullOrWhiteSpace(perimetroAbdominalInput) && decimal.TryParse(perimetroAbdominalInput, out _) ||
               !string.IsNullOrWhiteSpace(pamInput) && decimal.TryParse(pamInput, out _);
    }

    private decimal? ParseDecimal(string value)
    {
        return decimal.TryParse(value, out var result) ? result : null;
    }

    private int? ParseInt(string value)
    {
        return int.TryParse(value, out var result) ? result : null;
    }
}
