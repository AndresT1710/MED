// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SGIS.Models;

#nullable disable

namespace SMED.BackEnd.Migrations
{
    [DbContext(typeof(SGISContext))]
    partial class SGISContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Infrastructure.Models.Allergy", b =>
                {
                    b.Property<int>("AllergyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AllergyId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("AllergyId");

                    b.ToTable("Allergies");
                });

            modelBuilder.Entity("Infrastructure.Models.AllergyHistory", b =>
                {
                    b.Property<int>("AllergyHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AllergyHistoryId"));

                    b.Property<int?>("AllergyId")
                        .HasColumnType("int");

                    b.Property<int>("ClinicalHistoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("HistoryNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime");

                    b.HasKey("AllergyHistoryId");

                    b.HasIndex("AllergyId");

                    b.HasIndex("ClinicalHistoryId");

                    b.ToTable("AllergyHistories");
                });

            modelBuilder.Entity("Infrastructure.Models.Surgery", b =>
                {
                    b.Property<int>("SurgeryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SurgeryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("SurgeryId");

                    b.ToTable("Surgeries");
                });

            modelBuilder.Entity("SMED.Shared.Entity.BloodGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("BloodGroups");
                });

            modelBuilder.Entity("SMED.Shared.Entity.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("City", (string)null);
                });

            modelBuilder.Entity("SMED.Shared.Entity.ClinicalHistory", b =>
                {
                    b.Property<int>("ClinicalHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClinicalHistoryId"));

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("GeneralObservations")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("HistoryNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("ClinicalHistoryId");

                    b.HasIndex("HistoryNumber")
                        .IsUnique();

                    b.HasIndex("PatientId");

                    b.ToTable("ClinicalHistories");
                });

            modelBuilder.Entity("SMED.Shared.Entity.Disease", b =>
                {
                    b.Property<int>("DiseaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiseaseId"));

                    b.Property<int>("DiseaseTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("DiseaseId");

                    b.HasIndex("DiseaseTypeId");

                    b.ToTable("Diseases");
                });

            modelBuilder.Entity("SMED.Shared.Entity.DiseaseType", b =>
                {
                    b.Property<int>("DiseaseTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiseaseTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DiseaseTypeId");

                    b.ToTable("DiseaseTypes");
                });

            modelBuilder.Entity("SMED.Shared.Entity.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("SMED.Shared.Entity.EducationLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("EducationLevels");
                });

            modelBuilder.Entity("SMED.Shared.Entity.EmergencyContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("EmergencyContacts");
                });

            modelBuilder.Entity("SMED.Shared.Entity.FamilyHistoryDetail", b =>
                {
                    b.Property<int>("FamilyHistoryDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FamilyHistoryDetailId"));

                    b.Property<int>("ClinicalHistoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiseaseId")
                        .HasColumnType("int");

                    b.Property<string>("MedicalRecordNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime");

                    b.HasKey("FamilyHistoryDetailId");

                    b.HasIndex("ClinicalHistoryId");

                    b.HasIndex("DiseaseId");

                    b.ToTable("FamilyHistoryDetails");
                });

            modelBuilder.Entity("SMED.Shared.Entity.Food", b =>
                {
                    b.Property<int>("FoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FoodId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("FoodId");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("SMED.Shared.Entity.FoodIntoleranceHistory", b =>
                {
                    b.Property<int>("FoodIntoleranceHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FoodIntoleranceHistoryId"));

                    b.Property<int>("ClinicalHistoryId")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("FoodId")
                        .HasColumnType("int");

                    b.Property<string>("HistoryNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime");

                    b.HasKey("FoodIntoleranceHistoryId");

                    b.HasIndex("ClinicalHistoryId");

                    b.HasIndex("FoodId");

                    b.ToTable("FoodIntoleranceHistories");
                });

            modelBuilder.Entity("SMED.Shared.Entity.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("SMED.Shared.Entity.GynecologicalHistory", b =>
                {
                    b.Property<int>("GynecologicalHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GynecologicalHistoryId"));

                    b.Property<int>("ClinicalHistoryId")
                        .HasColumnType("int");

                    b.Property<string>("ContraceptiveMethods")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("DiseaseId")
                        .HasColumnType("int");

                    b.Property<string>("GynecologicalDevelopment")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly?>("LastMenstruation")
                        .HasColumnType("date");

                    b.Property<string>("MedicalRecordNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateOnly?>("Menarche")
                        .HasColumnType("date");

                    b.Property<string>("MenstrualCycles")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateOnly?>("Pubarche")
                        .HasColumnType("date");

                    b.HasKey("GynecologicalHistoryId");

                    b.HasIndex("ClinicalHistoryId");

                    b.HasIndex("DiseaseId");

                    b.ToTable("GynecologicalHistories");
                });

            modelBuilder.Entity("SMED.Shared.Entity.HealthProfessional", b =>
                {
                    b.Property<int>("HealthProfessionalId")
                        .HasColumnType("int");

                    b.Property<int?>("HealthProfessionalTypeId")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("HealthProfessionalId");

                    b.HasIndex("HealthProfessionalTypeId");

                    b.ToTable("HealthProfessionals");
                });

            modelBuilder.Entity("SMED.Shared.Entity.HealthProfessionalType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("HealthProfessionalTypes");
                });

            modelBuilder.Entity("SMED.Shared.Entity.LaborActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("LaborActivities");
                });

            modelBuilder.Entity("SMED.Shared.Entity.Laterality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("LateralityTypes");
                });

            modelBuilder.Entity("SMED.Shared.Entity.MaritalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("MaritalStatuses");
                });

            modelBuilder.Entity("SMED.Shared.Entity.MedicalInsurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("MedicalInsurances");
                });

            modelBuilder.Entity("SMED.Shared.Entity.MedicalVisit", b =>
                {
                    b.Property<int>("MedicalVisitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalVisitId"));

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("VisitDate")
                        .HasColumnType("date");

                    b.HasKey("MedicalVisitId");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalVisits");
                });

            modelBuilder.Entity("SMED.Shared.Entity.ObstetricHistory", b =>
                {
                    b.Property<int>("ObstetricHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ObstetricHistoryId"));

                    b.Property<bool?>("Abortions")
                        .HasColumnType("bit");

                    b.Property<bool?>("Breastfeeding")
                        .HasColumnType("bit");

                    b.Property<bool?>("CSections")
                        .HasColumnType("bit");

                    b.Property<int>("ClinicalHistoryId")
                        .HasColumnType("int");

                    b.Property<bool?>("CurrentPregnancy")
                        .HasColumnType("bit");

                    b.Property<bool?>("Deliveries")
                        .HasColumnType("bit");

                    b.Property<int?>("DiseaseId")
                        .HasColumnType("int");

                    b.Property<string>("HistoryNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("LiveBirths")
                        .HasColumnType("int");

                    b.Property<int?>("LivingChildren")
                        .HasColumnType("int");

                    b.Property<bool?>("PreviousPregnancies")
                        .HasColumnType("bit");

                    b.Property<int?>("Stillbirths")
                        .HasColumnType("int");

                    b.HasKey("ObstetricHistoryId");

                    b.HasIndex("ClinicalHistoryId");

                    b.HasIndex("DiseaseId");

                    b.ToTable("ObstetricHistories");
                });

            modelBuilder.Entity("SMED.Shared.Entity.Patient", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("PersonId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("SMED.Shared.Entity.PatientRelationship", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("RelationshipId")
                        .HasColumnType("int");

                    b.HasKey("PatientId");

                    b.HasIndex("RelationshipId");

                    b.ToTable("PatientRelationships");
                });

            modelBuilder.Entity("SMED.Shared.Entity.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("SMED.Shared.Entity.PersonAddress", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("HouseNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MainStreet")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Reference")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SecondaryStreet1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SecondaryStreet2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PersonId");

                    b.ToTable("PersonAddresses");
                });

            modelBuilder.Entity("SMED.Shared.Entity.PersonBloodGroup", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int?>("BloodGroupId")
                        .HasColumnType("int");

                    b.HasKey("PersonId");

                    b.HasIndex("BloodGroupId");

                    b.ToTable("PersonBloodGroups");
                });

            modelBuilder.Entity("SMED.Shared.Entity.PersonDocument", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("DocumentNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("DocumentTypeId")
                        .HasColumnType("int");

                    b.HasKey("PersonId");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("PersonDocuments");
                });

            modelBuilder.Entity("SMED.Shared.Entity.PersonEducation", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int?>("EducationLevelId")
                        .HasColumnType("int");

                    b.HasKey("PersonId");

                    b.HasIndex("EducationLevelId");

                    b.ToTable("PersonEducations");
                });

            modelBuilder.Entity("SMED.Shared.Entity.PersonLaborActivity", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int?>("LaborActivityId")
                        .HasColumnType("int");

                    b.HasKey("PersonId");

                    b.HasIndex("LaborActivityId");

                    b.ToTable("PersonLaborActivities");
                });

            modelBuilder.Entity("SMED.Shared.Entity.PersonLaterality", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int?>("LateralityId")
                        .HasColumnType("int");

                    b.HasKey("PersonId");

                    b.HasIndex("LateralityId");

                    b.ToTable("PersonLateralities");
                });

            modelBuilder.Entity("SMED.Shared.Entity.PersonMaritalStatus", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int?>("MaritalStatusId")
                        .HasColumnType("int");

                    b.HasKey("PersonId");

                    b.HasIndex("MaritalStatusId");

                    b.ToTable("PersonMaritalStatuses");
                });

            modelBuilder.Entity("SMED.Shared.Entity.PersonMedicalInsurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("MedicalInsuranceId")
                        .HasColumnType("int");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicalInsuranceId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonMedicalInsurances");
                });

            modelBuilder.Entity("SMED.Shared.Entity.PersonPhone", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Landline")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("PersonId");

                    b.ToTable("PersonPhones");
                });

            modelBuilder.Entity("SMED.Shared.Entity.PersonProfession", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("ProfessionId")
                        .HasColumnType("int");

                    b.HasKey("PersonId", "ProfessionId");

                    b.HasIndex("ProfessionId");

                    b.ToTable("PersonProfessions");
                });

            modelBuilder.Entity("SMED.Shared.Entity.PersonReligion", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int?>("ReligionId")
                        .HasColumnType("int");

                    b.HasKey("PersonId");

                    b.HasIndex("ReligionId");

                    b.ToTable("PersonReligions");
                });

            modelBuilder.Entity("SMED.Shared.Entity.PersonResidence", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.HasKey("PersonId");

                    b.HasIndex("CityId");

                    b.ToTable("PersonResidences");
                });

            modelBuilder.Entity("SMED.Shared.Entity.PersonalHistory", b =>
                {
                    b.Property<int>("PersonalHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonalHistoryId"));

                    b.Property<int>("ClinicalHistoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiseaseId")
                        .HasColumnType("int");

                    b.Property<string>("MedicalRecordNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime");

                    b.HasKey("PersonalHistoryId");

                    b.HasIndex("ClinicalHistoryId");

                    b.HasIndex("DiseaseId");

                    b.ToTable("PersonalHistories");
                });

            modelBuilder.Entity("SMED.Shared.Entity.Profession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Professions");
                });

            modelBuilder.Entity("SMED.Shared.Entity.Progress", b =>
                {
                    b.Property<int>("ProgressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgressId"));

                    b.Property<int>("MedicalVisitId")
                        .HasColumnType("int");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ProgressPercentage")
                        .HasColumnType("float");

                    b.HasKey("ProgressId");

                    b.HasIndex("MedicalVisitId");

                    b.ToTable("Progresses");
                });

            modelBuilder.Entity("SMED.Shared.Entity.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Pronvince", (string)null);
                });

            modelBuilder.Entity("SMED.Shared.Entity.Relationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Relationships");
                });

            modelBuilder.Entity("SMED.Shared.Entity.Religion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Religions");
                });

            modelBuilder.Entity("SMED.Shared.Entity.SurgeryHistory", b =>
                {
                    b.Property<int>("SurgeryHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SurgeryHistoryId"));

                    b.Property<int>("ClinicalHistoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("HistoryNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("SurgeryId")
                        .HasColumnType("int");

                    b.HasKey("SurgeryHistoryId");

                    b.HasIndex("ClinicalHistoryId");

                    b.HasIndex("SurgeryId");

                    b.ToTable("SurgeryHistories");
                });

            modelBuilder.Entity("SMED.Shared.Entity.ToxicHabit", b =>
                {
                    b.Property<int>("ToxicHabitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ToxicHabitId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("ToxicHabitId");

                    b.ToTable("ToxicHabits");
                });

            modelBuilder.Entity("SMED.Shared.Entity.ToxicHabitBackground", b =>
                {
                    b.Property<int>("ToxicHabitBackgroundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ToxicHabitBackgroundId"));

                    b.Property<int>("ClinicalHistoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("HistoryNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("RecordDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ToxicHabitId")
                        .HasColumnType("int");

                    b.HasKey("ToxicHabitBackgroundId");

                    b.HasIndex("ClinicalHistoryId");

                    b.HasIndex("ToxicHabitId");

                    b.ToTable("ToxicHabitHistories");
                });

            modelBuilder.Entity("SMED.Shared.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique()
                        .HasFilter("[PersonId] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Infrastructure.Models.AllergyHistory", b =>
                {
                    b.HasOne("Infrastructure.Models.Allergy", "AllergyNavigation")
                        .WithMany("AllergyHistories")
                        .HasForeignKey("AllergyId")
                        .HasConstraintName("FK_AllergyHistory_Allergy");

                    b.HasOne("SMED.Shared.Entity.ClinicalHistory", "HistoryNavigation")
                        .WithMany("AllergyHistories")
                        .HasForeignKey("ClinicalHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AllergyHistory_ClinicalHistory");

                    b.Navigation("AllergyNavigation");

                    b.Navigation("HistoryNavigation");
                });

            modelBuilder.Entity("SMED.Shared.Entity.City", b =>
                {
                    b.HasOne("SMED.Shared.Entity.Province", "ProvinceNavigation")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ProvinceNavigation");
                });

            modelBuilder.Entity("SMED.Shared.Entity.ClinicalHistory", b =>
                {
                    b.HasOne("SMED.Shared.Entity.Patient", "Patient")
                        .WithMany("ClinicalHistories")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_ClinicalHistory_Patient");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SMED.Shared.Entity.Disease", b =>
                {
                    b.HasOne("SMED.Shared.Entity.DiseaseType", "DiseaseTypeNavigation")
                        .WithMany("Diseases")
                        .HasForeignKey("DiseaseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Disease_DiseaseType");

                    b.Navigation("DiseaseTypeNavigation");
                });

            modelBuilder.Entity("SMED.Shared.Entity.EmergencyContact", b =>
                {
                    b.HasOne("SMED.Shared.Entity.Patient", "Patient")
                        .WithMany("EmergencyContacts")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SMED.Shared.Entity.FamilyHistoryDetail", b =>
                {
                    b.HasOne("SMED.Shared.Entity.ClinicalHistory", "MedicalRecordNavigation")
                        .WithMany("FamilyHistoryDetails")
                        .HasForeignKey("ClinicalHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMED.Shared.Entity.Disease", "DiseaseNavigation")
                        .WithMany("FamilyHistoryDetails")
                        .HasForeignKey("DiseaseId");

                    b.Navigation("DiseaseNavigation");

                    b.Navigation("MedicalRecordNavigation");
                });

            modelBuilder.Entity("SMED.Shared.Entity.FoodIntoleranceHistory", b =>
                {
                    b.HasOne("SMED.Shared.Entity.ClinicalHistory", "HistoryNavigation")
                        .WithMany("FoodIntoleranceHistories")
                        .HasForeignKey("ClinicalHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FoodIntoleranceHistory_ClinicalHistory");

                    b.HasOne("SMED.Shared.Entity.Food", "FoodNavigation")
                        .WithMany("FoodIntoleranceHistories")
                        .HasForeignKey("FoodId")
                        .HasConstraintName("FK_FoodIntoleranceHistory_Food");

                    b.Navigation("FoodNavigation");

                    b.Navigation("HistoryNavigation");
                });

            modelBuilder.Entity("SMED.Shared.Entity.GynecologicalHistory", b =>
                {
                    b.HasOne("SMED.Shared.Entity.ClinicalHistory", "MedicalRecordNavigation")
                        .WithMany("GynecologicalHistories")
                        .HasForeignKey("ClinicalHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMED.Shared.Entity.Disease", "DiseaseNavigation")
                        .WithMany("GynecologicalHistories")
                        .HasForeignKey("DiseaseId");

                    b.Navigation("DiseaseNavigation");

                    b.Navigation("MedicalRecordNavigation");
                });

            modelBuilder.Entity("SMED.Shared.Entity.HealthProfessional", b =>
                {
                    b.HasOne("SMED.Shared.Entity.Person", "PersonNavigation")
                        .WithOne("HealthProfessional")
                        .HasForeignKey("SMED.Shared.Entity.HealthProfessional", "HealthProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMED.Shared.Entity.HealthProfessionalType", "HealthProfessionalTypeNavigation")
                        .WithMany("HealthProfessionals")
                        .HasForeignKey("HealthProfessionalTypeId");

                    b.Navigation("HealthProfessionalTypeNavigation");

                    b.Navigation("PersonNavigation");
                });

            modelBuilder.Entity("SMED.Shared.Entity.MedicalVisit", b =>
                {
                    b.HasOne("SMED.Shared.Entity.Patient", "Patient")
                        .WithMany("MedicalVisits")
                        .HasForeignKey("PatientId");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SMED.Shared.Entity.ObstetricHistory", b =>
                {
                    b.HasOne("SMED.Shared.Entity.ClinicalHistory", "HistoryNavigation")
                        .WithMany("ObstetricHistories")
                        .HasForeignKey("ClinicalHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ObstetricHistory_ClinicalHistory");

                    b.HasOne("SMED.Shared.Entity.Disease", "DiseaseNavigation")
                        .WithMany("ObstetricHistories")
                        .HasForeignKey("DiseaseId")
                        .HasConstraintName("FK_ObstetricHistory_Disease");

                    b.Navigation("DiseaseNavigation");

                    b.Navigation("HistoryNavigation");
                });

            modelBuilder.Entity("SMED.Shared.Entity.Patient", b =>
                {
                    b.HasOne("SMED.Shared.Entity.Person", "PersonNavigation")
                        .WithOne("Patient")
                        .HasForeignKey("SMED.Shared.Entity.Patient", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonNavigation");
                });

            modelBuilder.Entity("SMED.Shared.Entity.PatientRelationship", b =>
                {
                    b.HasOne("SMED.Shared.Entity.Patient", "Patient")
                        .WithOne("PatientRelationship")
                        .HasForeignKey("SMED.Shared.Entity.PatientRelationship", "PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMED.Shared.Entity.Relationship", "Relationship")
                        .WithMany("PatientRelationships")
                        .HasForeignKey("RelationshipId");

                    b.Navigation("Patient");

                    b.Navigation("Relationship");
                });

            modelBuilder.Entity("SMED.Shared.Entity.Person", b =>
                {
                    b.HasOne("SMED.Shared.Entity.Gender", "Gender")
                        .WithMany("Persons")
                        .HasForeignKey("GenderId");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("SMED.Shared.Entity.PersonAddress", b =>
                {
                    b.HasOne("SMED.Shared.Entity.Person", "PersonNavigation")
                        .WithOne("PersonAddress")
                        .HasForeignKey("SMED.Shared.Entity.PersonAddress", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonNavigation");
                });

            modelBuilder.Entity("SMED.Shared.Entity.PersonBloodGroup", b =>
                {
                    b.HasOne("SMED.Shared.Entity.BloodGroup", "BloodGroupNavigation")
                        .WithMany("PersonBloodGroups")
                        .HasForeignKey("BloodGroupId");

                    b.HasOne("SMED.Shared.Entity.Person", "PersonNavigation")
                        .WithOne("PersonBloodGroup")
                        .HasForeignKey("SMED.Shared.Entity.PersonBloodGroup", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodGroupNavigation");

                    b.Navigation("PersonNavigation");
                });

            modelBuilder.Entity("SMED.Shared.Entity.PersonDocument", b =>
                {
                    b.HasOne("SMED.Shared.Entity.DocumentType", "DocumentTypeNavigation")
                        .WithMany("PersonDocuments")
                        .HasForeignKey("DocumentTypeId");

                    b.HasOne("SMED.Shared.Entity.Person", "PersonNavigation")
                        .WithOne("PersonDocument")
                        .HasForeignKey("SMED.Shared.Entity.PersonDocument", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentTypeNavigation");

                    b.Navigation("PersonNavigation");
                });

            modelBuilder.Entity("SMED.Shared.Entity.PersonEducation", b =>
                {
                    b.HasOne("SMED.Shared.Entity.EducationLevel", "EducationLevelNavigation")
                        .WithMany("PersonEducations")
                        .HasForeignKey("EducationLevelId");

                    b.HasOne("SMED.Shared.Entity.Person", "PersonNavigation")
                        .WithOne("PersonEducation")
                        .HasForeignKey("SMED.Shared.Entity.PersonEducation", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationLevelNavigation");

                    b.Navigation("PersonNavigation");
                });

            modelBuilder.Entity("SMED.Shared.Entity.PersonLaborActivity", b =>
                {
                    b.HasOne("SMED.Shared.Entity.LaborActivity", "LaborActivityNavigation")
                        .WithMany("PersonLaborActivities")
                        .HasForeignKey("LaborActivityId");

                    b.HasOne("SMED.Shared.Entity.Person", "PersonNavigation")
                        .WithMany("PersonLaborActivity")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LaborActivityNavigation");

                    b.Navigation("PersonNavigation");
                });

            modelBuilder.Entity("SMED.Shared.Entity.PersonLaterality", b =>
                {
                    b.HasOne("SMED.Shared.Entity.Laterality", "LateralityNavigation")
                        .WithMany("PersonLateralities")
                        .HasForeignKey("LateralityId");

                    b.HasOne("SMED.Shared.Entity.Person", "PersonNavigation")
                        .WithOne("PersonLaterality")
                        .HasForeignKey("SMED.Shared.Entity.PersonLaterality", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LateralityNavigation");

                    b.Navigation("PersonNavigation");
                });

            modelBuilder.Entity("SMED.Shared.Entity.PersonMaritalStatus", b =>
                {
                    b.HasOne("SMED.Shared.Entity.MaritalStatus", "MaritalStatusNavigation")
                        .WithMany("PersonMaritalStatuses")
                        .HasForeignKey("MaritalStatusId");

                    b.HasOne("SMED.Shared.Entity.Person", "PersonNavigation")
                        .WithOne("PersonMaritalStatus")
                        .HasForeignKey("SMED.Shared.Entity.PersonMaritalStatus", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaritalStatusNavigation");

                    b.Navigation("PersonNavigation");
                });

            modelBuilder.Entity("SMED.Shared.Entity.PersonMedicalInsurance", b =>
                {
                    b.HasOne("SMED.Shared.Entity.MedicalInsurance", "MedicalInsuranceNavigation")
                        .WithMany("PersonMedicalInsurances")
                        .HasForeignKey("MedicalInsuranceId");

                    b.HasOne("SMED.Shared.Entity.Person", "PersonNavigation")
                        .WithMany("PersonMedicalInsurances")
                        .HasForeignKey("PersonId");

                    b.Navigation("MedicalInsuranceNavigation");

                    b.Navigation("PersonNavigation");
                });

            modelBuilder.Entity("SMED.Shared.Entity.PersonPhone", b =>
                {
                    b.HasOne("SMED.Shared.Entity.Person", "PersonNavigation")
                        .WithOne("PersonPhone")
                        .HasForeignKey("SMED.Shared.Entity.PersonPhone", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonNavigation");
                });

            modelBuilder.Entity("SMED.Shared.Entity.PersonProfession", b =>
                {
                    b.HasOne("SMED.Shared.Entity.Person", "Person")
                        .WithMany("PersonProfessions")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMED.Shared.Entity.Profession", "ProfessionNavigation")
                        .WithMany("PersonProfessions")
                        .HasForeignKey("ProfessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("ProfessionNavigation");
                });

            modelBuilder.Entity("SMED.Shared.Entity.PersonReligion", b =>
                {
                    b.HasOne("SMED.Shared.Entity.Person", "PersonNavigation")
                        .WithOne("PersonReligion")
                        .HasForeignKey("SMED.Shared.Entity.PersonReligion", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMED.Shared.Entity.Religion", "ReligionNavigation")
                        .WithMany("PersonReligions")
                        .HasForeignKey("ReligionId");

                    b.Navigation("PersonNavigation");

                    b.Navigation("ReligionNavigation");
                });

            modelBuilder.Entity("SMED.Shared.Entity.PersonResidence", b =>
                {
                    b.HasOne("SMED.Shared.Entity.City", "CityNavigation")
                        .WithMany("PersonResidences")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SMED.Shared.Entity.Person", "PersonNavigation")
                        .WithOne("PersonResidence")
                        .HasForeignKey("SMED.Shared.Entity.PersonResidence", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CityNavigation");

                    b.Navigation("PersonNavigation");
                });

            modelBuilder.Entity("SMED.Shared.Entity.PersonalHistory", b =>
                {
                    b.HasOne("SMED.Shared.Entity.ClinicalHistory", "MedicalRecordNavigation")
                        .WithMany("PersonalHistories")
                        .HasForeignKey("ClinicalHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMED.Shared.Entity.Disease", "DiseaseNavigation")
                        .WithMany("PersonalHistories")
                        .HasForeignKey("DiseaseId");

                    b.Navigation("DiseaseNavigation");

                    b.Navigation("MedicalRecordNavigation");
                });

            modelBuilder.Entity("SMED.Shared.Entity.Progress", b =>
                {
                    b.HasOne("SMED.Shared.Entity.MedicalVisit", "MedicalVisitNavigation")
                        .WithMany("Progresses")
                        .HasForeignKey("MedicalVisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalVisitNavigation");
                });

            modelBuilder.Entity("SMED.Shared.Entity.SurgeryHistory", b =>
                {
                    b.HasOne("SMED.Shared.Entity.ClinicalHistory", "HistoryNavigation")
                        .WithMany("SurgeryHistories")
                        .HasForeignKey("ClinicalHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SurgeryHistory_ClinicalHistory");

                    b.HasOne("Infrastructure.Models.Surgery", "SurgeryNavigation")
                        .WithMany("SurgeryHistories")
                        .HasForeignKey("SurgeryId")
                        .HasConstraintName("FK_SurgeryHistory_Surgery");

                    b.Navigation("HistoryNavigation");

                    b.Navigation("SurgeryNavigation");
                });

            modelBuilder.Entity("SMED.Shared.Entity.ToxicHabitBackground", b =>
                {
                    b.HasOne("SMED.Shared.Entity.ClinicalHistory", "ClinicalHistory")
                        .WithMany("ToxicHabitBackgrounds")
                        .HasForeignKey("ClinicalHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ToxicHabitBackground_ClinicalHistory");

                    b.HasOne("SMED.Shared.Entity.ToxicHabit", "ToxicHabit")
                        .WithMany("ToxicHabitBackgrounds")
                        .HasForeignKey("ToxicHabitId")
                        .HasConstraintName("FK_ToxicHabitBackground_ToxicHabit");

                    b.Navigation("ClinicalHistory");

                    b.Navigation("ToxicHabit");
                });

            modelBuilder.Entity("SMED.Shared.Entity.User", b =>
                {
                    b.HasOne("SMED.Shared.Entity.Person", "PersonNavigation")
                        .WithOne("User")
                        .HasForeignKey("SMED.Shared.Entity.User", "PersonId");

                    b.Navigation("PersonNavigation");
                });

            modelBuilder.Entity("Infrastructure.Models.Allergy", b =>
                {
                    b.Navigation("AllergyHistories");
                });

            modelBuilder.Entity("Infrastructure.Models.Surgery", b =>
                {
                    b.Navigation("SurgeryHistories");
                });

            modelBuilder.Entity("SMED.Shared.Entity.BloodGroup", b =>
                {
                    b.Navigation("PersonBloodGroups");
                });

            modelBuilder.Entity("SMED.Shared.Entity.City", b =>
                {
                    b.Navigation("PersonResidences");
                });

            modelBuilder.Entity("SMED.Shared.Entity.ClinicalHistory", b =>
                {
                    b.Navigation("AllergyHistories");

                    b.Navigation("FamilyHistoryDetails");

                    b.Navigation("FoodIntoleranceHistories");

                    b.Navigation("GynecologicalHistories");

                    b.Navigation("ObstetricHistories");

                    b.Navigation("PersonalHistories");

                    b.Navigation("SurgeryHistories");

                    b.Navigation("ToxicHabitBackgrounds");
                });

            modelBuilder.Entity("SMED.Shared.Entity.Disease", b =>
                {
                    b.Navigation("FamilyHistoryDetails");

                    b.Navigation("GynecologicalHistories");

                    b.Navigation("ObstetricHistories");

                    b.Navigation("PersonalHistories");
                });

            modelBuilder.Entity("SMED.Shared.Entity.DiseaseType", b =>
                {
                    b.Navigation("Diseases");
                });

            modelBuilder.Entity("SMED.Shared.Entity.DocumentType", b =>
                {
                    b.Navigation("PersonDocuments");
                });

            modelBuilder.Entity("SMED.Shared.Entity.EducationLevel", b =>
                {
                    b.Navigation("PersonEducations");
                });

            modelBuilder.Entity("SMED.Shared.Entity.Food", b =>
                {
                    b.Navigation("FoodIntoleranceHistories");
                });

            modelBuilder.Entity("SMED.Shared.Entity.Gender", b =>
                {
                    b.Navigation("Persons");
                });

            modelBuilder.Entity("SMED.Shared.Entity.HealthProfessionalType", b =>
                {
                    b.Navigation("HealthProfessionals");
                });

            modelBuilder.Entity("SMED.Shared.Entity.LaborActivity", b =>
                {
                    b.Navigation("PersonLaborActivities");
                });

            modelBuilder.Entity("SMED.Shared.Entity.Laterality", b =>
                {
                    b.Navigation("PersonLateralities");
                });

            modelBuilder.Entity("SMED.Shared.Entity.MaritalStatus", b =>
                {
                    b.Navigation("PersonMaritalStatuses");
                });

            modelBuilder.Entity("SMED.Shared.Entity.MedicalInsurance", b =>
                {
                    b.Navigation("PersonMedicalInsurances");
                });

            modelBuilder.Entity("SMED.Shared.Entity.MedicalVisit", b =>
                {
                    b.Navigation("Progresses");
                });

            modelBuilder.Entity("SMED.Shared.Entity.Patient", b =>
                {
                    b.Navigation("ClinicalHistories");

                    b.Navigation("EmergencyContacts");

                    b.Navigation("MedicalVisits");

                    b.Navigation("PatientRelationship");
                });

            modelBuilder.Entity("SMED.Shared.Entity.Person", b =>
                {
                    b.Navigation("HealthProfessional");

                    b.Navigation("Patient");

                    b.Navigation("PersonAddress");

                    b.Navigation("PersonBloodGroup");

                    b.Navigation("PersonDocument");

                    b.Navigation("PersonEducation");

                    b.Navigation("PersonLaborActivity");

                    b.Navigation("PersonLaterality");

                    b.Navigation("PersonMaritalStatus");

                    b.Navigation("PersonMedicalInsurances");

                    b.Navigation("PersonPhone");

                    b.Navigation("PersonProfessions");

                    b.Navigation("PersonReligion");

                    b.Navigation("PersonResidence");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SMED.Shared.Entity.Profession", b =>
                {
                    b.Navigation("PersonProfessions");
                });

            modelBuilder.Entity("SMED.Shared.Entity.Province", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("SMED.Shared.Entity.Relationship", b =>
                {
                    b.Navigation("PatientRelationships");
                });

            modelBuilder.Entity("SMED.Shared.Entity.Religion", b =>
                {
                    b.Navigation("PersonReligions");
                });

            modelBuilder.Entity("SMED.Shared.Entity.ToxicHabit", b =>
                {
                    b.Navigation("ToxicHabitBackgrounds");
                });
#pragma warning restore 612, 618
        }
    }
}
