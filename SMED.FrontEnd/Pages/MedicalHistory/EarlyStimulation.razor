@page "/medical-history/earlystimulation"
@using SMED.FrontEnd.Components
@using SMED.FrontEnd.Services
@using SMED.Frontend.Services
@using SMED.Shared.DTOs

@inject PrenatalHistoryService PrenatalHistoryService
@inject PerinatalHistoryService PerinatalHistoryService
@inject PostnatalHistoryService PostnatalHistoryService
@inject NeuropsychologicalHistoryService NeuropsychologicalHistoryService
@inject NeurologicalExamTypeService NeurologicalExamTypeService
@inject NeurologicalExamService NeurologicalExamService
@inject DevelopmentRecordService DevelopmentRecordService
@inject ILogger<EarlyStimulation> Logger

<TabContainer>
    <h4>Historia Clínica - Estimulación Temprana</h4>

    <PatientSelector @bind-Value="clinicalHistoryId"
                     OnPatientSelected="HandlePatientSelected" />

    @if (clinicalHistoryId > 0)
    {
        <!-- SECCIÓN: ANTECEDENTES PRENATALES -->
        <div class="container-section mt-4">
            <h5 class="section-title">Antecedentes Prenatales</h5>

            <!-- Fila 0: Producto de Número de Gestas -->
            <div class="mb-3">
                <ContainerBox1 Title="Producto de Número de Gestas"
                               Width="full"
                               @bind-Content="prenatalDeedsContent"
                               @bind-Content:after="OnPrenatalDataChanged" />
            </div>

            <!-- Fila 1: Checks para booleanos -->
            <div class="d-flex flex-wrap mb-3">
                <Check Title="Embarazo Planificado"
                       @bind-Value="prenatalHistory.PlannedPregnancy"
                       @bind-Value:after="OnPrenatalDataChanged" />

                <Check Title="Exposición a la Radiación"
                       @bind-Value="prenatalHistory.RadiationExposure"
                       @bind-Value:after="OnPrenatalDataChanged" />

                <Check Title="Sufrimiento Fetal"
                       @bind-Value="prenatalHistory.FetalSuffering"
                       @bind-Value:after="OnPrenatalDataChanged" />
            </div>

            <!-- Fila 2: Medicamentos o Vitaminas -->
            <div class="mb-3">
                <ContainerBox1 Title="Medicamentos o Vitaminas"
                               Width="full"
                               @bind-Content="prenatalMedicationsContent"
                               @bind-Content:after="OnPrenatalDataChanged" />
            </div>

            <!-- Fila 3: Número de Controles y Ecografías -->
            <div class="row mb-3">
                <div class="col-md-6">
                    <ContainerBox1 Title="Número de Controles"
                                   Width="half"
                                   @bind-Content="prenatalControlsContent"
                                   @bind-Content:after="OnPrenatalDataChanged" />
                </div>
                <div class="col-md-6">
                    <ContainerBox1 Title="Número de Ecografías"
                                   Width="half"
                                   @bind-Content="prenatalUltrasoundsContent"
                                   @bind-Content:after="OnPrenatalDataChanged" />
                </div>
            </div>

            <!-- Fila 4: Complicaciones durante el Embarazo -->
            <div class="mb-3">
                <ContainerBox1 Title="Complicaciones durante el Embarazo"
                               Width="full"
                               @bind-Content="prenatalComplicationsContent"
                               @bind-Content:after="OnPrenatalDataChanged" />
            </div>
        </div>

        <!-- SECCIÓN: ANTECEDENTES PERINATALES -->
        <div class="container-section mt-4">
            <h5 class="section-title">Antecedentes Perinatales</h5>

            <!-- Fila 1: Tipo de Parto y Número de Semanas -->
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="form-label">Tipo de Parto</label>
                        <select class="form-select" @bind="perinatalTypeOfBirth" @bind:after="OnPerinatalDataChanged">
                            <option value="">Seleccione tipo de parto</option>
                            <option value="Parto normal">Parto normal</option>
                            <option value="Cesárea">Cesárea</option>
                        </select>
                    </div>
                </div>
                <div class="col-md-6">
                    <ContainerBox1 Title="Número de Semanas"
                                   Width="half"
                                   @bind-Content="perinatalWeeksContent"
                                   @bind-Content:after="OnPerinatalDataChanged" />
                </div>
            </div>

            <!-- Fila 2: Apgar y Tamiz Auditivo -->
            <div class="row mb-3">
                <div class="col-md-6">
                    <ContainerBox1 Title="Apgar"
                                   Width="half"
                                   @bind-Content="perinatalApgarContent"
                                   @bind-Content:after="OnPerinatalDataChanged" />
                </div>
                <div class="col-md-6">
                    <ContainerBox1 Title="Tamiz Auditivo"
                                   Width="half"
                                   @bind-Content="perinatalAuditoryContent"
                                   @bind-Content:after="OnPerinatalDataChanged" />
                </div>
            </div>

            <!-- Fila 3: Maniobras de Reanimación y Lugar de Atención -->
            <div class="row mb-3">
                <div class="col-md-6">
                    <ContainerBox1 Title="Maniobras de Reanimación Especiales"
                                   Width="half"
                                   @bind-Content="perinatalResuscitationContent"
                                   @bind-Content:after="OnPerinatalDataChanged" />
                </div>
                <div class="col-md-6">
                    <ContainerBox1 Title="Lugar de Atención"
                                   Width="half"
                                   @bind-Content="perinatalPlaceOfCareContent"
                                   @bind-Content:after="OnPerinatalDataChanged" />
                </div>
            </div>

            <!-- Fila 4: Lloró al nacer y Tamiz Metabólico -->
            <div class="row mb-3">
                <div class="col-md-6">
                    <Check Title="Lloró al nacer"
                           @bind-Value="perinatalHistory.BirthCry"
                           @bind-Value:after="OnPerinatalDataChanged" />
                </div>
                <div class="col-md-6">
                    <ContainerBox1 Title="Tamiz Metabólico"
                                   Width="half"
                                   @bind-Content="perinatalMetabolicContent"
                                   @bind-Content:after="OnPerinatalDataChanged" />
                </div>
            </div>

            <!-- Fila 5: Complicaciones durante el Parto/Cesárea -->
            <div class="mb-3">
                <ContainerBox1 Title="Complicaciones durante el Parto/Cesárea"
                               Width="full"
                               @bind-Content="perinatalComplicationsContent"
                               @bind-Content:after="OnPerinatalDataChanged" />
            </div>
        </div>

        <!-- SECCIÓN: ANTECEDENTES POSTNATALES -->
        <div class="container-section mt-4">
            <h5 class="section-title">Antecedentes Postnatales</h5>

            <!-- Descripción -->
            <div class="mb-3">
                <ContainerBox1 Title="Descripción"
                               Width="full"
                               @bind-Content="postnatalDescriptionContent"
                               @bind-Content:after="OnPostnatalDataChanged" />
            </div>

            <!-- Inmunizaciones -->
            <div class="mb-3">
                <h6 class="subsection-title">Inmunizaciones</h6>
                <div class="row">
                    <!-- Fila 1 -->
                    <div class="col-md-4">
                        <Check Title="BCG"
                               @bind-Value="postnatalHistory.Bcg"
                               @bind-Value:after="OnPostnatalDataChanged" />
                    </div>
                    <div class="col-md-4">
                        <Check Title="Rotavirus"
                               @bind-Value="postnatalHistory.Rotavirus"
                               @bind-Value:after="OnPostnatalDataChanged" />
                    </div>
                    <div class="col-md-4">
                        <Check Title="Pentavalente"
                               @bind-Value="postnatalHistory.Pentavalente"
                               @bind-Value:after="OnPostnatalDataChanged" />
                    </div>
                </div>
                <div class="row">
                    <!-- Fila 2 -->
                    <div class="col-md-4">
                        <Check Title="Influenza"
                               @bind-Value="postnatalHistory.Influenza"
                               @bind-Value:after="OnPostnatalDataChanged" />
                    </div>
                    <div class="col-md-4">
                        <Check Title="Varicela"
                               @bind-Value="postnatalHistory.Varicela"
                               @bind-Value:after="OnPostnatalDataChanged" />
                    </div>
                    <div class="col-md-4">
                        <Check Title="Hepatitis B"
                               @bind-Value="postnatalHistory.HepatitisB"
                               @bind-Value:after="OnPostnatalDataChanged" />
                    </div>
                </div>
                <div class="row">
                    <!-- Fila 3 -->
                    <div class="col-md-4">
                        <Check Title="Triple Viral"
                               @bind-Value="postnatalHistory.TripleViral"
                               @bind-Value:after="OnPostnatalDataChanged" />
                    </div>
                    <div class="col-md-4">
                        <Check Title="Polio Virus"
                               @bind-Value="postnatalHistory.PolioVirus"
                               @bind-Value:after="OnPostnatalDataChanged" />
                    </div>
                    <div class="col-md-4">
                        <Check Title="Neumococo"
                               @bind-Value="postnatalHistory.Neumococo"
                               @bind-Value:after="OnPostnatalDataChanged" />
                    </div>
                </div>
            </div>

            <!-- Observaciones -->
            <div class="mb-3">
                <ContainerBox1 Title="Observaciones"
                               Width="full"
                               @bind-Content="postnatalObservationsContent"
                               @bind-Content:after="OnPostnatalDataChanged" />
            </div>
        </div>

        <!-- SECCIÓN: ANTECEDENTES NEUROPSICOLÓGICOS -->
        <div class="container-section mt-4">
            <h5 class="section-title">Antecedentes Neuropsicológicos</h5>

            <!-- Fila 1: Conducta en Casa y Conducta en la Escuela -->
            <div class="row mb-3">
                <div class="col-md-6">
                    <ContainerBox1 Title="Conducta en Casa"
                                   Width="half"
                                   @bind-Content="neuropsychologicalHomeConductContent"
                                   @bind-Content:after="OnNeuropsychologicalDataChanged" />
                </div>
                <div class="col-md-6">
                    <ContainerBox1 Title="Conducta en la Escuela"
                                   Width="half"
                                   @bind-Content="neuropsychologicalSchoolConductContent"
                                   @bind-Content:after="OnNeuropsychologicalDataChanged" />
                </div>
            </div>

            <!-- Fila 2: Aprovechamiento y Observación Sueño -->
            <div class="row mb-3">
                <div class="col-md-6">
                    <ContainerBox1 Title="Aprovechamiento"
                                   Width="half"
                                   @bind-Content="neuropsychologicalLeverageContent"
                                   @bind-Content:after="OnNeuropsychologicalDataChanged" />
                </div>
                <div class="col-md-6">
                    <ContainerBox1 Title="Observación Sueño"
                                   Width="half"
                                   @bind-Content="neuropsychologicalDreamObservationContent"
                                   @bind-Content:after="OnNeuropsychologicalDataChanged" />
                </div>
            </div>

            <!-- Fila 3: Observación Vista y Observación Habla -->
            <div class="row mb-3">
                <div class="col-md-6">
                    <ContainerBox1 Title="Observación Vista"
                                   Width="half"
                                   @bind-Content="neuropsychologicalSightObservationContent"
                                   @bind-Content:after="OnNeuropsychologicalDataChanged" />
                </div>
                <div class="col-md-6">
                    <ContainerBox1 Title="Observación Habla"
                                   Width="half"
                                   @bind-Content="neuropsychologicalSpeechObservationContent"
                                   @bind-Content:after="OnNeuropsychologicalDataChanged" />
                </div>
            </div>

            <!-- Fila 4: Observación Escucha y Desmayos -->
            <div class="row mb-3">
                <div class="col-md-6">
                    <ContainerBox1 Title="Observación Escucha"
                                   Width="half"
                                   @bind-Content="neuropsychologicalHearingObservationContent"
                                   @bind-Content:after="OnNeuropsychologicalDataChanged" />
                </div>
                <div class="col-md-6">
                    <Check Title="Desmayos"
                           @bind-Value="neuropsychologicalHistory.Faintings"
                           @bind-Value:after="OnNeuropsychologicalDataChanged" />
                </div>
            </div>

            <!-- Fila 5: Observaciones de Capacidades Diferentes -->
            <div class="mb-3">
                <ContainerBox1 Title="Observaciones de Capacidades Diferentes"
                               Width="full"
                               @bind-Content="neuropsychologicalDifferentAbilityContent"
                               @bind-Content:after="OnNeuropsychologicalDataChanged" />
            </div>

            <!-- Fila 6: Observaciones Generales -->
            <div class="mb-3">
                <ContainerBox1 Title="Observaciones"
                               Width="full"
                               @bind-Content="neuropsychologicalObservationContent"
                               @bind-Content:after="OnNeuropsychologicalDataChanged" />
            </div>
        </div>

        <!-- SECCIÓN: HITOS DE DESARROLLO -->
        <div class="container-section mt-4">
            <h5 class="section-title">Hitos de Desarrollo</h5>
            <div class="editable-table-wrapper">
                <EditableTable Title="Registro de Desarrollo"
                               ColumnHeaders="@headersDevelopmentRecords"
                               Rows="@developmentRecordData.Select(d => d.Values).ToList()"
                               RowIds="@developmentRecordData.Select(d => d.Id).ToList()"
                               OnAddRequested="PrepareForAddDevelopmentRecord"
                               OnEditRequested="PrepareForEditDevelopmentRecord"
                               OnDeleteRequested="HandleDevelopmentRecordRowDeleted"
                               OnSaveRequested="SaveDevelopmentRecordChanges"
                               IsValidForm="() => !string.IsNullOrWhiteSpace(developmentMilestone) && !string.IsNullOrWhiteSpace(developmentAgeRange)"
                               EmptyMessage="@GetDevelopmentRecordsEmptyMessage()">
                    <EditModalContent>
                        <div class="form-group mb-3">
                            <label>ID del Registro</label>
                            <input class="form-control" value="@GetCurrentEditingDevelopmentRecordId()" disabled />
                        </div>

                        <div class="form-group mb-3">
                            <label>Hito de Desarrollo</label>
                            <textarea class="form-control" @bind="developmentMilestone" rows="3"
                                      placeholder="Ingrese el hito de desarrollo"
                                      style="resize: vertical; max-height: 150px;"></textarea>
                            @if (string.IsNullOrWhiteSpace(developmentMilestone))
                            {
                                <div class="text-muted mt-1">El hito de desarrollo es obligatorio</div>
                            }
                        </div>

                        <div class="form-group mb-3">
                            <label>Rango de Edad</label>
                            <textarea class="form-control" @bind="developmentAgeRange" rows="2"
                                      placeholder="Ingrese el rango de edad"
                                      style="resize: vertical; max-height: 100px;"></textarea>
                            @if (string.IsNullOrWhiteSpace(developmentAgeRange))
                            {
                                <div class="text-muted mt-1">El rango de edad es obligatorio</div>
                            }
                        </div>

                        <div class="form-group mb-3">
                            <label>Observaciones</label>
                            <textarea class="form-control" @bind="developmentObservations" rows="4"
                                      placeholder="Ingrese las observaciones"
                                      style="resize: vertical; max-height: 200px;"></textarea>
                        </div>
                    </EditModalContent>
                </EditableTable>
            </div>
        </div>

        <!-- SECCIÓN: EXÁMENES NEUROLÓGICOS -->
        <div class="container-section mt-4">
            <h5 class="section-title">Exámenes Neurológicos</h5>
            <div class="editable-table-wrapper">
                <EditableTable Title="Exámenes Neurológicos"
                               ColumnHeaders="@headersNeurologicalExams"
                               Rows="@neurologicalExamData.Select(d => d.Values).ToList()"
                               RowIds="@neurologicalExamData.Select(d => d.Id).ToList()"
                               OnAddRequested="PrepareForAddNeurologicalExam"
                               OnEditRequested="PrepareForEditNeurologicalExam"
                               OnDeleteRequested="HandleNeurologicalExamRowDeleted"
                               OnSaveRequested="SaveNeurologicalExamChanges"
                               IsValidForm="() => !string.IsNullOrWhiteSpace(selectedExamType) && !string.IsNullOrWhiteSpace(selectedExamName)"
                               EmptyMessage="@GetNeurologicalExamsEmptyMessage()">
                    <EditModalContent>
                        <div class="form-group mb-3">
                            <label>ID del Registro</label>
                            <input class="form-control" value="@GetCurrentEditingNeurologicalExamId()" disabled />
                        </div>

                        <div class="form-group mb-3">
                            <label>Tipo de Examen</label>
                            <select class="form-select" @bind="selectedExamType">
                                <option value="">Seleccione un tipo de examen</option>
                                @foreach (var examType in availableExamTypes)
                                {
                                    <option value="@examType">@examType</option>
                                }
                            </select>
                            @if (isLoadingExamTypes)
                            {
                                <div class="text-muted mt-1">Cargando tipos de examen...</div>
                            }
                        </div>

                        <div class="form-group mb-3">
                            <label>Examen</label>
                            <select class="form-select" @bind="selectedExamName">
                                <option value="">Seleccione un examen</option>
                                @foreach (var exam in filteredExams)
                                {
                                    <option value="@exam">@exam</option>
                                }
                            </select>
                            @if (string.IsNullOrEmpty(selectedExamType))
                            {
                                <div class="text-muted mt-1">Primero seleccione un tipo de examen</div>
                            }
                        </div>

                        <div class="form-group mb-3">
                            <label>Fecha del Examen</label>
                            <input type="date" class="form-control" @bind="neurologicalExamDate" />
                        </div>

                        <div class="form-group mb-3">
                            <label>Descripción</label>
                            <textarea class="form-control" @bind="neurologicalExamDescription" rows="4"
                                      placeholder="Ingrese la descripción del examen"
                                      style="resize: vertical; max-height: 200px;"></textarea>
                        </div>

                        <div class="form-group mb-3">
                            <label>Enlace PDF (Opcional)</label>
                            <input type="text" class="form-control" @bind="neurologicalExamLinkPdf"
                                   placeholder="Ingrese el enlace al PDF del examen" />
                        </div>
                    </EditModalContent>
                </EditableTable>
            </div>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-3">
                @errorMessage
                <button type="button" class="btn-close float-end" @onclick="ClearErrorMessage"></button>
            </div>
        }
    }
    else
    {
        <p class="text-muted">Seleccione un paciente con historia clínica para mostrar los datos de estimulación temprana.</p>
    }
</TabContainer>

@code {
    private int clinicalHistoryId = 0;
    private string medicalRecordNumber = string.Empty;
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    // ==========================================
    // SECCIÓN: ANTECEDENTES PRENATALES
    // ==========================================
    private PrenatalHistoryDTO prenatalHistory = new() { HistoryNumber = string.Empty };
    private string prenatalDeedsContent = ""; // NUEVO CAMPO
    private string prenatalMedicationsContent = "";
    private string prenatalControlsContent = "";
    private string prenatalUltrasoundsContent = "";
    private string prenatalComplicationsContent = "";

    // ==========================================
    // SECCIÓN: ANTECEDENTES PERINATALES
    // ==========================================
    private PerinatalHistoryDTO perinatalHistory = new() { HistoryNumber = string.Empty };
    private string perinatalTypeOfBirth = "";
    private string perinatalWeeksContent = "";
    private string perinatalApgarContent = "";
    private string perinatalAuditoryContent = "";
    private string perinatalResuscitationContent = "";
    private string perinatalPlaceOfCareContent = "";
    private string perinatalMetabolicContent = "";
    private string perinatalComplicationsContent = "";

    // ==========================================
    // SECCIÓN: ANTECEDENTES POSTNATALES
    // ==========================================
    private PostnatalHistoryDTO postnatalHistory = new() { HistoryNumber = string.Empty };
    private string postnatalDescriptionContent = "";
    private string postnatalObservationsContent = "";

    // ==========================================
    // SECCIÓN: ANTECEDENTES NEUROPSICOLÓGICOS
    // ==========================================
    private NeuropsychologicalHistoryDTO neuropsychologicalHistory = new() { HistoryNumber = string.Empty };
    private string neuropsychologicalHomeConductContent = "";
    private string neuropsychologicalSchoolConductContent = "";
    private string neuropsychologicalLeverageContent = "";
    private string neuropsychologicalDreamObservationContent = "";
    private string neuropsychologicalSightObservationContent = "";
    private string neuropsychologicalSpeechObservationContent = "";
    private string neuropsychologicalHearingObservationContent = "";
    private string neuropsychologicalDifferentAbilityContent = "";
    private string neuropsychologicalObservationContent = "";

    // ==========================================
    // SECCIÓN: EXÁMENES NEUROLÓGICOS
    // ==========================================
    private readonly List<string> headersNeurologicalExams = new() { "Tipo de Examen", "Examen", "Fecha", "Descripción" };
    private List<NeurologicalExamRow> neurologicalExamData = new();
    private List<NeurologicalExamDTO> currentNeurologicalExams = new();
    private List<NeurologicalExamTypeDTO> examTypes = new();
    private List<NeurologicalExamDTO> allExams = new();
    private List<string> availableExamTypes = new();
    private List<string> filteredExams = new();

    private string _selectedExamType = "";
    private string selectedExamName = "";
    private string neurologicalExamDescription = "";
    private DateTime neurologicalExamDate = DateTime.Now;
    private string neurologicalExamLinkPdf = "";
    private int editingNeurologicalExamId = -1;
    private bool isLoadingNeurologicalExams = false;
    private bool isLoadingExamTypes = false;

    private string selectedExamType
    {
        get => _selectedExamType;
        set
        {
            if (_selectedExamType != value)
            {
                _selectedExamType = value;
                Task.Run(async () => await HandleExamTypeChangedAsync());
            }
        }
    }

    private class NeurologicalExamRow
    {
        public int Id { get; set; }
        public List<string> Values { get; set; } = new();
    }

    // ==========================================
    // SECCIÓN: REGISTRO DE DESARROLLO
    // ==========================================
    private readonly List<string> headersDevelopmentRecords = new() { "Hito de Desarrollo", "Rango de Edad", "Observaciones" };
    private List<DevelopmentRecordRow> developmentRecordData = new();
    private List<DevelopmentRecordDTO> currentDevelopmentRecords = new();

    private string developmentMilestone = "";
    private string developmentAgeRange = "";
    private string developmentObservations = "";
    private int editingDevelopmentRecordId = -1;
    private bool isLoadingDevelopmentRecords = false;

    private class DevelopmentRecordRow
    {
        public int Id { get; set; }
        public List<string> Values { get; set; } = new();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            await LoadExamTypes();
            allExams = await NeurologicalExamService.GetAllAsync() ?? new();
            await LoadNeurologicalExams();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar datos iniciales");
            errorMessage = "Error al cargar los datos iniciales.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadExamTypes()
    {
        isLoadingExamTypes = true;
        try
        {
            examTypes = await NeurologicalExamTypeService.GetAllAsync() ?? new();
            availableExamTypes = examTypes.Select(et => et.Name).Where(name => !string.IsNullOrEmpty(name)).ToList();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar tipos de examen");
            errorMessage = "Error al cargar los tipos de examen.";
        }
        finally
        {
            isLoadingExamTypes = false;
        }
    }

    private async Task HandlePatientSelected((int ClinicalHistoryId, string MedicalRecordNumber, int PersonId) patient)
    {
        clinicalHistoryId = patient.ClinicalHistoryId;
        medicalRecordNumber = patient.MedicalRecordNumber;

        await LoadNeurologicalExams();

        if (clinicalHistoryId > 0)
        {
            await LoadPrenatalHistory();
            await LoadPerinatalHistory();
            await LoadPostnatalHistory();
            await LoadNeuropsychologicalHistory();
            await LoadDevelopmentRecords();
        }
    }

    // ==========================================
    // MÉTODOS: CARGA DE DATOS
    // ==========================================
    private async Task LoadPrenatalHistory()
    {
        try
        {
            var result = await PrenatalHistoryService.GetByClinicalHistoryIdAsync(clinicalHistoryId);
            prenatalHistory = result?.FirstOrDefault() ?? new PrenatalHistoryDTO { HistoryNumber = medicalRecordNumber };

            // NUEVO CAMPO
            prenatalDeedsContent = prenatalHistory.NumberOfDeeds?.ToString() ?? "";
            prenatalMedicationsContent = prenatalHistory.MedicationsOrVitamins ?? "";
            prenatalControlsContent = prenatalHistory.NumberOfControls?.ToString() ?? "";
            prenatalUltrasoundsContent = prenatalHistory.NumberOfUltrasounds?.ToString() ?? "";
            prenatalComplicationsContent = prenatalHistory.ComplicationsDuringPregnancy ?? "";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar antecedentes prenatales");
        }
    }

    private async Task LoadPerinatalHistory()
    {
        try
        {
            var result = await PerinatalHistoryService.GetByClinicalHistoryIdAsync(clinicalHistoryId);
            perinatalHistory = result?.FirstOrDefault() ?? new PerinatalHistoryDTO { HistoryNumber = medicalRecordNumber };

            perinatalTypeOfBirth = perinatalHistory.TypeOfBirth ?? "";
            perinatalWeeksContent = perinatalHistory.NumberOfWeeks?.ToString() ?? "";
            perinatalApgarContent = perinatalHistory.Apgar ?? "";
            perinatalAuditoryContent = perinatalHistory.AuditoryScreen ?? "";
            perinatalResuscitationContent = perinatalHistory.ResuscitationManeuvers ?? "";
            perinatalPlaceOfCareContent = perinatalHistory.PlaceOfCare ?? "";
            perinatalMetabolicContent = perinatalHistory.MetabolicScreen ?? "";
            perinatalComplicationsContent = perinatalHistory.ComplicationsDuringChildbirth ?? "";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar antecedentes perinatales");
        }
    }

    private async Task LoadPostnatalHistory()
    {
        try
        {
            var result = await PostnatalHistoryService.GetByClinicalHistoryIdAsync(clinicalHistoryId);
            postnatalHistory = result?.FirstOrDefault() ?? new PostnatalHistoryDTO { HistoryNumber = medicalRecordNumber };

            postnatalDescriptionContent = postnatalHistory.Description ?? "";
            postnatalObservationsContent = postnatalHistory.Observations ?? "";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar antecedentes postnatales");
        }
    }

    private async Task LoadNeuropsychologicalHistory()
    {
        try
        {
            var result = await NeuropsychologicalHistoryService.GetByClinicalHistoryIdAsync(clinicalHistoryId);
            neuropsychologicalHistory = result?.FirstOrDefault() ?? new NeuropsychologicalHistoryDTO { HistoryNumber = medicalRecordNumber };

            neuropsychologicalHomeConductContent = neuropsychologicalHistory.HomeConduct ?? "";
            neuropsychologicalSchoolConductContent = neuropsychologicalHistory.SchoolConduct ?? "";
            neuropsychologicalLeverageContent = neuropsychologicalHistory.Leverage ?? "";
            neuropsychologicalDreamObservationContent = neuropsychologicalHistory.DreamObservation ?? "";
            neuropsychologicalSightObservationContent = neuropsychologicalHistory.SightObservation ?? "";
            neuropsychologicalSpeechObservationContent = neuropsychologicalHistory.SpeechObservation ?? "";
            neuropsychologicalHearingObservationContent = neuropsychologicalHistory.HearingObservation ?? "";
            neuropsychologicalDifferentAbilityContent = neuropsychologicalHistory.ObservationDifferentAbility ?? "";
            neuropsychologicalObservationContent = neuropsychologicalHistory.Observation ?? "";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar antecedentes neuropsicológicos");
        }
    }

    // ==========================================
    // MÉTODOS: GUARDADO AUTOMÁTICO
    // ==========================================
    private async Task OnPrenatalDataChanged()
    {
        if (clinicalHistoryId > 0)
        {
            await SavePrenatalHistoryAsync();
        }
    }

    private async Task OnPerinatalDataChanged()
    {
        if (clinicalHistoryId > 0)
        {
            await SavePerinatalHistoryAsync();
        }
    }

    private async Task OnPostnatalDataChanged()
    {
        if (clinicalHistoryId > 0)
        {
            await SavePostnatalHistoryAsync();
        }
    }

    private async Task OnNeuropsychologicalDataChanged()
    {
        if (clinicalHistoryId > 0)
        {
            await SaveNeuropsychologicalHistoryAsync();
        }
    }

    private async Task SavePrenatalHistoryAsync()
    {
        try
        {
            prenatalHistory.ClinicalHistoryId = clinicalHistoryId;
            prenatalHistory.HistoryNumber = medicalRecordNumber;

            // NUEVO CAMPO
            if (int.TryParse(prenatalDeedsContent, out var deeds))
                prenatalHistory.NumberOfDeeds = deeds;
            else
                prenatalHistory.NumberOfDeeds = null;

            prenatalHistory.MedicationsOrVitamins = string.IsNullOrWhiteSpace(prenatalMedicationsContent) ? null : prenatalMedicationsContent.Trim();

            if (int.TryParse(prenatalControlsContent, out var controls))
                prenatalHistory.NumberOfControls = controls;
            else
                prenatalHistory.NumberOfControls = null;

            if (int.TryParse(prenatalUltrasoundsContent, out var ultrasounds))
                prenatalHistory.NumberOfUltrasounds = ultrasounds;
            else
                prenatalHistory.NumberOfUltrasounds = null;

            prenatalHistory.ComplicationsDuringPregnancy = string.IsNullOrWhiteSpace(prenatalComplicationsContent) ? null : prenatalComplicationsContent.Trim();

            if (prenatalHistory.PrenatalHistoryId == 0)
            {
                var created = await PrenatalHistoryService.CreateAsync(prenatalHistory);
                if (created != null)
                {
                    prenatalHistory = created;
                }
            }
            else
            {
                await PrenatalHistoryService.UpdateAsync(prenatalHistory);
            }

            errorMessage = string.Empty;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error técnico al guardar antecedentes prenatales");
        }
    }

    private async Task SavePerinatalHistoryAsync()
    {
        try
        {
            perinatalHistory.ClinicalHistoryId = clinicalHistoryId;
            perinatalHistory.HistoryNumber = medicalRecordNumber;
            perinatalHistory.TypeOfBirth = string.IsNullOrWhiteSpace(perinatalTypeOfBirth) ? null : perinatalTypeOfBirth.Trim();

            if (decimal.TryParse(perinatalWeeksContent, out var weeks))
                perinatalHistory.NumberOfWeeks = weeks;
            else
                perinatalHistory.NumberOfWeeks = null;

            perinatalHistory.Apgar = string.IsNullOrWhiteSpace(perinatalApgarContent) ? null : perinatalApgarContent.Trim();
            perinatalHistory.AuditoryScreen = string.IsNullOrWhiteSpace(perinatalAuditoryContent) ? null : perinatalAuditoryContent.Trim();
            perinatalHistory.ResuscitationManeuvers = string.IsNullOrWhiteSpace(perinatalResuscitationContent) ? null : perinatalResuscitationContent.Trim();
            perinatalHistory.PlaceOfCare = string.IsNullOrWhiteSpace(perinatalPlaceOfCareContent) ? null : perinatalPlaceOfCareContent.Trim();
            perinatalHistory.MetabolicScreen = string.IsNullOrWhiteSpace(perinatalMetabolicContent) ? null : perinatalMetabolicContent.Trim();
            perinatalHistory.ComplicationsDuringChildbirth = string.IsNullOrWhiteSpace(perinatalComplicationsContent) ? null : perinatalComplicationsContent.Trim();

            if (perinatalHistory.PerinatalHistoryId == 0)
            {
                var created = await PerinatalHistoryService.CreateAsync(perinatalHistory);
                if (created != null)
                {
                    perinatalHistory = created;
                }
            }
            else
            {
                await PerinatalHistoryService.UpdateAsync(perinatalHistory);
            }

            errorMessage = string.Empty;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error técnico al guardar antecedentes perinatales");
        }
    }

    private async Task SavePostnatalHistoryAsync()
    {
        try
        {
            postnatalHistory.ClinicalHistoryId = clinicalHistoryId;
            postnatalHistory.HistoryNumber = medicalRecordNumber;
            postnatalHistory.Description = string.IsNullOrWhiteSpace(postnatalDescriptionContent) ? null : postnatalDescriptionContent.Trim();
            postnatalHistory.Observations = string.IsNullOrWhiteSpace(postnatalObservationsContent) ? null : postnatalObservationsContent.Trim();

            if (postnatalHistory.PostNatalId == 0)
            {
                var created = await PostnatalHistoryService.CreateAsync(postnatalHistory);
                if (created != null)
                {
                    postnatalHistory = created;
                }
            }
            else
            {
                await PostnatalHistoryService.UpdateAsync(postnatalHistory);
            }

            errorMessage = string.Empty;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error técnico al guardar antecedentes postnatales");
        }
    }

    private async Task SaveNeuropsychologicalHistoryAsync()
    {
        try
        {
            neuropsychologicalHistory.ClinicalHistoryId = clinicalHistoryId;
            neuropsychologicalHistory.HistoryNumber = medicalRecordNumber;
            neuropsychologicalHistory.HomeConduct = string.IsNullOrWhiteSpace(neuropsychologicalHomeConductContent) ? null : neuropsychologicalHomeConductContent.Trim();
            neuropsychologicalHistory.SchoolConduct = string.IsNullOrWhiteSpace(neuropsychologicalSchoolConductContent) ? null : neuropsychologicalSchoolConductContent.Trim();
            neuropsychologicalHistory.Leverage = string.IsNullOrWhiteSpace(neuropsychologicalLeverageContent) ? null : neuropsychologicalLeverageContent.Trim();
            neuropsychologicalHistory.DreamObservation = string.IsNullOrWhiteSpace(neuropsychologicalDreamObservationContent) ? null : neuropsychologicalDreamObservationContent.Trim();
            neuropsychologicalHistory.SightObservation = string.IsNullOrWhiteSpace(neuropsychologicalSightObservationContent) ? null : neuropsychologicalSightObservationContent.Trim();
            neuropsychologicalHistory.SpeechObservation = string.IsNullOrWhiteSpace(neuropsychologicalSpeechObservationContent) ? null : neuropsychologicalSpeechObservationContent.Trim();
            neuropsychologicalHistory.HearingObservation = string.IsNullOrWhiteSpace(neuropsychologicalHearingObservationContent) ? null : neuropsychologicalHearingObservationContent.Trim();
            neuropsychologicalHistory.ObservationDifferentAbility = string.IsNullOrWhiteSpace(neuropsychologicalDifferentAbilityContent) ? null : neuropsychologicalDifferentAbilityContent.Trim();
            neuropsychologicalHistory.Observation = string.IsNullOrWhiteSpace(neuropsychologicalObservationContent) ? null : neuropsychologicalObservationContent.Trim();

            if (neuropsychologicalHistory.NeuropsychologicalHistoryId == 0)
            {
                var created = await NeuropsychologicalHistoryService.CreateAsync(neuropsychologicalHistory);
                if (created != null)
                {
                    neuropsychologicalHistory = created;
                }
            }
            else
            {
                await NeuropsychologicalHistoryService.UpdateAsync(neuropsychologicalHistory);
            }

            errorMessage = string.Empty;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error técnico al guardar antecedentes neuropsicológicos");
        }
    }

    // ==========================================
    // MÉTODOS: EXÁMENES NEUROLÓGICOS (EXISTENTES)
    // ==========================================
    private async Task LoadNeurologicalExams()
    {
        errorMessage = string.Empty;
        isLoadingNeurologicalExams = true;

        try
        {
            List<NeurologicalExamDTO> result;
            if (clinicalHistoryId > 0)
            {
                result = await NeurologicalExamService.GetByClinicalHistoryIdAsync(clinicalHistoryId);
            }
            else
            {
                result = await NeurologicalExamService.GetAllAsync() ?? new();
            }

            currentNeurologicalExams = result ?? new();
            neurologicalExamData = new();

            foreach (var exam in currentNeurologicalExams)
            {
                neurologicalExamData.Add(new NeurologicalExamRow
                {
                    Id = exam.NeurologicalExamId,
                    Values = new()
                    {
                        GetExamTypeName(exam.NeurologicalExamTypeId),
                        exam.Name ?? "Sin nombre",
                        exam.ExamDate?.ToShortDateString() ?? "Sin fecha",
                        exam.Description ?? "Sin observaciones"
                    }
                });
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar exámenes neurológicos");
            errorMessage = "Error al cargar los exámenes neurológicos.";
        }
        finally
        {
            isLoadingNeurologicalExams = false;
        }
    }

    private string GetExamTypeName(int? examTypeId)
    {
        if (examTypeId == null || examTypeId == 0) return "Sin especificar";
        return examTypes.FirstOrDefault(et => et.NeurologicalExamTypeId == examTypeId)?.Name ?? "Desconocido";
    }

    private async Task HandleExamTypeChangedAsync()
    {
        if (string.IsNullOrEmpty(_selectedExamType))
        {
            filteredExams = new();
            selectedExamName = "";
            return;
        }

        var examType = examTypes.FirstOrDefault(et => et.Name == _selectedExamType);
        if (examType != null)
        {
            filteredExams = allExams
                .Where(e => e.NeurologicalExamTypeId == examType.NeurologicalExamTypeId)
                .Select(e => e.Name ?? "Sin nombre")
                .Where(name => !string.IsNullOrEmpty(name))
                .ToList();
        }
        else
        {
            filteredExams = new();
        }

        selectedExamName = "";
        StateHasChanged();
    }

    private void PrepareForEditNeurologicalExam(int id)
    {
        errorMessage = string.Empty;

        try
        {
            var dto = currentNeurologicalExams.FirstOrDefault(e => e.NeurologicalExamId == id);
            if (dto == null)
            {
                errorMessage = $"No se encontró el examen neurológico con ID {id}";
                return;
            }

            editingNeurologicalExamId = id;
            _selectedExamType = GetExamTypeName(dto.NeurologicalExamTypeId);
            Task.Run(async () => await HandleExamTypeChangedAsync());
            selectedExamName = dto.Name ?? "";
            neurologicalExamDescription = dto.Description ?? "";
            neurologicalExamDate = dto.ExamDate ?? DateTime.Now;
            neurologicalExamLinkPdf = dto.LinkPdf ?? "";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al preparar edición de examen neurológico");
            errorMessage = "Error al preparar el formulario de edición.";
        }
    }

    private async Task HandleNeurologicalExamRowDeleted(int id)
    {
        errorMessage = string.Empty;

        try
        {
            var success = await NeurologicalExamService.DeleteAsync(id);
            if (!success)
            {
                errorMessage = "Error al eliminar el examen neurológico.";
                return;
            }

            await LoadNeurologicalExams();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al eliminar examen neurológico");
            errorMessage = "Error al eliminar el examen neurológico.";
        }
    }

    private async Task SaveNeurologicalExamChanges()
    {
        errorMessage = string.Empty;

        try
        {
            if (string.IsNullOrWhiteSpace(selectedExamType))
            {
                errorMessage = "Debe seleccionar un tipo de examen.";
                return;
            }

            if (string.IsNullOrWhiteSpace(selectedExamName))
            {
                errorMessage = "Debe seleccionar un examen.";
                return;
            }

            var examType = examTypes.FirstOrDefault(et => et.Name == selectedExamType);
            if (examType == null)
            {
                errorMessage = "Tipo de examen no encontrado.";
                return;
            }

            var exam = allExams.FirstOrDefault(e => e.Name == selectedExamName && e.NeurologicalExamTypeId == examType.NeurologicalExamTypeId);
            if (exam == null)
            {
                errorMessage = "Examen no encontrado.";
                return;
            }

            if (editingNeurologicalExamId == -1)
            {
                var nuevo = new NeurologicalExamDTO
                {
                    ClinicalHistoryId = clinicalHistoryId > 0 ? clinicalHistoryId : null,
                    NeurologicalExamTypeId = examType.NeurologicalExamTypeId,
                    Name = selectedExamName.Trim(),
                    Description = string.IsNullOrWhiteSpace(neurologicalExamDescription) ? null : neurologicalExamDescription.Trim(),
                    ExamDate = neurologicalExamDate,
                    LinkPdf = string.IsNullOrWhiteSpace(neurologicalExamLinkPdf) ? null : neurologicalExamLinkPdf.Trim(),
                    HistoryNumber = string.IsNullOrWhiteSpace(medicalRecordNumber) ? null : medicalRecordNumber
                };

                var created = await NeurologicalExamService.CreateAsync(nuevo);
                if (created == null)
                {
                    errorMessage = "Error al crear el examen neurológico.";
                    return;
                }
            }
            else
            {
                var dto = currentNeurologicalExams.FirstOrDefault(e => e.NeurologicalExamId == editingNeurologicalExamId);
                if (dto == null)
                {
                    errorMessage = "Registro no encontrado para editar.";
                    return;
                }

                dto.NeurologicalExamTypeId = examType.NeurologicalExamTypeId;
                dto.Name = selectedExamName.Trim();
                dto.Description = string.IsNullOrWhiteSpace(neurologicalExamDescription) ? null : neurologicalExamDescription.Trim();
                dto.ExamDate = neurologicalExamDate;
                dto.LinkPdf = string.IsNullOrWhiteSpace(neurologicalExamLinkPdf) ? null : neurologicalExamLinkPdf.Trim();
                dto.HistoryNumber = string.IsNullOrWhiteSpace(medicalRecordNumber) ? null : medicalRecordNumber;
                dto.ClinicalHistoryId = clinicalHistoryId > 0 ? clinicalHistoryId : null;

                var updated = await NeurologicalExamService.UpdateAsync(dto);
                if (updated == null)
                {
                    errorMessage = "Error al actualizar el examen neurológico.";
                    return;
                }
            }

            await LoadNeurologicalExams();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al guardar cambios de examen neurológico");
            errorMessage = "Error inesperado al guardar cambios.";
        }
    }

    private void PrepareForAddNeurologicalExam()
    {
        editingNeurologicalExamId = -1;
        _selectedExamType = "";
        selectedExamName = "";
        neurologicalExamDescription = "";
        neurologicalExamDate = DateTime.Now;
        neurologicalExamLinkPdf = "";
        filteredExams = new();
        errorMessage = string.Empty;
        StateHasChanged();
    }

    private string GetCurrentEditingNeurologicalExamId() => editingNeurologicalExamId == -1 ? "Nuevo" : editingNeurologicalExamId.ToString();

    // ==========================================
    // MÉTODOS: REGISTRO DE DESARROLLO (EXISTENTES)
    // ==========================================
    private async Task LoadDevelopmentRecords()
    {
        errorMessage = string.Empty;
        isLoadingDevelopmentRecords = true;

        try
        {
            var result = await DevelopmentRecordService.GetByClinicalHistoryIdAsync(clinicalHistoryId);
            currentDevelopmentRecords = result ?? new();
            developmentRecordData = new();

            foreach (var record in currentDevelopmentRecords)
            {
                developmentRecordData.Add(new DevelopmentRecordRow
                {
                    Id = record.DevelopmentRecordId,
                    Values = new()
                    {
                        record.DevelopmentMilestone ?? "Sin hito",
                        record.AgeRange ?? "Sin rango",
                        record.Observations ?? "Sin observaciones"
                    }
                });
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar registros de desarrollo");
            errorMessage = "Error al cargar los registros de desarrollo.";
        }
        finally
        {
            isLoadingDevelopmentRecords = false;
        }
    }

    private void PrepareForEditDevelopmentRecord(int id)
    {
        errorMessage = string.Empty;

        try
        {
            var dto = currentDevelopmentRecords.FirstOrDefault(r => r.DevelopmentRecordId == id);
            if (dto == null)
            {
                errorMessage = $"No se encontró el registro de desarrollo con ID {id}";
                return;
            }

            editingDevelopmentRecordId = id;
            developmentMilestone = dto.DevelopmentMilestone ?? "";
            developmentAgeRange = dto.AgeRange ?? "";
            developmentObservations = dto.Observations ?? "";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al preparar edición de registro de desarrollo");
            errorMessage = "Error al preparar el formulario de edición.";
        }
    }

    private async Task HandleDevelopmentRecordRowDeleted(int id)
    {
        errorMessage = string.Empty;

        try
        {
            var success = await DevelopmentRecordService.DeleteAsync(id);
            if (!success)
            {
                errorMessage = "Error al eliminar el registro de desarrollo.";
                return;
            }

            await LoadDevelopmentRecords();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al eliminar registro de desarrollo");
            errorMessage = "Error al eliminar el registro de desarrollo.";
        }
    }

    private async Task SaveDevelopmentRecordChanges()
    {
        errorMessage = string.Empty;

        try
        {
            if (string.IsNullOrWhiteSpace(developmentMilestone))
            {
                errorMessage = "El hito de desarrollo es obligatorio.";
                return;
            }

            if (string.IsNullOrWhiteSpace(developmentAgeRange))
            {
                errorMessage = "El rango de edad es obligatorio.";
                return;
            }

            if (editingDevelopmentRecordId == -1)
            {
                var nuevo = new DevelopmentRecordDTO
                {
                    ClinicalHistoryId = clinicalHistoryId,
                    DevelopmentMilestone = developmentMilestone.Trim(),
                    AgeRange = developmentAgeRange.Trim(),
                    Observations = string.IsNullOrWhiteSpace(developmentObservations) ? null : developmentObservations.Trim(),
                    HistoryNumber = medicalRecordNumber
                };

                var created = await DevelopmentRecordService.CreateAsync(nuevo);
                if (created == null)
                {
                    errorMessage = "Error al crear el registro de desarrollo.";
                    return;
                }
            }
            else
            {
                var dto = currentDevelopmentRecords.FirstOrDefault(r => r.DevelopmentRecordId == editingDevelopmentRecordId);
                if (dto == null)
                {
                    errorMessage = "Registro no encontrado para editar.";
                    return;
                }

                dto.DevelopmentMilestone = developmentMilestone.Trim();
                dto.AgeRange = developmentAgeRange.Trim();
                dto.Observations = string.IsNullOrWhiteSpace(developmentObservations) ? null : developmentObservations.Trim();

                var updated = await DevelopmentRecordService.UpdateAsync(dto);
                if (updated == null)
                {
                    errorMessage = "Error al actualizar el registro de desarrollo.";
                    return;
                }
            }

            await LoadDevelopmentRecords();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al guardar cambios de registro de desarrollo");
            errorMessage = "Error inesperado al guardar cambios.";
        }
    }

    private void PrepareForAddDevelopmentRecord()
    {
        editingDevelopmentRecordId = -1;
        developmentMilestone = "";
        developmentAgeRange = "";
        developmentObservations = "";
        errorMessage = string.Empty;
    }

    private string GetCurrentEditingDevelopmentRecordId() => editingDevelopmentRecordId == -1 ? "Nuevo" : editingDevelopmentRecordId.ToString();

    // ==========================================
    // MÉTODOS AUXILIARES PARA MENSAJES
    // ==========================================
    private string GetDevelopmentRecordsEmptyMessage()
    {
        return isLoadingDevelopmentRecords ? "Cargando..." : "No hay datos disponibles";
    }

    private string GetNeurologicalExamsEmptyMessage()
    {
        return isLoadingNeurologicalExams ? "Cargando..." : "No hay datos disponibles";
    }

    private void ClearErrorMessage() => errorMessage = string.Empty;
}