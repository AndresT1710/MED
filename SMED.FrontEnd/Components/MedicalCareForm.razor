@using SMED.FrontEnd.Components
@using SMED.Shared.DTOs
@using SMED.FrontEnd.Services
@inject MedicalCareService MedicalCareService
@inject TypeOfServiceService TypeOfServiceService
@inject HealthProfessionalService HealthProfessionalService
@inject VitalSignsService VitalSignsService
@inject MedicalServiceService MedicalServiceService
@inject TypeOfProceduresService TypeOfProceduresService
@inject ProceduresService ProceduresService
@inject MedicalProcedureService MedicalProcedureService
@inject PlaceOfAttentionService PlaceService
@inject ReasonForConsultationService ReasonForConsultationService
@inject ReviewSystemDevicesService ReviewSystemDevicesService
@inject SystemsDevicesService SystemsDevicesService
@inject PhysicalExamService PhysicalExamService
@inject RegionService RegionService
@inject PathologicalEvidenceService PathologicalEvidenceService
@inject EvolutionService EvolutionService
@inject AdditionalDataService AdditionalDataService
@inject MedicalDiagnosisService MedicalDiagnosisService
@inject DiagnosticTypeService DiagnosticTypeService
@inject TreatmentService TreatmentService
@inject PharmacologicalTreatmentService PharmacologicalTreatmentService
@inject NonPharmacologicalTreatmentService NonPharmacologicalTreatmentService
@inject MedicineService MedicineService
@inject IndicationsService IndicationsService
@inject IJSRuntime JS

<div class="medical-care-form">
    <!-- Tabs Navigation -->
    <ul class="nav nav-tabs" id="medicalCareTabs" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link @(activeTab == "patient" ? "active" : "")"
                    @onclick="@(() => SetActiveTab("patient"))"
                    type="button" role="tab">
                <i class="fas fa-user me-2"></i>Selección de Paciente
                @if (IsPatientTabComplete())
                {
                    <span class="badge bg-success ms-1">✓</span>
                }
                else
                {
                    <span class="badge bg-danger ms-1">*</span>
                }
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link @(activeTab == "systems" ? "active" : "")"
                    @onclick="@(() => SetActiveTab("systems"))"
                    type="button" role="tab"
                    disabled="@(!IsPatientTabComplete() || currentMedicalCareId == 0)">
                <i class="fas fa-lungs me-2"></i>Aparatos y Sistemas
                @if (IsSystemsTabComplete())
                {
                    <span class="badge bg-success ms-1">✓</span>
                }
                <small class="text-muted ms-1">(Opcional)</small>
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link @(activeTab == "physical-exam" ? "active" : "")"
                    @onclick="@(() => SetActiveTab("physical-exam"))"
                    type="button" role="tab"
                    disabled="@(!IsPatientTabComplete() || currentMedicalCareId == 0)">
                <i class="fas fa-stethoscope me-2"></i>Examen Físico
                @if (IsPhysicalExamTabComplete())
                {
                    <span class="badge bg-success ms-1">✓</span>
                }
                <small class="text-muted ms-1">(Opcional)</small>
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link @(activeTab == "additional-data" ? "active" : "")"
                    @onclick="@(() => SetActiveTab("additional-data"))"
                    type="button" role="tab"
                    disabled="@(!IsPatientTabComplete() || currentMedicalCareId == 0)">
                <i class="fas fa-clipboard-list me-2"></i>Datos Adicionales
                @if (IsAdditionalDataTabComplete())
                {
                    <span class="badge bg-success ms-1">✓</span>
                }
                <small class="text-muted ms-1">(Opcional)</small>
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link @(activeTab == "procedures" ? "active" : "")"
                    @onclick="@(() => SetActiveTab("procedures"))"
                    type="button" role="tab"
                    disabled="@(!IsPatientTabComplete() || currentMedicalCareId == 0)">
                <i class="fas fa-procedures me-2"></i>Procedimientos
                @if (IsProceduresTabComplete())
                {
                    <span class="badge bg-success ms-1">✓</span>
                }
                <small class="text-muted ms-1">(Opcional)</small>
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link @(activeTab == "diagnosis" ? "active" : "")"
                    @onclick="@(() => SetActiveTab("diagnosis"))"
                    type="button" role="tab"
                    disabled="@(!IsPatientTabComplete() || currentMedicalCareId == 0)">
                <i class="fas fa-diagnoses me-2"></i>Diagnóstico
                @if (IsDiagnosisTabComplete())
                {
                    <span class="badge bg-success ms-1">✓</span>
                }
                <small class="text-muted ms-1">(Opcional)</small>
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link @(activeTab == "treatment" ? "active" : "")"
                    @onclick="@(() => SetActiveTab("treatment"))"
                    type="button" role="tab"
                    disabled="@(!IsPatientTabComplete() || currentMedicalCareId == 0)">
                <i class="fas fa-pills me-2"></i>Enfermedad/Tratamiento
                <small class="text-muted ms-1">(Opcional)</small>
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link @(activeTab == "referral" ? "active" : "")"
                    @onclick="@(() => SetActiveTab("referral"))"
                    type="button" role="tab"
                    disabled="@(!IsPatientTabComplete() || currentMedicalCareId == 0)">
                <i class="fas fa-share me-2"></i>Derivación
                <small class="text-muted ms-1">(Opcional)</small>
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link @(activeTab == "evolution" ? "active" : "")"
                    @onclick="@(() => SetActiveTab("evolution"))"
                    type="button" role="tab"
                    disabled="@(!IsPatientTabComplete() || currentMedicalCareId == 0)">
                <i class="fas fa-chart-line me-2"></i>Evolución
                @if (IsEvolutionTabComplete())
                {
                    <span class="badge bg-success ms-1">✓</span>
                }
                <small class="text-muted ms-1">(Opcional)</small>
            </button>
        </li>
    </ul>

    <!-- Tab Content -->
    <div class="tab-content mt-3">
        <!-- Patient Selection Tab -->
        <div class="tab-pane @(activeTab == "patient" ? "show active" : "")" role="tabpanel">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-user me-2"></i>Selección de Paciente
                        <span class="badge bg-danger ms-2">Obligatorio</span>
                        <span class="badge bg-success ms-2">
                            <i class="fas fa-hospital me-1"></i>Área: Medicina General
                        </span>
                    </h5>
                </div>
                <div class="card-body">
                    @if (!isEditMode)
                    {
                        <div class="mb-3">
                            <label class="form-label fw-bold">Paciente *</label>
                            <PatientSelector @bind-Value="clinicalHistoryId"
                                             OnPatientSelected="HandlePatientSelected" />
                            @if (showValidationErrors && selectedPatientId <= 0)
                            {
                                <div class="text-danger mt-1">
                                    <small><i class="fas fa-exclamation-triangle me-1"></i>Debe seleccionar un paciente</small>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle me-2"></i>
                            Editando atención médica existente. Paciente: @selectedHistoryNumber
                        </div>
                    }

                    @if (selectedPatientId > 0)
                    {
                        <div class="alert alert-success mt-3">
                            <i class="fas fa-check-circle me-2"></i>
                            Paciente seleccionado correctamente. Historia Clínica: @selectedHistoryNumber
                        </div>

                        <div class="alert alert-info mb-3">
                            <div class="d-flex align-items-center">
                                <i class="fas fa-info-circle me-2"></i>
                                <div>
                                    <strong>Área de Atención:</strong> Medicina General
                                    <br>
                                    <small class="text-muted">Esta atención médica se registrará automáticamente en el área de Medicina General.</small>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label fw-bold">Lugar de Atención *</label>
                                <select class="form-select @(showValidationErrors && string.IsNullOrEmpty(lugarSeleccionada) ? "is-invalid" : "")"
                                        @bind="lugarSeleccionada">
                                    <option value="">Seleccione el lugar de Atención</option>
                                    @foreach (var lugar in lugaresAtencion)
                                    {
                                        <option value="@lugar.Id">@lugar.Name</option>
                                    }
                                </select>
                                @if (showValidationErrors && string.IsNullOrEmpty(lugarSeleccionada))
                                {
                                    <div class="invalid-feedback">
                                        Debe seleccionar un lugar de atención
                                    </div>
                                }
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label fw-bold">Motivo de la Consulta *</label>
                            <textarea class="form-control @(showValidationErrors && string.IsNullOrWhiteSpace(motivoConsulta) ? "is-invalid" : "")"
                                      @bind="motivoConsulta"
                                      rows="3"
                                      placeholder="Describa el motivo principal de la consulta médica..."
                                      maxlength="500"></textarea>
                            @if (showValidationErrors && string.IsNullOrWhiteSpace(motivoConsulta))
                            {
                                <div class="invalid-feedback">
                                    Debe ingresar el motivo de la consulta
                                </div>
                            }
                        </div>

                        <div class="mb-3">
                            <label class="form-label fw-bold">Profesional responsable *</label>
                            <select class="form-select @(showValidationErrors && string.IsNullOrEmpty(profesionalSeleccionado) ? "is-invalid" : "")"
                                    @bind="profesionalSeleccionado">
                                <option value="">Seleccione un profesional</option>
                                @foreach (var profesional in profesionales)
                                {
                                    <option value="@profesional.HealthProfessionalId">
                                        @profesional.FullName - @profesional.NameTypeProfessional
                                    </option>
                                }
                            </select>
                            @if (showValidationErrors && string.IsNullOrEmpty(profesionalSeleccionado))
                            {
                                <div class="invalid-feedback">
                                    Debe seleccionar un profesional responsable
                                </div>
                            }
                        </div>

                        @if (!IsPatientTabComplete())
                        {
                            <div class="alert alert-warning">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                Complete todos los campos obligatorios para continuar a las siguientes pestañas.
                            </div>
                        }

                        <div class="d-flex justify-content-between mt-3">
                            <div>
                                <button class="btn btn-outline-secondary" @onclick="ValidateAndShowErrors">
                                    <i class="fas fa-check me-2"></i>Validar Información
                                </button>
                            </div>
                            <div>
                                @if (IsPatientTabComplete())
                                {
                                    <button class="btn btn-success me-2" @onclick="GuardarDatosPaciente" disabled="@isSaving">
                                        @if (isSaving)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2"></span>
                                        }
                                        <i class="fas fa-save me-2"></i>@(currentMedicalCareId > 0 ? "Actualizar" : "Guardar") Datos Básicos
                                    </button>
                                    @if (currentMedicalCareId > 0)
                                    {
                                        <button class="btn btn-primary" @onclick="@(() => SetActiveTab("systems"))">
                                            Continuar <i class="fas fa-arrow-right ms-2"></i>
                                        </button>
                                    }
                                }
                                else
                                {
                                    <button class="btn btn-secondary" disabled>
                                        Complete la información obligatoria
                                    </button>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Aparatos y Sistemas Tab -->
        <div class="tab-pane @(activeTab == "systems" ? "show active" : "")" role="tabpanel">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-lungs me-2"></i>Aparatos y Sistemas
                        <span class="badge bg-info ms-2">Opcional</span>
                    </h5>
                    <small class="text-muted">Evaluación de aparatos y sistemas del paciente</small>
                </div>
                <div class="card-body">
                    @if (currentMedicalCareId > 0)
                    {
                        <div class="alert alert-info mb-3">
                            <i class="fas fa-info-circle me-2"></i>
                            <strong>Información:</strong> Puede registrar múltiples evaluaciones de aparatos y sistemas para esta atención médica.
                        </div>

                        <EditableTable Title="Revisión de Aparatos y Sistemas"
                                       ColumnHeaders="@systemsHeaders"
                                       Rows="@systemsRows"
                                       RowIds="@systemsIds"
                                       EmptyMessage="No se han registrado revisiones de aparatos y sistemas"
                                       DeleteConfirmationMessage="¿Está seguro que desea eliminar esta revisión de aparato/sistema?"
                                       ShowAddButton="true"
                                       ShowEditButton="true"
                                       ShowDeleteButton="true"
                                       ShowActions="true"
                                       OnAddRequested="@OnAddSystemRequested"
                                       OnEditRequested="@OnEditSystemRequested"
                                       OnDeleteRequested="@OnDeleteSystemRequested"
                                       OnSaveRequested="@OnSaveSystemRequested"
                                       IsValidForm="@IsSystemFormValid">
                            <EditModalContent>
                                <div class="row g-3">
                                    <div class="col-12">
                                        <label class="form-label fw-bold">Tipo de Aparato/Sistema <span class="text-danger">*</span></label>
                                        <select class="form-select @(systemErrors.ContainsKey("SystemsDevicesId") ? "is-invalid" : "")"
                                                @bind="currentSystem.SystemsDevicesId">
                                            <option value="0">Seleccione un aparato o sistema</option>
                                            @foreach (var system in availableSystems)
                                            {
                                                <option value="@system.Id">@system.Name</option>
                                            }
                                        </select>
                                        @if (systemErrors.ContainsKey("SystemsDevicesId"))
                                        {
                                            <div class="invalid-feedback">@systemErrors["SystemsDevicesId"]</div>
                                        }
                                    </div>
                                    <div class="col-12">
                                        <label class="form-label fw-bold">Estado <span class="text-danger">*</span></label>
                                        <textarea class="form-control @(systemErrors.ContainsKey("State") ? "is-invalid" : "")"
                                                  @bind="currentSystem.State"
                                                  rows="3"
                                                  maxlength="500"
                                                  placeholder="Describa el estado actual del aparato o sistema..."
                                                  style="resize: vertical; max-height: 150px;"></textarea>
                                        @if (systemErrors.ContainsKey("State"))
                                        {
                                            <div class="invalid-feedback">@systemErrors["State"]</div>
                                        }
                                        <small class="form-text text-muted">
                                            Máximo 500 caracteres. Restantes: @(500 - (currentSystem.State?.Length ?? 0))
                                        </small>
                                    </div>
                                    <div class="col-12">
                                        <label class="form-label fw-bold">Observaciones</label>
                                        <textarea class="form-control"
                                                  @bind="currentSystem.Observations"
                                                  rows="4"
                                                  maxlength="1000"
                                                  placeholder="Observaciones adicionales (opcional)..."
                                                  style="resize: vertical; max-height: 200px;"></textarea>
                                        <small class="form-text text-muted">
                                            Máximo 1000 caracteres. Restantes: @(1000 - (currentSystem.Observations?.Length ?? 0))
                                        </small>
                                    </div>
                                </div>
                                @if (!string.IsNullOrEmpty(systemFormError))
                                {
                                    <div class="alert alert-danger mt-3">
                                        <i class="fas fa-exclamation-triangle me-2"></i>
                                        @systemFormError
                                    </div>
                                }
                            </EditModalContent>
                        </EditableTable>

                        <div class="d-flex justify-content-between mt-4">
                            <button class="btn btn-secondary" @onclick="@(() => SetActiveTab("patient"))">
                                <i class="fas fa-arrow-left me-2"></i>Volver
                            </button>
                            <div>
                                @if (hasUnsavedSystemsData)
                                {
                                    <div class="alert alert-warning d-inline-block me-2 mb-0 py-1 px-2">
                                        <small><i class="fas fa-exclamation-triangle me-1"></i>Hay cambios sin guardar</small>
                                    </div>
                                }
                                <button class="btn btn-primary" @onclick="@(() => SetActiveTab("physical-exam"))">
                                    Continuar <i class="fas fa-arrow-right ms-2"></i>
                                </button>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            Debe guardar primero los datos básicos del paciente para acceder a esta sección.
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Examen Físico Tab -->
        <div class="tab-pane @(activeTab == "physical-exam" ? "show active" : "")" role="tabpanel">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-stethoscope me-2"></i>Examen Físico
                        <span class="badge bg-info ms-2">Opcional</span>
                    </h5>
                    <small class="text-muted">Evaluación física del paciente</small>
                </div>
                <div class="card-body">
                    @if (currentMedicalCareId > 0)
                    {
                        <div class="alert alert-info mb-3">
                            <i class="fas fa-info-circle me-2"></i>
                            <strong>Información:</strong> Puede registrar múltiples exámenes físicos para esta atención médica.
                        </div>

                        <EditableTable Title="Examen Físico del Paciente"
                                       ColumnHeaders="@physicalExamHeaders"
                                       Rows="@physicalExamRows"
                                       RowIds="@physicalExamIds"
                                       EmptyMessage="No se han registrado exámenes físicos"
                                       DeleteConfirmationMessage="¿Está seguro que desea eliminar este examen físico?"
                                       ShowAddButton="true"
                                       ShowEditButton="true"
                                       ShowDeleteButton="true"
                                       ShowActions="true"
                                       OnAddRequested="@OnAddPhysicalExamRequested"
                                       OnEditRequested="@OnEditPhysicalExamRequested"
                                       OnDeleteRequested="@OnDeletePhysicalExamRequested"
                                       OnSaveRequested="@OnSavePhysicalExamRequested"
                                       IsValidForm="@IsPhysicalExamFormValid">
                            <EditModalContent>
                                <div class="row g-3">
                                    <div class="col-12">
                                        <label class="form-label fw-bold">Región <span class="text-danger">*</span></label>
                                        <select class="form-select @(physicalExamErrors.ContainsKey("RegionId") ? "is-invalid" : "")"
                                                @bind="currentPhysicalExam.RegionId">
                                            <option value="0">Seleccione una región</option>
                                            @foreach (var region in availableRegions)
                                            {
                                                <option value="@region.Id">@region.Name</option>
                                            }
                                        </select>
                                        @if (physicalExamErrors.ContainsKey("RegionId"))
                                        {
                                            <div class="invalid-feedback">@physicalExamErrors["RegionId"]</div>
                                        }
                                    </div>
                                    <div class="col-12">
                                        <label class="form-label fw-bold">Evidencia Patológica <span class="text-danger">*</span></label>
                                        <select class="form-select @(physicalExamErrors.ContainsKey("PathologicalEvidenceId") ? "is-invalid" : "")"
                                                @bind="currentPhysicalExam.PathologicalEvidenceId">
                                            <option value="0">Seleccione una evidencia patológica</option>
                                            @foreach (var evidence in availablePathologicalEvidences)
                                            {
                                                <option value="@evidence.Id">@evidence.Name</option>
                                            }
                                        </select>
                                        @if (physicalExamErrors.ContainsKey("PathologicalEvidenceId"))
                                        {
                                            <div class="invalid-feedback">@physicalExamErrors["PathologicalEvidenceId"]</div>
                                        }
                                    </div>
                                    <div class="col-12">
                                        <label class="form-label fw-bold">Observación <span class="text-danger">*</span></label>
                                        <textarea class="form-control @(physicalExamErrors.ContainsKey("Observation") ? "is-invalid" : "")"
                                                  @bind="currentPhysicalExam.Observation"
                                                  rows="4"
                                                  maxlength="500"
                                                  placeholder="Describa las observaciones del examen físico..."
                                                  style="resize: vertical; min-height: 100px; max-height: 200px;"></textarea>
                                        @if (physicalExamErrors.ContainsKey("Observation"))
                                        {
                                            <div class="invalid-feedback">@physicalExamErrors["Observation"]</div>
                                        }
                                        <small class="form-text text-muted">
                                            Máximo 500 caracteres. Restantes: @(500 - (currentPhysicalExam.Observation?.Length ?? 0))
                                        </small>
                                    </div>
                                </div>
                                @if (!string.IsNullOrEmpty(physicalExamFormError))
                                {
                                    <div class="alert alert-danger mt-3">
                                        <i class="fas fa-exclamation-triangle me-2"></i>
                                        @physicalExamFormError
                                    </div>
                                }
                            </EditModalContent>
                        </EditableTable>

                        <div class="d-flex justify-content-between mt-4">
                            <button class="btn btn-secondary" @onclick="@(() => SetActiveTab("systems"))">
                                <i class="fas fa-arrow-left me-2"></i>Volver
                            </button>
                            <div>
                                @if (hasUnsavedPhysicalExamData)
                                {
                                    <div class="alert alert-warning d-inline-block me-2 mb-0 py-1 px-2">
                                        <small><i class="fas fa-exclamation-triangle me-1"></i>Hay cambios sin guardar</small>
                                    </div>
                                }
                                <button class="btn btn-primary" @onclick="@(() => SetActiveTab("additional-data"))">
                                    Continuar <i class="fas fa-arrow-right ms-2"></i>
                                </button>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            Debe guardar primero los datos básicos del paciente para acceder a esta sección.
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Datos Adicionales Tab -->
        <div class="tab-pane @(activeTab == "additional-data" ? "show active" : "")" role="tabpanel">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-clipboard-list me-2"></i>Datos Adicionales
                        <span class="badge bg-info ms-2">Opcional</span>
                    </h5>
                    <small class="text-muted">Información complementaria de la atención médica</small>
                </div>
                <div class="card-body">
                    @if (currentMedicalCareId > 0)
                    {
                        <div class="alert alert-info mb-4">
                            <div class="d-flex align-items-center">
                                <i class="fas fa-info-circle me-2"></i>
                                <div>
                                    <strong>Datos Adicionales</strong>
                                    <p class="mb-0">Registre información complementaria relevante para la atención médica. Haga clic en el campo para editarlo.</p>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-12">
                                <ContainerBox1 Title="Observaciones Adicionales"
                                               Width="full"
                                               @bind-Content="additionalDataContent" />
                            </div>
                        </div>

                        <div class="d-flex justify-content-between mt-4">
                            <button class="btn btn-secondary" @onclick="@(() => SetActiveTab("physical-exam"))">
                                <i class="fas fa-arrow-left me-2"></i>Volver
                            </button>
                            <button class="btn btn-primary" @onclick="@(() => SetActiveTab("procedures"))">
                                Continuar <i class="fas fa-arrow-right ms-2"></i>
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            Debe guardar primero los datos básicos del paciente para acceder a esta sección.
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Procedures Tab -->
        <div class="tab-pane @(activeTab == "procedures" ? "show active" : "")" role="tabpanel">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-procedures me-2"></i>Procedimientos Médicos
                        <span class="badge bg-info ms-2">Opcional</span>
                    </h5>
                    @if (currentMedicalCareId > 0)
                    {
                        <button class="btn btn-sm btn-primary" @onclick="AgregarProcedimiento">
                            <i class="fas fa-plus me-1"></i>Agregar Procedimiento
                        </button>
                    }
                </div>
                <div class="card-body">
                    @if (currentMedicalCareId > 0)
                    {
                        @if (procedimientosList.Any())
                        {
                            <div class="table-responsive">
                                <table class="table table-sm table-hover">
                                    <thead class="table-light">
                                        <tr>
                                            <th>Fecha</th>
                                            <th>Tipo</th>
                                            <th>Procedimiento</th>
                                            <th>Observaciones</th>
                                            <th width="120">Acciones</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var procedimiento in procedimientosList)
                                        {
                                            <tr>
                                                <td>@procedimiento.ProcedureDate.ToString("dd/MM/yyyy")</td>
                                                <td>@procedimiento.TypeOfProcedureName</td>
                                                <td>@procedimiento.SpecificProcedureName</td>
                                                <td>@(string.IsNullOrEmpty(procedimiento.Observations) ? "N/A" : (procedimiento.Observations.Length > 50 ? procedimiento.Observations.Substring(0, 50) + "..." : procedimiento.Observations))</td>
                                                <td>
                                                    <button class="btn btn-sm btn-warning me-1" @onclick="() => EditarProcedimiento(procedimiento)" title="Editar">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-danger" @onclick="() => EliminarProcedimiento(procedimiento)" title="Eliminar">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-4">
                                <i class="fas fa-procedures fa-3x text-muted mb-3"></i>
                                <p class="text-muted">No hay procedimientos agregados</p>
                                <button class="btn btn-primary" @onclick="AgregarProcedimiento">
                                    <i class="fas fa-plus me-2"></i>Agregar Primer Procedimiento
                                </button>
                            </div>
                        }

                        <div class="d-flex justify-content-between mt-4">
                            <button class="btn btn-secondary" @onclick="@(() => SetActiveTab("additional-data"))">
                                <i class="fas fa-arrow-left me-2"></i>Volver
                            </button>
                            <button class="btn btn-primary" @onclick="@(() => SetActiveTab("diagnosis"))">
                                Continuar <i class="fas fa-arrow-right ms-2"></i>
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            Debe guardar primero los datos básicos del paciente para acceder a esta sección.
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Diagnóstico Tab -->
        <div class="tab-pane @(activeTab == "diagnosis" ? "show active" : "")" role="tabpanel">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-diagnoses me-2"></i>Diagnóstico
                        <span class="badge bg-info ms-2">Opcional</span>
                    </h5>
                    <small class="text-muted">Diagnóstico médico del paciente</small>
                </div>
                <div class="card-body">
                    @if (currentMedicalCareId > 0)
                    {
                        <div class="alert alert-info mb-3">
                            <i class="fas fa-info-circle me-2"></i>
                            <strong>Información:</strong> Puede registrar múltiples diagnósticos médicos para esta atención médica.
                        </div>

                        <EditableTable Title="Diagnósticos Médicos"
                                       ColumnHeaders="@diagnosisHeaders"
                                       Rows="@diagnosisRows"
                                       RowIds="@diagnosisIds"
                                       EmptyMessage="No se han registrado diagnósticos médicos"
                                       DeleteConfirmationMessage="¿Está seguro que desea eliminar este diagnóstico?"
                                       ShowAddButton="true"
                                       ShowEditButton="true"
                                       ShowDeleteButton="true"
                                       ShowActions="true"
                                       OnAddRequested="@OnAddDiagnosisRequested"
                                       OnEditRequested="@OnEditDiagnosisRequested"
                                       OnDeleteRequested="@OnDeleteDiagnosisRequested"
                                       OnSaveRequested="@OnSaveDiagnosisRequested"
                                       IsValidForm="@IsDiagnosisFormValid">
                            <EditModalContent>
                                <div class="row g-3">
                                    <div class="col-md-6">
                                        <label class="form-label fw-bold">CIE10 <span class="text-danger">*</span></label>
                                        <input type="text"
                                               class="form-control @(diagnosisErrors.ContainsKey("Cie10") ? "is-invalid" : "")"
                                               @bind="currentDiagnosis.Cie10"
                                               maxlength="20"
                                               placeholder="Ingrese el código CIE10"
                                               disabled="@isUnidentifiedCie10" />
                                        @if (diagnosisErrors.ContainsKey("Cie10"))
                                        {
                                            <div class="invalid-feedback">@diagnosisErrors["Cie10"]</div>
                                        }
                                        <small class="form-text text-muted">
                                            Máximo 20 caracteres. Restantes: @(20 - (currentDiagnosis.Cie10?.Length ?? 0))
                                        </small>

                                        @* Checkbox modificado - Eliminado el @onchange ya que @bind lo maneja *@
                                        <div class="form-check mt-2">
                                            <input class="form-check-input"
                                                   type="checkbox"
                                                   id="unidentifiedCie10Check"
                                                   @bind="isUnidentifiedCie10" />
                                            <label class="form-check-label" for="unidentifiedCie10Check">
                                                No Identificado
                                            </label>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label fw-bold">Tipo de Diagnóstico <span class="text-danger">*</span></label>
                                        <select class="form-select @(diagnosisErrors.ContainsKey("DiagnosticTypeId") ? "is-invalid" : "")"
                                                @bind="currentDiagnosis.DiagnosticTypeId">
                                            <option value="0">Seleccione un tipo de diagnóstico</option>
                                            @foreach (var type in availableDiagnosticTypes)
                                            {
                                                <option value="@type.Id">@type.Name</option>
                                            }
                                        </select>
                                        @if (diagnosisErrors.ContainsKey("DiagnosticTypeId"))
                                        {
                                            <div class="invalid-feedback">@diagnosisErrors["DiagnosticTypeId"]</div>
                                        }
                                    </div>
                                    <div class="col-12">
                                        <label class="form-label fw-bold">Denominación <span class="text-danger">*</span></label>
                                        <textarea class="form-control @(diagnosisErrors.ContainsKey("Denomination") ? "is-invalid" : "")"
                                                  @bind="currentDiagnosis.Denomination"
                                                  rows="3"
                                                  maxlength="500"
                                                  placeholder="Describa la denominación del diagnóstico..."
                                                  style="resize: vertical; max-height: 150px;"></textarea>
                                        @if (diagnosisErrors.ContainsKey("Denomination"))
                                        {
                                            <div class="invalid-feedback">@diagnosisErrors["Denomination"]</div>
                                        }
                                        <small class="form-text text-muted">
                                            Máximo 500 caracteres. Restantes: @(500 - (currentDiagnosis.Denomination?.Length ?? 0))
                                        </small>
                                    </div>
                                    <div class="col-12">
                                        <label class="form-label fw-bold">Recurrencia <span class="text-danger">*</span></label>
                                        <textarea class="form-control @(diagnosisErrors.ContainsKey("Recurrence") ? "is-invalid" : "")"
                                                  @bind="currentDiagnosis.Recurrence"
                                                  rows="3"
                                                  maxlength="500"
                                                  placeholder="Describa la recurrencia del diagnóstico..."
                                                  style="resize: vertical; max-height: 150px;"></textarea>
                                        @if (diagnosisErrors.ContainsKey("Recurrence"))
                                        {
                                            <div class="invalid-feedback">@diagnosisErrors["Recurrence"]</div>
                                        }
                                        <small class="form-text text-muted">
                                            Máximo 500 caracteres. Restantes: @(500 - (currentDiagnosis.Recurrence?.Length ?? 0))
                                        </small>
                                    </div>
                                    <div class="col-12">
                                        <label class="form-label fw-bold">Motivación del Diagnóstico <span class="text-danger">*</span></label>
                                        <textarea class="form-control @(diagnosisErrors.ContainsKey("DiagnosisMotivation") ? "is-invalid" : "")"
                                                  @bind="currentDiagnosis.DiagnosisMotivation"
                                                  rows="4"
                                                  maxlength="1000"
                                                  placeholder="Describa la motivación del diagnóstico..."
                                                  style="resize: vertical; min-height: 100px; max-height: 200px;"></textarea>
                                        @if (diagnosisErrors.ContainsKey("DiagnosisMotivation"))
                                        {
                                            <div class="invalid-feedback">@diagnosisErrors["DiagnosisMotivation"]</div>
                                        }
                                        <small class="form-text text-muted">
                                            Máximo 1000 caracteres. Restantes: @(1000 - (currentDiagnosis.DiagnosisMotivation?.Length ?? 0))
                                        </small>
                                    </div>
                                </div>
                                @if (!string.IsNullOrEmpty(diagnosisFormError))
                                {
                                    <div class="alert alert-danger mt-3">
                                        <i class="fas fa-exclamation-triangle me-2"></i>
                                        @diagnosisFormError
                                    </div>
                                }
                            </EditModalContent>
                        </EditableTable>

                        <div class="d-flex justify-content-between mt-4">
                            <button class="btn btn-secondary" @onclick="@(() => SetActiveTab("procedures"))">
                                <i class="fas fa-arrow-left me-2"></i>Volver
                            </button>
                            <div>
                                @if (hasUnsavedDiagnosisData)
                                {
                                    <div class="alert alert-warning d-inline-block me-2 mb-0 py-1 px-2">
                                        <small><i class="fas fa-exclamation-triangle me-1"></i>Hay cambios sin guardar</small>
                                    </div>
                                }
                                <button class="btn btn-primary" @onclick="@(() => SetActiveTab("treatment"))">
                                    Continuar <i class="fas fa-arrow-right ms-2"></i>
                                </button>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            Debe guardar primero los datos básicos del paciente para acceder a esta sección.
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Enfermedad/Tratamiento Tab -->
        <div class="tab-pane @(activeTab == "treatment" ? "show active" : "")" role="tabpanel">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-pills me-2"></i>Enfermedad/Tratamiento
                        <span class="badge bg-info ms-2">Opcional</span>
                    </h5>
                    <small class="text-muted">Plan de tratamiento</small>
                </div>
                <div class="card-body">
                    @if (currentMedicalCareId > 0)
                    {
                        @* Replaced basic implementation with complete treatment functionality *@
                        @if (!diagnosisList.Any())
                        {
                            <div class="alert alert-warning mb-4">
                                <div class="d-flex align-items-center">
                                    <i class="fas fa-exclamation-triangle me-2"></i>
                                    <div>
                                        <strong>No hay diagnósticos registrados</strong>
                                        <p class="mb-0">Debe registrar al menos un diagnóstico en la pestaña anterior para poder asignar tratamientos.</p>
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-info mb-3">
                                <i class="fas fa-info-circle me-2"></i>
                                <strong>Información:</strong> Puede asignar tratamientos específicos a cada diagnóstico registrado.
                            </div>

                            <div class="table-responsive">
                                <table class="table table-striped table-hover">
                                    <thead class="table-dark">
                                        <tr>
                                            <th>CIE10</th>
                                            <th>Denominación</th>
                                            <th>Tratamientos</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var diagnosis in diagnosisList)
                                        {
                                            <tr>
                                                <td>@diagnosis.Cie10</td>
                                                <td>@diagnosis.Denomination</td>
                                                <td>
                                                    <button class="btn btn-success btn-sm" @onclick="() => OpenTreatmentModal(diagnosis.Id)">
                                                        <i class="fas fa-eye me-1"></i>Ver o Editar
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }

                        <div class="d-flex justify-content-between mt-4">
                            <button class="btn btn-secondary" @onclick="@(() => SetActiveTab("diagnosis"))">
                                <i class="fas fa-arrow-left me-2"></i>Volver
                            </button>
                            <button class="btn btn-primary" @onclick="@(() => SetActiveTab("referral"))">
                                Continuar <i class="fas fa-arrow-right ms-2"></i>
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            Debe guardar primero los datos básicos del paciente para acceder a esta sección.
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Derivación Tab -->
        <div class="tab-pane @(activeTab == "referral" ? "show active" : "")" role="tabpanel">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-share me-2"></i>Derivación
                        <span class="badge bg-info ms-2">Opcional</span>
                    </h5>
                    <small class="text-muted">Derivación a especialistas</small>
                </div>
                <div class="card-body">
                    @if (currentMedicalCareId > 0)
                    {
                        <div class="alert alert-info mb-4">
                            <div class="d-flex align-items-center">
                                <i class="fas fa-info-circle me-2"></i>
                                <div>
                                    <strong>Derivación</strong>
                                    <p class="mb-0">Aquí se registrarán las derivaciones a especialistas o servicios específicos.</p>
                                </div>
                            </div>
                        </div>

                        <div class="d-flex justify-content-between mt-4">
                            <button class="btn btn-secondary" @onclick="@(() => SetActiveTab("treatment"))">
                                <i class="fas fa-arrow-left me-2"></i>Volver
                            </button>
                            <button class="btn btn-primary" @onclick="@(() => SetActiveTab("evolution"))">
                                Continuar <i class="fas fa-arrow-right ms-2"></i>
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            Debe guardar primero los datos básicos del paciente para acceder a esta sección.
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Evolución Tab -->
        <div class="tab-pane @(activeTab == "evolution" ? "show active" : "")" role="tabpanel">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-chart-line me-2"></i>Evolución
                        <span class="badge bg-info ms-2">Opcional</span>
                    </h5>
                    <small class="text-muted">Evolución y seguimiento del paciente</small>
                </div>
                <div class="card-body">
                    @if (currentMedicalCareId > 0)
                    {
                        <div class="alert alert-info mb-3">
                            <i class="fas fa-info-circle me-2"></i>
                            <strong>Información:</strong> Puede registrar múltiples evoluciones para hacer seguimiento del progreso del paciente.
                        </div>

                        <EditableTable Title="Evolución del Paciente"
                                       ColumnHeaders="@evolutionHeaders"
                                       Rows="@evolutionRows"
                                       RowIds="@evolutionIds"
                                       EmptyMessage="No se han registrado evoluciones del paciente"
                                       DeleteConfirmationMessage="¿Está seguro que desea eliminar esta evolución?"
                                       ShowAddButton="true"
                                       ShowEditButton="true"
                                       ShowDeleteButton="true"
                                       ShowActions="true"
                                       OnAddRequested="@OnAddEvolutionRequested"
                                       OnEditRequested="@OnEditEvolutionRequested"
                                       OnDeleteRequested="@OnDeleteEvolutionRequested"
                                       OnSaveRequested="@OnSaveEvolutionRequested"
                                       IsValidForm="@IsEvolutionFormValid">
                            <EditModalContent>
                                <div class="row g-3">
                                    <div class="col-12">
                                        <label class="form-label fw-bold">Observación <span class="text-danger">*</span></label>
                                        <textarea class="form-control @(evolutionErrors.ContainsKey("Description") ? "is-invalid" : "")"
                                                  @bind="currentEvolution.Description"
                                                  rows="6"
                                                  maxlength="1000"
                                                  placeholder="Describa la evolución del paciente, síntomas, mejoras, cambios en el tratamiento, etc..."
                                                  style="resize: vertical; min-height: 120px; max-height: 300px;"></textarea>
                                        @if (evolutionErrors.ContainsKey("Description"))
                                        {
                                            <div class="invalid-feedback">@evolutionErrors["Description"]</div>
                                        }
                                        <small class="form-text text-muted">
                                            Máximo 1000 caracteres. Restantes: @(1000 - (currentEvolution.Description?.Length ?? 0))
                                        </small>
                                    </div>
                                    <div class="col-12">
                                        <label class="form-label fw-bold">Porcentaje de Mejora <span class="text-danger">*</span></label>
                                        <div class="input-group">
                                            <input type="number"
                                                   class="form-control @(evolutionErrors.ContainsKey("Percentage") ? "is-invalid" : "")"
                                                   @bind="currentEvolution.Percentage"
                                                   min="0"
                                                   max="100"
                                                   step="0.1"
                                                   placeholder="Ingrese el porcentaje de mejora" />
                                            <span class="input-group-text">%</span>
                                            @if (evolutionErrors.ContainsKey("Percentage"))
                                            {
                                                <div class="invalid-feedback">@evolutionErrors["Percentage"]</div>
                                            }
                                        </div>
                                        <small class="form-text text-muted">
                                            Ingrese un valor entre 0 y 100 para indicar el porcentaje de mejora del paciente.
                                        </small>
                                    </div>
                                </div>
                                @if (!string.IsNullOrEmpty(evolutionFormError))
                                {
                                    <div class="alert alert-danger mt-3">
                                        <i class="fas fa-exclamation-triangle me-2"></i>
                                        @evolutionFormError
                                    </div>
                                }
                            </EditModalContent>
                        </EditableTable>

                        <div class="d-flex justify-content-between mt-4">
                            <button class="btn btn-secondary" @onclick="@(() => SetActiveTab("referral"))">
                                <i class="fas fa-arrow-left me-2"></i>Volver
                            </button>
                            <div>
                                @if (hasUnsavedEvolutionData)
                                {
                                    <div class="alert alert-warning d-inline-block me-2 mb-0 py-1 px-2">
                                        <small><i class="fas fa-exclamation-triangle me-1"></i>Hay cambios sin guardar</small>
                                    </div>
                                }
                                <button class="btn btn-success" @onclick="FinalizarAtencionMedica" disabled="@isSaving">
                                    @if (isSaving)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2"></span>
                                    }
                                    <i class="fas fa-check me-2"></i>Finalizar Atención Médica
                                </button>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            Debe guardar primero los datos básicos del paciente para acceder a esta sección.
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal para Procedimiento -->
@if (showProcedureModal)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal d-block" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-procedures me-2"></i>
                        @(currentProcedure?.ProcedureId > 0 ? "Editar" : "Agregar") Procedimiento
                    </h5>
                    <button type="button" class="btn-close" @onclick="CerrarModalProcedimiento"></button>
                </div>
                <div class="modal-body">
                    <ProcedureForm Procedure="currentProcedure" OnSaved="OnProcedureSaved" OnCancel="CerrarModalProcedimiento" />
                </div>
            </div>
        </div>
    </div>
}

@* Added complete treatment modal functionality *@
@* Modal para gestión de tratamientos *@
@if (showTreatmentModal)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal d-block" tabindex="-1">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-pills me-2"></i>
                        Gestión de Tratamientos - @selectedDiagnosisForTreatment?.Denomination
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseTreatmentModal"></button>
                </div>
                <div class="modal-body">
                    @if (selectedDiagnosisForTreatment != null)
                    {
                        <!-- Tratamiento Farmacológico -->
                        <div class="mb-4">
                            <h6 class="mb-3">
                                <i class="fas fa-pills me-2"></i>Tratamiento Farmacológico
                            </h6>

                            <EditableTable Title="Medicamentos"
                                           ColumnHeaders="@pharmacologicalHeaders"
                                           Rows="@pharmacologicalRows"
                                           RowIds="@pharmacologicalIds"
                                           EmptyMessage="No se han registrado medicamentos"
                                           DeleteConfirmationMessage="¿Está seguro que desea eliminar este medicamento?"
                                           ShowAddButton="true"
                                           ShowEditButton="true"
                                           ShowDeleteButton="true"
                                           ShowActions="true"
                                           OnAddRequested="@OnAddPharmacologicalRequested"
                                           OnEditRequested="@OnEditPharmacologicalRequested"
                                           OnDeleteRequested="@OnDeletePharmacologicalRequested"
                                           OnSaveRequested="@OnSavePharmacologicalRequested"
                                           IsValidForm="@IsPharmacologicalFormValid">
                                <EditModalContent>
                                    <div class="row g-3">
                                        <div class="col-md-6">
                                            <label class="form-label fw-bold">Medicamento <span class="text-danger">*</span></label>
                                            <select class="form-select @(pharmacologicalErrors.ContainsKey("MedicineId") ? "is-invalid" : "")"
                                                    @bind="currentPharmacological.MedicineId">
                                                <option value="0">Seleccione un medicamento</option>
                                                @foreach (var medicine in availableMedicines)
                                                {
                                                    <option value="@medicine.Id">@medicine.Name</option>
                                                }
                                            </select>
                                            @if (pharmacologicalErrors.ContainsKey("MedicineId"))
                                            {
                                                <div class="invalid-feedback">@pharmacologicalErrors["MedicineId"]</div>
                                            }
                                        </div>
                                        <div class="col-md-6">
                                            <label class="form-label fw-bold">Dosis <span class="text-danger">*</span></label>
                                            <input type="number"
                                                   class="form-control @(pharmacologicalErrors.ContainsKey("Dose") ? "is-invalid" : "")"
                                                   @bind="currentPharmacological.Dose"
                                                   min="1"
                                                   placeholder="Ingrese la dosis" />
                                            @if (pharmacologicalErrors.ContainsKey("Dose"))
                                            {
                                                <div class="invalid-feedback">@pharmacologicalErrors["Dose"]</div>
                                            }
                                        </div>
                                        <div class="col-md-6">
                                            <label class="form-label fw-bold">Frecuencia <span class="text-danger">*</span></label>
                                            <input type="text"
                                                   class="form-control @(pharmacologicalErrors.ContainsKey("Frequency") ? "is-invalid" : "")"
                                                   @bind="currentPharmacological.Frequency"
                                                   maxlength="100"
                                                   placeholder="Ej: Cada 8 horas" />
                                            @if (pharmacologicalErrors.ContainsKey("Frequency"))
                                            {
                                                <div class="invalid-feedback">@pharmacologicalErrors["Frequency"]</div>
                                            }
                                        </div>
                                        <div class="col-md-6">
                                            <label class="form-label fw-bold">Duración <span class="text-danger">*</span></label>
                                            <input type="text"
                                                   class="form-control @(pharmacologicalErrors.ContainsKey("Duration") ? "is-invalid" : "")"
                                                   @bind="currentPharmacological.Duration"
                                                   maxlength="100"
                                                   placeholder="Ej: 7 días" />
                                            @if (pharmacologicalErrors.ContainsKey("Duration"))
                                            {
                                                <div class="invalid-feedback">@pharmacologicalErrors["Duration"]</div>
                                            }
                                        </div>
                                        <div class="col-12">
                                            <label class="form-label fw-bold">Vía de Administración <span class="text-danger">*</span></label>
                                            <input type="text"
                                                   class="form-control @(pharmacologicalErrors.ContainsKey("ViaAdmission") ? "is-invalid" : "")"
                                                   @bind="currentPharmacological.ViaAdmission"
                                                   maxlength="100"
                                                   placeholder="Ej: Oral, Intravenosa, etc." />
                                            @if (pharmacologicalErrors.ContainsKey("ViaAdmission"))
                                            {
                                                <div class="invalid-feedback">@pharmacologicalErrors["ViaAdmission"]</div>
                                            }
                                        </div>
                                    </div>
                                    @if (!string.IsNullOrEmpty(pharmacologicalFormError))
                                    {
                                        <div class="alert alert-danger mt-3">
                                            <i class="fas fa-exclamation-triangle me-2"></i>
                                            @pharmacologicalFormError
                                        </div>
                                    }
                                </EditModalContent>
                            </EditableTable>
                        </div>

                        <!-- Tratamiento No Farmacológico e Indicaciones -->
                        <div class="row">
                            <div class="col-md-6">
                                <ContainerBox1 Title="Tratamiento No Farmacológico"
                                               Width="full"
                                               @bind-Content="nonPharmacologicalContent"
                                               @bind-Content:after="SaveNonPharmacologicalTreatment" />
                            </div>
                            <div class="col-md-6">
                                <ContainerBox1 Title="Indicaciones"
                                               Width="full"
                                               @bind-Content="indicationsContent"
                                               @bind-Content:after="SaveIndications" />
                            </div>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseTreatmentModal">
                        <i class="fas fa-arrow-left me-2"></i>Volver
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public MedicalCareDTO? MedicalCare { get; set; }
    [Parameter] public EventCallback<MedicalCareDTO> OnSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private string activeTab = "patient";
    private int clinicalHistoryId = 0;
    private int selectedPatientId = 0;
    private string selectedHistoryNumber = "";
    private string areaSeleccionada = "Medicina General";
    private string profesionalSeleccionado = "";
    private string motivoConsulta = "";
    private bool isEditMode = false;
    private string lugarSeleccionada = "";
    private bool showValidationErrors = false;
    private bool isSaving = false;

    // ID de la atención médica actual
    private int currentMedicalCareId = 0;

    // Listas dinámicas
    private List<TypeOfServiceDTO> tipoServicios = new();
    private List<HealthProfessionalDTO> profesionales = new();
    private List<TypeOfProceduresDTO> tiposProcedimientos = new();
    private List<ProceduresDTO> todosProcedimientos = new();
    private List<PlaceOfAttentionDTO> lugaresAtencion = new();

    // Listas de procedimientos
    private List<MedicalProcedureDTO> procedimientosList = new();

    // Para edición
    private VitalSignsDTO? existingVitalSigns;
    private ReasonForConsultationDTO? existingReasonForConsultation;

    // Modales
    private bool showProcedureModal = false;
    private MedicalProcedureDTO? currentProcedure;

    // Variables para Aparatos y Sistemas
    private List<SystemsDevicesDTO> availableSystems = new();
    private List<ReviewSystemDevicesDTO> systemsList = new();
    private ReviewSystemDevicesDTO currentSystem = new();
    private List<string> systemsHeaders = new() { "Tipo de Aparato/Sistema", "Estado", "Observaciones" };
    private List<List<string>> systemsRows = new();
    private List<int> systemsIds = new();
    private Dictionary<string, string> systemErrors = new();
    private string systemFormError = "";

    // Variables para Examen Físico
    private List<RegionDTO> availableRegions = new();
    private List<PathologicalEvidenceDTO> availablePathologicalEvidences = new();
    private List<PhysicalExamDTO> physicalExamsList = new();
    private PhysicalExamDTO currentPhysicalExam = new();
    private List<string> physicalExamHeaders = new() { "Región", "Evidencia Patológica", "Observación" };
    private List<List<string>> physicalExamRows = new();
    private List<int> physicalExamIds = new();
    private Dictionary<string, string> physicalExamErrors = new();
    private string physicalExamFormError = "";

    // Variables para Datos Adicionales
    private AdditionalDataDTO? currentAdditionalData;
    private string _additionalDataContent = "";
    private string additionalDataContent
    {
        get => _additionalDataContent;
        set
        {
            if (_additionalDataContent != value)
            {
                _additionalDataContent = value;
                _ = Task.Run(async () => await SaveAdditionalData());
            }
        }
    }

    // Variables para Evolución
    private List<EvolutionDTO> evolutionsList = new();
    private EvolutionDTO currentEvolution = new();
    private List<string> evolutionHeaders = new() { "Observación", "Porcentaje" };
    private List<List<string>> evolutionRows = new();
    private List<int> evolutionIds = new();
    private Dictionary<string, string> evolutionErrors = new();
    private string evolutionFormError = "";

    // Variables para Diagnóstico
    private List<DiagnosticTypeDTO> availableDiagnosticTypes = new();
    private List<MedicalDiagnosisDTO> diagnosisList = new();
    private MedicalDiagnosisDTO currentDiagnosis = new();
    private List<string> diagnosisHeaders = new() { "CIE10", "Denominación", "Tipo Diagnóstico", "Recurrencia", "Motivación Diagnóstico" };
    private List<List<string>> diagnosisRows = new();
    private List<int> diagnosisIds = new();
    private Dictionary<string, string> diagnosisErrors = new();
    private string diagnosisFormError = "";
    private bool _isUnidentifiedCie10 = false;
    private bool isUnidentifiedCie10
    {
        get => _isUnidentifiedCie10;
        set
        {
            _isUnidentifiedCie10 = value;
            if (_isUnidentifiedCie10)
            {
                currentDiagnosis.Cie10 = "No Identificado";
            }
            else
            {
                currentDiagnosis.Cie10 = "";
            }
            StateHasChanged(); // Opcional: solo si necesitas forzar actualización
        }
    }

    // Variables para controlar datos sin guardar
    private bool hasUnsavedSystemsData = false;
    private bool hasUnsavedPhysicalExamData = false;
    private bool hasUnsavedEvolutionData = false;
    private bool hasUnsavedDiagnosisData = false;

    private bool showTreatmentModal = false;
    private MedicalDiagnosisDTO? selectedDiagnosisForTreatment;
    private int currentTreatmentId = 0;

    // Variables para Tratamiento Farmacológico
    private List<MedicineDTO> availableMedicines = new();
    private List<PharmacologicalTreatmentDTO> pharmacologicalList = new();
    private PharmacologicalTreatmentDTO currentPharmacological = new();
    private List<string> pharmacologicalHeaders = new() { "Medicamento", "Dosis", "Frecuencia", "Duración", "Vía Administración" };
    private List<List<string>> pharmacologicalRows = new();
    private List<int> pharmacologicalIds = new();
    private Dictionary<string, string> pharmacologicalErrors = new();
    private string pharmacologicalFormError = "";

    // Variables para Tratamiento No Farmacológico e Indicaciones
    private List<NonPharmacologicalTreatmentDTO> nonPharmacologicalList = new();
    private NonPharmacologicalTreatmentDTO currentNonPharmacological = new();
    private IndicationsDTO? currentIndication = null;
    private string indicationsContent = "";
    private string nonPharmacologicalContent = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadTypeOfServices();
        areaSeleccionada = "Medicina General";
        await LoadHealthProfessionals();
        await LoadTypeOfProcedures();
        await LoadProcedures();
        await LoadLugaresAtencion();
        await LoadSystemsData();
        await LoadPhysicalExamData();
        await LoadDiagnosisData();
        await LoadTreatmentData();

        // Si es modo edición, cargar los datos existentes
        if (MedicalCare != null && MedicalCare.CareId > 0)
        {
            isEditMode = true;
            currentMedicalCareId = MedicalCare.CareId;
            await LoadExistingData();
        }

        // Verificar datos sin guardar al inicializar
        await CheckUnsavedData();
    }

    private async Task CheckUnsavedData()
    {
        if (currentMedicalCareId > 0)
        {
            try
            {
                var systemsData = await JS.InvokeAsync<string>("localStorage.getItem", $"systems_data_{currentMedicalCareId}");
                hasUnsavedSystemsData = !string.IsNullOrEmpty(systemsData);

                var physicalExamData = await JS.InvokeAsync<string>("localStorage.getItem", $"physical_exam_data_{currentMedicalCareId}");
                hasUnsavedPhysicalExamData = !string.IsNullOrEmpty(physicalExamData);

                var evolutionData = await JS.InvokeAsync<string>("localStorage.getItem", $"evolution_data_{currentMedicalCareId}");
                hasUnsavedEvolutionData = !string.IsNullOrEmpty(evolutionData);

                var diagnosisData = await JS.InvokeAsync<string>("localStorage.getItem", $"diagnosis_data_{currentMedicalCareId}");
                hasUnsavedDiagnosisData = !string.IsNullOrEmpty(diagnosisData);
            }
            catch
            {
                hasUnsavedSystemsData = false;
                hasUnsavedPhysicalExamData = false;
                hasUnsavedEvolutionData = false;
                hasUnsavedDiagnosisData = false;
            }
        }
    }

    private bool IsPatientTabComplete()
    {
        return selectedPatientId > 0 &&
               !string.IsNullOrEmpty(lugarSeleccionada) &&
               !string.IsNullOrEmpty(profesionalSeleccionado) &&
               !string.IsNullOrWhiteSpace(motivoConsulta);
    }

    // Métodos para verificar si las pestañas están completas (con ✓)
    private bool IsSystemsTabComplete()
    {
        return systemsList.Any();
    }

    private bool IsPhysicalExamTabComplete()
    {
        return physicalExamsList.Any();
    }

    private bool IsAdditionalDataTabComplete()
    {
        return !string.IsNullOrWhiteSpace(additionalDataContent);
    }

    private bool IsProceduresTabComplete()
    {
        return procedimientosList.Any();
    }

    private bool IsDiagnosisTabComplete()
    {
        return diagnosisList.Any();
    }

    private bool IsEvolutionTabComplete()
    {
        return evolutionsList.Any();
    }

    private void ValidateAndShowErrors()
    {
        showValidationErrors = true;
        StateHasChanged();
    }

    private async Task SetActiveTab(string tab)
    {
        if (tab != "patient" && !IsPatientTabComplete())
        {
            showValidationErrors = true;
            await JS.InvokeVoidAsync("alert", "Debe completar toda la información obligatoria en la pestaña de Selección de Paciente antes de continuar.");
            return;
        }

        if (tab != "patient" && currentMedicalCareId == 0)
        {
            await JS.InvokeVoidAsync("alert", "Debe guardar primero los datos básicos del paciente antes de continuar.");
            return;
        }

        // Verificar datos sin guardar antes de cambiar de pestaña
        if (activeTab == "systems" && tab != "systems")
        {
            await CheckUnsavedData();
            if (hasUnsavedSystemsData)
            {
                bool confirmed = await JS.InvokeAsync<bool>("confirm",
                    "Hay cambios sin guardar en la sección de Aparatos y Sistemas. " +
                    "Para continuar con el siguiente módulo, primero presione el botón 'Guardar' en la tabla. " +
                    "¿Desea continuar sin guardar? (Se perderán los cambios)");

                if (!confirmed)
                {
                    return;
                }
            }
        }

        if (activeTab == "physical-exam" && tab != "physical-exam")
        {
            await CheckUnsavedData();
            if (hasUnsavedPhysicalExamData)
            {
                bool confirmed = await JS.InvokeAsync<bool>("confirm",
                    "Hay cambios sin guardar en la sección de Examen Físico. " +
                    "Para continuar con el siguiente módulo, primero presione el botón 'Guardar' en la tabla. " +
                    "¿Desea continuar sin guardar? (Se perderán los cambios)");

                if (!confirmed)
                {
                    return;
                }
            }
        }

        if (activeTab == "diagnosis" && tab != "diagnosis")
        {
            await CheckUnsavedData();
            if (hasUnsavedDiagnosisData)
            {
                bool confirmed = await JS.InvokeAsync<bool>("confirm",
                    "Hay cambios sin guardar en la sección de Diagnóstico. " +
                    "Para continuar con el siguiente módulo, primero presione el botón 'Guardar' en la tabla. " +
                    "¿Desea continuar sin guardar? (Se perderán los cambios)");

                if (!confirmed)
                {
                    return;
                }
            }
        }

        if (activeTab == "evolution" && tab != "evolution")
        {
            await CheckUnsavedData();
            if (hasUnsavedEvolutionData)
            {
                bool confirmed = await JS.InvokeAsync<bool>("confirm",
                    "Hay cambios sin guardar en la sección de Evolución. " +
                    "Para continuar con el siguiente módulo, primero presione el botón 'Guardar' en la tabla. " +
                    "¿Desea continuar sin guardar? (Se perderán los cambios)");

                if (!confirmed)
                {
                    return;
                }
            }
        }

        activeTab = tab;
        StateHasChanged();
    }

    private async Task LoadExistingData()
    {
        if (MedicalCare == null) return;

        selectedPatientId = MedicalCare.PatientId;
        areaSeleccionada = "Medicina General";
        profesionalSeleccionado = MedicalCare.HealthProfessionalId.ToString();
        lugarSeleccionada = MedicalCare.LocationId.ToString() ?? "";
        selectedHistoryNumber = MedicalCare.NamePatient ?? "";

        var existingReasons = await ReasonForConsultationService.GetByCareIdAsync(MedicalCare.CareId);
        existingReasonForConsultation = existingReasons?.FirstOrDefault();
        if (existingReasonForConsultation != null)
        {
            motivoConsulta = existingReasonForConsultation.Description ?? "";
        }

        var existingProcedures = await MedicalProcedureService.GetAllAsync();
        procedimientosList = existingProcedures?.Where(p => p.CareId == MedicalCare.CareId).ToList() ?? new List<MedicalProcedureDTO>();

        // Cargar sistemas existentes
        systemsList = await ReviewSystemDevicesService.GetByMedicalCareIdAsync(MedicalCare.CareId);
        await RefreshSystemsTable();

        // Cargar exámenes físicos existentes
        physicalExamsList = await PhysicalExamService.GetByMedicalCareIdAsync(MedicalCare.CareId);
        await RefreshPhysicalExamsTable();

        // Cargar datos adicionales existentes
        var existingAdditionalData = await AdditionalDataService.GetByMedicalCareIdAsync(MedicalCare.CareId);
        currentAdditionalData = existingAdditionalData?.FirstOrDefault();
        if (currentAdditionalData != null)
        {
            _additionalDataContent = currentAdditionalData.Observacion ?? "";
        }

        // Cargar diagnósticos existentes
        diagnosisList = await MedicalDiagnosisService.GetByMedicalCareIdAsync(MedicalCare.CareId);
        await RefreshDiagnosisTable();

        // Cargar evoluciones existentes
        evolutionsList = await EvolutionService.GetByMedicalCareIdAsync(MedicalCare.CareId);
        await RefreshEvolutionsTable();

        StateHasChanged();
    }

    private async Task LoadLugaresAtencion()
    {
        lugaresAtencion = await PlaceService.GetAllPlacesAsync();
    }

    private async Task LoadTypeOfServices()
    {
        tipoServicios = await TypeOfServiceService.GetAllAsync();
    }

    private async Task LoadHealthProfessionals()
    {
        profesionales = await HealthProfessionalService.GetAllHealthProfessionalsAsync();
    }

    private async Task LoadTypeOfProcedures()
    {
        tiposProcedimientos = await TypeOfProceduresService.GetAllAsync();
    }

    private async Task LoadProcedures()
    {
        todosProcedimientos = await ProceduresService.GetAllAsync();
    }

    private Task HandlePatientSelected((int ClinicalHistoryId, string MedicalRecordNumber, int PersonId) paciente)
    {
        clinicalHistoryId = paciente.ClinicalHistoryId;
        selectedPatientId = paciente.PersonId;
        selectedHistoryNumber = paciente.MedicalRecordNumber;

        if (selectedPatientId > 0)
        {
            showValidationErrors = false;
        }

        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task GuardarDatosPaciente()
    {
        isSaving = true;
        try
        {
            if (!IsPatientTabComplete())
            {
                showValidationErrors = true;
                await JS.InvokeVoidAsync("alert", "Debe completar toda la información obligatoria antes de guardar.");
                return;
            }

            MedicalCareDTO medicalCareResult;

            if (isEditMode && MedicalCare != null && MedicalCare.CareId > 0)
            {
                // Actualizar atención médica existente
                MedicalCare.Area = areaSeleccionada;
                MedicalCare.HealthProfessionalId = int.Parse(profesionalSeleccionado);
                MedicalCare.LocationId = int.Parse(lugarSeleccionada);

                var updateResult = await MedicalCareService.UpdateAsync(MedicalCare);
                if (!updateResult.Success)
                {
                    await JS.InvokeVoidAsync("alert", $"Error al actualizar la atención médica: {updateResult.Error}");
                    return;
                }

                medicalCareResult = MedicalCare;
                currentMedicalCareId = MedicalCare.CareId;
            }
            else
            {
                // Crear nueva atención médica
                var medicalCareDto = new MedicalCareDTO
                {
                    PatientId = selectedPatientId,
                    HealthProfessionalId = int.Parse(profesionalSeleccionado),
                    LocationId = int.Parse(lugarSeleccionada),
                    Area = areaSeleccionada,
                    CareDate = DateTime.Now
                };

                var result = await MedicalCareService.CreateAsync(medicalCareDto);
                if (!result.Success)
                {
                    await JS.InvokeVoidAsync("alert", $"Error al crear la atención médica: {result.Error}");
                    return;
                }

                medicalCareResult = result.Data;
                currentMedicalCareId = medicalCareResult.CareId;

                // Cambiar a modo edición después de crear
                isEditMode = true;
                MedicalCare = medicalCareResult;
            }

            // Guardar motivo de consulta
            if (!string.IsNullOrWhiteSpace(motivoConsulta))
            {
                var reasonDto = new ReasonForConsultationDTO
                {
                    Id = existingReasonForConsultation?.Id ?? 0,
                    Description = motivoConsulta.Trim(),
                    MedicalCareId = currentMedicalCareId
                };

                if (existingReasonForConsultation != null && existingReasonForConsultation.Id > 0)
                {
                    await ReasonForConsultationService.UpdateAsync(reasonDto);
                }
                else
                {
                    var reasonResult = await ReasonForConsultationService.CreateAsync(reasonDto);
                    if (reasonResult.Success)
                    {
                        existingReasonForConsultation = reasonResult.Data;
                    }
                }
            }

            await JS.InvokeVoidAsync("alert", "Datos básicos guardados exitosamente. Ahora puede continuar con las demás secciones.");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error inesperado: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task FinalizarAtencionMedica()
    {
        isSaving = true;
        try
        {
            if (currentMedicalCareId == 0)
            {
                await JS.InvokeVoidAsync("alert", "No hay una atención médica válida para finalizar.");
                return;
            }

            await OnSaved.InvokeAsync(MedicalCare ?? new MedicalCareDTO { CareId = currentMedicalCareId });
            await JS.InvokeVoidAsync("alert", "Atención médica finalizada exitosamente.");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error inesperado: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    // ============================================================================
    // MÉTODOS PARA DATOS ADICIONALES - USANDO CONTAINERBOX1
    // ============================================================================
    private async Task SaveAdditionalData()
    {
        try
        {
            if (currentMedicalCareId == 0) return;

            if (string.IsNullOrWhiteSpace(additionalDataContent))
            {
                // Si el contenido está vacío y existe un registro, eliminarlo
                if (currentAdditionalData != null && currentAdditionalData.AdditionalDataId > 0)
                {
                    await AdditionalDataService.DeleteAsync(currentAdditionalData.AdditionalDataId);
                    currentAdditionalData = null;
                }
                return;
            }

            if (currentAdditionalData != null && currentAdditionalData.AdditionalDataId > 0)
            {
                // Actualizar existente
                currentAdditionalData.Observacion = additionalDataContent;
                var updateResult = await AdditionalDataService.UpdateAsync(currentAdditionalData);
                if (updateResult.Success && updateResult.Data != null)
                {
                    currentAdditionalData = updateResult.Data;
                }
            }
            else
            {
                // Crear nuevo
                var newAdditionalData = new AdditionalDataDTO
                {
                    AdditionalDataId = 0,
                    Observacion = additionalDataContent,
                    MedicalCareId = currentMedicalCareId
                };

                var createResult = await AdditionalDataService.CreateAsync(newAdditionalData);
                if (createResult.Success && createResult.Data != null)
                {
                    currentAdditionalData = createResult.Data;
                }
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error al guardar datos adicionales: {ex.Message}");
        }
    }

    // Métodos para procedimientos
    private async Task AgregarProcedimiento()
    {
        if (currentMedicalCareId == 0)
        {
            await JS.InvokeVoidAsync("alert", "Debe guardar primero los datos básicos del paciente.");
            return;
        }

        currentProcedure = new MedicalProcedureDTO
        {
            ProcedureId = 0,
            PatientId = selectedPatientId,
            CareId = currentMedicalCareId,
            ProcedureDate = DateTime.Now,
            HealthProfessionalId = int.Parse(profesionalSeleccionado)
        };

        showProcedureModal = true;
        StateHasChanged();
    }

    private async Task EditarProcedimiento(MedicalProcedureDTO procedimiento)
    {
        currentProcedure = new MedicalProcedureDTO
        {
            ProcedureId = procedimiento.ProcedureId,
            PatientId = procedimiento.PatientId,
            HealthProfessionalId = procedimiento.HealthProfessionalId,
            CareId = procedimiento.CareId,
            ProcedureDate = procedimiento.ProcedureDate,
            SpecificProcedureId = procedimiento.SpecificProcedureId,
            TypeOfProcedureId = procedimiento.TypeOfProcedureId,
            TreatingPhysicianId = procedimiento.TreatingPhysicianId,
            Observations = procedimiento.Observations,
            TypeOfProcedureName = procedimiento.TypeOfProcedureName,
            SpecificProcedureName = procedimiento.SpecificProcedureName
        };

        showProcedureModal = true;
        StateHasChanged();
    }

    private async Task EliminarProcedimiento(MedicalProcedureDTO procedimiento)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm",
            $"¿Está seguro de eliminar el procedimiento {procedimiento.SpecificProcedureName}?");

        if (confirmed)
        {
            procedimientosList.Remove(procedimiento);
            StateHasChanged();
        }
    }

    private void OnProcedureSaved(MedicalProcedureDTO procedimiento)
    {
        var existing = procedimientosList.FirstOrDefault(p => p.ProcedureId == procedimiento.ProcedureId);
        if (existing != null)
        {
            var index = procedimientosList.IndexOf(existing);
            procedimientosList[index] = procedimiento;
        }
        else
        {
            procedimientosList.Add(procedimiento);
        }

        CerrarModalProcedimiento();
        StateHasChanged();
    }

    private void CerrarModalProcedimiento()
    {
        showProcedureModal = false;
        currentProcedure = null;
        StateHasChanged();
    }

    // ============================================================================
    // MÉTODOS PARA APARATOS Y SISTEMAS - AHORA PERMITE MÚLTIPLES REGISTROS
    // ============================================================================
    private async Task LoadSystemsData()
    {
        availableSystems = await SystemsDevicesService.GetAllAsync();
    }

    private async Task RefreshSystemsTable()
    {
        systemsRows.Clear();
        systemsIds.Clear();

        foreach (var system in systemsList)
        {
            var systemName = await SystemsDevicesService.GetSystemNameByIdAsync(system.SystemsDevicesId);
            var state = !string.IsNullOrEmpty(system.State)
                ? (system.State.Length > 50 ? system.State.Substring(0, 50) + "..." : system.State)
                : "No especificado";
            var observations = !string.IsNullOrEmpty(system.Observations)
                ? (system.Observations.Length > 50 ? system.Observations.Substring(0, 50) + "..." : system.Observations)
                : "Sin observaciones";

            systemsRows.Add(new List<string> { systemName, state, observations });
            systemsIds.Add(system.Id);
        }

        StateHasChanged();
    }

    private async Task OnAddSystemRequested()
    {
        currentSystem = new ReviewSystemDevicesDTO
        {
            Id = 0,
            MedicalCareId = currentMedicalCareId,
            SystemsDevicesId = 0,
            State = "",
            Observations = ""
        };

        systemErrors.Clear();
        systemFormError = "";
    }

    private async Task OnEditSystemRequested(int id)
    {
        var existing = systemsList.FirstOrDefault(s => s.Id == id);
        if (existing != null)
        {
            currentSystem = new ReviewSystemDevicesDTO
            {
                Id = existing.Id,
                MedicalCareId = existing.MedicalCareId,
                SystemsDevicesId = existing.SystemsDevicesId,
                State = existing.State ?? "",
                Observations = existing.Observations ?? ""
            };
        }

        systemErrors.Clear();
        systemFormError = "";
    }

    private async Task OnDeleteSystemRequested(int id)
    {
        try
        {
            var result = await ReviewSystemDevicesService.DeleteAsync(id);
            if (result.Success)
            {
                var toRemove = systemsList.FirstOrDefault(s => s.Id == id);
                if (toRemove != null)
                {
                    systemsList.Remove(toRemove);
                    await RefreshSystemsTable();
                }
                await JS.InvokeVoidAsync("alert", "Revisión eliminada exitosamente.");
            }
            else
            {
                await JS.InvokeVoidAsync("alert", $"Error al eliminar: {result.Error}");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error inesperado al eliminar: {ex.Message}");
        }
    }

    private async Task OnSaveSystemRequested()
    {
        try
        {
            if (!ValidateSystemForm())
            {
                return;
            }

            // Asegurar que tenemos el MedicalCareId correcto
            currentSystem.MedicalCareId = currentMedicalCareId;

            if (currentSystem.Id == 0)
            {
                // Crear nuevo
                var result = await ReviewSystemDevicesService.CreateAsync(currentSystem);
                if (result.Success && result.Data != null)
                {
                    systemsList.Add(result.Data);
                    await RefreshSystemsTable();
                    await JS.InvokeVoidAsync("alert", "Revisión agregada exitosamente.");

                    // Limpiar localStorage después de guardar exitosamente
                    await JS.InvokeVoidAsync("localStorage.removeItem", $"systems_data_{currentMedicalCareId}");
                    hasUnsavedSystemsData = false;
                }
                else
                {
                    systemFormError = result.Error;
                    await JS.InvokeVoidAsync("alert", $"Error al crear: {result.Error}");
                    return;
                }
            }
            else
            {
                // Actualizar existente
                var result = await ReviewSystemDevicesService.UpdateAsync(currentSystem);
                if (result.Success && result.Data != null)
                {
                    var index = systemsList.FindIndex(s => s.Id == currentSystem.Id);
                    if (index >= 0)
                    {
                        systemsList[index] = result.Data;
                        await RefreshSystemsTable();
                    }
                    await JS.InvokeVoidAsync("alert", "Revisión actualizada exitosamente.");

                    // Limpiar localStorage después de actualizar exitosamente
                    await JS.InvokeVoidAsync("localStorage.removeItem", $"systems_data_{currentMedicalCareId}");
                    hasUnsavedSystemsData = false;
                }
                else
                {
                    systemFormError = result.Error;
                    await JS.InvokeVoidAsync("alert", $"Error al actualizar: {result.Error}");
                    return;
                }
            }

            // Limpiar el formulario
            currentSystem = new ReviewSystemDevicesDTO();
            systemErrors.Clear();
            systemFormError = "";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            systemFormError = $"Error inesperado: {ex.Message}";
            await JS.InvokeVoidAsync("alert", systemFormError);
        }
    }

    private bool ValidateSystemForm()
    {
        systemErrors.Clear();
        systemFormError = "";
        bool isValid = true;

        if (currentSystem.SystemsDevicesId <= 0)
        {
            systemErrors["SystemsDevicesId"] = "Debe seleccionar un tipo de aparato o sistema.";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(currentSystem.State))
        {
            systemErrors["State"] = "El estado es obligatorio.";
            isValid = false;
        }
        else if (currentSystem.State.Length > 500)
        {
            systemErrors["State"] = "El estado no puede exceder 500 caracteres.";
            isValid = false;
        }

        if (!string.IsNullOrEmpty(currentSystem.Observations) && currentSystem.Observations.Length > 1000)
        {
            systemErrors["Observations"] = "Las observaciones no pueden exceder 1000 caracteres.";
            isValid = false;
        }

        if (!isValid)
        {
            systemFormError = "Por favor, corrija los errores antes de continuar.";
        }

        return isValid;
    }

    private bool IsSystemFormValid()
    {
        return currentSystem.SystemsDevicesId > 0 &&
               !string.IsNullOrWhiteSpace(currentSystem.State) &&
               (currentSystem.State?.Length ?? 0) <= 500 &&
               (currentSystem.Observations?.Length ?? 0) <= 1000;
    }

    // ============================================================================
    // MÉTODOS PARA EXAMEN FÍSICO - AHORA PERMITE MÚLTIPLES REGISTROS
    // ============================================================================
    private async Task LoadPhysicalExamData()
    {
        availableRegions = await RegionService.GetAllAsync();
        availablePathologicalEvidences = await PathologicalEvidenceService.GetAllAsync();
    }

    private async Task RefreshPhysicalExamsTable()
    {
        physicalExamRows.Clear();
        physicalExamIds.Clear();

        foreach (var exam in physicalExamsList)
        {
            var regionName = await RegionService.GetRegionNameByIdAsync(exam.RegionId);
            var evidenceName = await PathologicalEvidenceService.GetPathologicalEvidenceNameByIdAsync(exam.PathologicalEvidenceId);
            var observation = !string.IsNullOrEmpty(exam.Observation)
                 ? (exam.Observation.Length > 50 ? exam.Observation.Substring(0, 50) + "..." : exam.Observation)
                : "Sin observación";

            physicalExamRows.Add(new List<string> { regionName, evidenceName, observation });
            physicalExamIds.Add(exam.PhysicalExamId);
        }

        StateHasChanged();
    }

    private async Task OnAddPhysicalExamRequested()
    {
        currentPhysicalExam = new PhysicalExamDTO
        {
            PhysicalExamId = 0,
            MedicalCareId = currentMedicalCareId,
            RegionId = 0,
            PathologicalEvidenceId = 0,
            Observation = ""
        };

        physicalExamErrors.Clear();
        physicalExamFormError = "";
    }

    private async Task OnEditPhysicalExamRequested(int id)
    {
        var existing = physicalExamsList.FirstOrDefault(e => e.PhysicalExamId == id);
        if (existing != null)
        {
            currentPhysicalExam = new PhysicalExamDTO
            {
                PhysicalExamId = existing.PhysicalExamId,
                MedicalCareId = existing.MedicalCareId,
                RegionId = existing.RegionId,
                PathologicalEvidenceId = existing.PathologicalEvidenceId,
                Observation = existing.Observation ?? ""
            };
        }

        physicalExamErrors.Clear();
        physicalExamFormError = "";
    }

    private async Task OnDeletePhysicalExamRequested(int id)
    {
        try
        {
            var result = await PhysicalExamService.DeleteAsync(id);
            if (result.Success)
            {
                var toRemove = physicalExamsList.FirstOrDefault(e => e.PhysicalExamId == id);
                if (toRemove != null)
                {
                    physicalExamsList.Remove(toRemove);
                    await RefreshPhysicalExamsTable();
                }
                await JS.InvokeVoidAsync("alert", "Examen físico eliminado exitosamente.");
            }
            else
            {
                await JS.InvokeVoidAsync("alert", $"Error al eliminar: {result.Error}");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error inesperado al eliminar: {ex.Message}");
        }
    }

    private async Task OnSavePhysicalExamRequested()
    {
        try
        {
            if (!ValidatePhysicalExamForm())
            {
                return;
            }

            // Asegurar que tenemos el MedicalCareId correcto
            currentPhysicalExam.MedicalCareId = currentMedicalCareId;

            if (currentPhysicalExam.PhysicalExamId == 0)
            {
                // Crear nuevo
                var result = await PhysicalExamService.CreateAsync(currentPhysicalExam);
                if (result.Success && result.Data != null)
                {
                    physicalExamsList.Add(result.Data);
                    await RefreshPhysicalExamsTable();
                    await JS.InvokeVoidAsync("alert", "Examen físico agregado exitosamente.");

                    // Limpiar localStorage después de guardar exitosamente
                    await JS.InvokeVoidAsync("localStorage.removeItem", $"physical_exam_data_{currentMedicalCareId}");
                    hasUnsavedPhysicalExamData = false;
                }
                else
                {
                    physicalExamFormError = result.Error;
                    await JS.InvokeVoidAsync("alert", $"Error al crear: {result.Error}");
                    return;
                }
            }
            else
            {
                // Actualizar existente
                var result = await PhysicalExamService.UpdateAsync(currentPhysicalExam);
                if (result.Success && result.Data != null)
                {
                    var index = physicalExamsList.FindIndex(e => e.PhysicalExamId == currentPhysicalExam.PhysicalExamId);
                    if (index >= 0)
                    {
                        physicalExamsList[index] = result.Data;
                        await RefreshPhysicalExamsTable();
                    }
                    await JS.InvokeVoidAsync("alert", "Examen físico actualizado exitosamente.");

                    // Limpiar localStorage después de actualizar exitosamente
                    await JS.InvokeVoidAsync("localStorage.removeItem", $"physical_exam_data_{currentMedicalCareId}");
                    hasUnsavedPhysicalExamData = false;
                }
                else
                {
                    physicalExamFormError = result.Error;
                    await JS.InvokeVoidAsync("alert", $"Error al actualizar: {result.Error}");
                    return;
                }
            }

            // Limpiar el formulario
            currentPhysicalExam = new PhysicalExamDTO();
            physicalExamErrors.Clear();
            physicalExamFormError = "";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            physicalExamFormError = $"Error inesperado: {ex.Message}";
            await JS.InvokeVoidAsync("alert", physicalExamFormError);
        }
    }

    private bool ValidatePhysicalExamForm()
    {
        physicalExamErrors.Clear();
        physicalExamFormError = "";
        bool isValid = true;

        if (currentPhysicalExam.RegionId <= 0)
        {
            physicalExamErrors["RegionId"] = "Debe seleccionar una región.";
            isValid = false;
        }

        if (currentPhysicalExam.PathologicalEvidenceId <= 0)
        {
            physicalExamErrors["PathologicalEvidenceId"] = "Debe seleccionar una evidencia patológica.";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(currentPhysicalExam.Observation))
        {
            physicalExamErrors["Observation"] = "La observación es obligatoria.";
            isValid = false;
        }
        else if (currentPhysicalExam.Observation.Length > 500)
        {
            physicalExamErrors["Observation"] = "La observación no puede exceder 500 caracteres.";
            isValid = false;
        }

        if (!isValid)
        {
            physicalExamFormError = "Por favor, corrija los errores antes de continuar.";
        }

        return isValid;
    }

    private bool IsPhysicalExamFormValid()
    {
        return currentPhysicalExam.RegionId > 0 &&
               currentPhysicalExam.PathologicalEvidenceId > 0 &&
               !string.IsNullOrWhiteSpace(currentPhysicalExam.Observation) &&
               (currentPhysicalExam.Observation?.Length ?? 0) <= 500;
    }

    // ============================================================================
    // MÉTODOS PARA DIAGNÓSTICO - PERMITE MÚLTIPLES REGISTROS
    // ============================================================================
    private async Task LoadDiagnosisData()
    {
        availableDiagnosticTypes = await DiagnosticTypeService.GetAllAsync();
    }

    private async Task RefreshDiagnosisTable()
    {
        diagnosisRows.Clear();
        diagnosisIds.Clear();

        foreach (var diagnosis in diagnosisList)
        {
            var cie10 = !string.IsNullOrEmpty(diagnosis.Cie10) ? diagnosis.Cie10 : "N/A";
            var denomination = !string.IsNullOrEmpty(diagnosis.Denomination)
                ? (diagnosis.Denomination.Length > 50 ? diagnosis.Denomination.Substring(0, 50) + "..." : diagnosis.Denomination)
                : "Sin denominación";
            var diagnosticTypeName = await DiagnosticTypeService.GetDiagnosticTypeNameByIdAsync(diagnosis.DiagnosticTypeId);
            var recurrence = !string.IsNullOrEmpty(diagnosis.Recurrence)
                ? (diagnosis.Recurrence.Length > 30 ? diagnosis.Recurrence.Substring(0, 30) + "..." : diagnosis.Recurrence)
                : "Sin recurrencia";
            var motivation = !string.IsNullOrEmpty(diagnosis.DiagnosisMotivation)
                ? (diagnosis.DiagnosisMotivation.Length > 40 ? diagnosis.DiagnosisMotivation.Substring(0, 40) + "..." : diagnosis.DiagnosisMotivation)
                : "Sin motivación";

            diagnosisRows.Add(new List<string> { cie10, denomination, diagnosticTypeName, recurrence, motivation });
            diagnosisIds.Add(diagnosis.Id);
        }

        StateHasChanged();
    }

    private async Task OnAddDiagnosisRequested()
    {
        currentDiagnosis = new MedicalDiagnosisDTO
        {
            Id = 0,
            MedicalCareId = currentMedicalCareId,
            Cie10 = "",
            Denomination = "",
            DiagnosticTypeId = 0,
            Recurrence = "",
            DiagnosisMotivation = ""
        };

        diagnosisErrors.Clear();
        diagnosisFormError = "";
        isUnidentifiedCie10 = false;
    }

    private async Task OnEditDiagnosisRequested(int id)
    {
        var existing = diagnosisList.FirstOrDefault(d => d.Id == id);
        if (existing != null)
        {
            currentDiagnosis = new MedicalDiagnosisDTO
            {
                Id = existing.Id,
                MedicalCareId = existing.MedicalCareId,
                Cie10 = existing.Cie10 ?? "",
                Denomination = existing.Denomination ?? "",
                DiagnosticTypeId = existing.DiagnosticTypeId,
                Recurrence = existing.Recurrence ?? "",
                DiagnosisMotivation = existing.DiagnosisMotivation ?? "",
                DiseaseId = existing.DiseaseId
            };

            isUnidentifiedCie10 = existing.Cie10 == "No Identificado";
        }

        diagnosisErrors.Clear();
        diagnosisFormError = "";
    }


    private async Task OnDeleteDiagnosisRequested(int id)
    {
        try
        {
            var result = await MedicalDiagnosisService.DeleteAsync(id);
            if (result.Success)
            {
                var toRemove = diagnosisList.FirstOrDefault(d => d.Id == id);
                if (toRemove != null)
                {
                    diagnosisList.Remove(toRemove);
                    await RefreshDiagnosisTable();
                }
                await JS.InvokeVoidAsync("alert", "Diagnóstico eliminado exitosamente.");
            }
            else
            {
                await JS.InvokeVoidAsync("alert", $"Error al eliminar: {result.Error}");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error inesperado al eliminar: {ex.Message}");
        }
    }

    private async Task OnSaveDiagnosisRequested()
    {
        try
        {
            if (!ValidateDiagnosisForm())
            {
                return;
            }

            // Asegurar que tenemos el MedicalCareId correcto
            currentDiagnosis.MedicalCareId = currentMedicalCareId;

            if (currentDiagnosis.Id == 0)
            {
                // Crear nuevo
                var result = await MedicalDiagnosisService.CreateAsync(currentDiagnosis);
                if (result.Success && result.Data != null)
                {
                    diagnosisList.Add(result.Data);
                    await RefreshDiagnosisTable();
                    await JS.InvokeVoidAsync("alert", "Diagnóstico agregado exitosamente.");

                    // Limpiar localStorage después de guardar exitosamente
                    await JS.InvokeVoidAsync("localStorage.removeItem", $"diagnosis_data_{currentMedicalCareId}");
                    hasUnsavedDiagnosisData = false;
                }
                else
                {
                    diagnosisFormError = result.Error;
                    await JS.InvokeVoidAsync("alert", $"Error al crear: {result.Error}");
                    return;
                }
            }
            else
            {
                // Actualizar existente
                var result = await MedicalDiagnosisService.UpdateAsync(currentDiagnosis);
                if (result.Success && result.Data != null)
                {
                    var index = diagnosisList.FindIndex(d => d.Id == currentDiagnosis.Id);
                    if (index >= 0)
                    {
                        diagnosisList[index] = result.Data;
                        await RefreshDiagnosisTable();
                    }
                    await JS.InvokeVoidAsync("alert", "Diagnóstico actualizado exitosamente.");

                    // Limpiar localStorage después de actualizar exitosamente
                    await JS.InvokeVoidAsync("localStorage.removeItem", $"diagnosis_data_{currentMedicalCareId}");
                    hasUnsavedDiagnosisData = false;
                }
                else
                {
                    diagnosisFormError = result.Error;
                    await JS.InvokeVoidAsync("alert", $"Error al actualizar: {result.Error}");
                    return;
                }
            }

            // Limpiar el formulario
            currentDiagnosis = new MedicalDiagnosisDTO();
            diagnosisErrors.Clear();
            diagnosisFormError = "";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            diagnosisFormError = $"Error inesperado: {ex.Message}";
            await JS.InvokeVoidAsync("alert", diagnosisFormError);
        }
    }

    private bool ValidateDiagnosisForm()
    {
        diagnosisErrors.Clear();
        diagnosisFormError = "";
        bool isValid = true;

        if (string.IsNullOrWhiteSpace(currentDiagnosis.Cie10))
        {
            diagnosisErrors["Cie10"] = "El código CIE10 es obligatorio.";
            isValid = false;
        }
        else if (currentDiagnosis.Cie10.Length > 20)
        {
            diagnosisErrors["Cie10"] = "El código CIE10 no puede exceder 20 caracteres.";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(currentDiagnosis.Denomination))
        {
            diagnosisErrors["Denomination"] = "La denominación es obligatoria.";
            isValid = false;
        }
        else if (currentDiagnosis.Denomination.Length > 500)
        {
            diagnosisErrors["Denomination"] = "La denominación no puede exceder 500 caracteres.";
            isValid = false;
        }

        if (currentDiagnosis.DiagnosticTypeId <= 0)
        {
            diagnosisErrors["DiagnosticTypeId"] = "Debe seleccionar un tipo de diagnóstico.";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(currentDiagnosis.Recurrence))
        {
            diagnosisErrors["Recurrence"] = "La recurrencia es obligatoria.";
            isValid = false;
        }
        else if (currentDiagnosis.Recurrence.Length > 500)
        {
            diagnosisErrors["Recurrence"] = "La recurrencia no puede exceder 500 caracteres.";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(currentDiagnosis.DiagnosisMotivation))
        {
            diagnosisErrors["DiagnosisMotivation"] = "La motivación del diagnóstico es obligatoria.";
            isValid = false;
        }
        else if (currentDiagnosis.DiagnosisMotivation.Length > 1000)
        {
            diagnosisErrors["DiagnosisMotivation"] = "La motivación del diagnóstico no puede exceder 1000 caracteres.";
            isValid = false;
        }

        if (!isValid)
        {
            diagnosisFormError = "Por favor, corrija los errores antes de continuar.";
        }

        return isValid;
    }

    private bool IsDiagnosisFormValid()
    {
        return !string.IsNullOrWhiteSpace(currentDiagnosis.Cie10) &&
               (currentDiagnosis.Cie10?.Length ?? 0) <= 20 &&
               !string.IsNullOrWhiteSpace(currentDiagnosis.Denomination) &&
               (currentDiagnosis.Denomination?.Length ?? 0) <= 500 &&
               currentDiagnosis.DiagnosticTypeId > 0 &&
               !string.IsNullOrWhiteSpace(currentDiagnosis.Recurrence) &&
               (currentDiagnosis.Recurrence?.Length ?? 0) <= 500 &&
               !string.IsNullOrWhiteSpace(currentDiagnosis.DiagnosisMotivation) &&
               (currentDiagnosis.DiagnosisMotivation?.Length ?? 0) <= 1000;
    }

    // ============================================================================
    // MÉTODOS PARA EVOLUCIÓN - PERMITE MÚLTIPLES REGISTROS
    // ============================================================================
    private async Task RefreshEvolutionsTable()
    {
        evolutionRows.Clear();
        evolutionIds.Clear();

        foreach (var evolution in evolutionsList)
        {
            var description = !string.IsNullOrEmpty(evolution.Description)
                ? (evolution.Description.Length > 50 ? evolution.Description.Substring(0, 50) + "..." : evolution.Description)
                : "Sin descripción";
            var percentage = $"{evolution.Percentage:F1}%";

            evolutionRows.Add(new List<string> { description, percentage });
            evolutionIds.Add(evolution.Id);
        }

        StateHasChanged();
    }

    private async Task OnAddEvolutionRequested()
    {
        currentEvolution = new EvolutionDTO
        {
            Id = 0,
            MedicalCareId = currentMedicalCareId,
            Description = "",
            Percentage = 0
        };

        evolutionErrors.Clear();
        evolutionFormError = "";
    }

    private async Task OnEditEvolutionRequested(int id)
    {
        var existing = evolutionsList.FirstOrDefault(e => e.Id == id);
        if (existing != null)
        {
            currentEvolution = new EvolutionDTO
            {
                Id = existing.Id,
                MedicalCareId = existing.MedicalCareId,
                Description = existing.Description ?? "",
                Percentage = existing.Percentage
            };
        }

        evolutionErrors.Clear();
        evolutionFormError = "";
    }

    private async Task OnDeleteEvolutionRequested(int id)
    {
        try
        {
            var result = await EvolutionService.DeleteAsync(id);
            if (result.Success)
            {
                var toRemove = evolutionsList.FirstOrDefault(e => e.Id == id);
                if (toRemove != null)
                {
                    evolutionsList.Remove(toRemove);
                    await RefreshEvolutionsTable();
                }
                await JS.InvokeVoidAsync("alert", "Evolución eliminada exitosamente.");
            }
            else
            {
                await JS.InvokeVoidAsync("alert", $"Error al eliminar: {result.Error}");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error inesperado al eliminar: {ex.Message}");
        }
    }

    private async Task OnSaveEvolutionRequested()
    {
        try
        {
            if (!ValidateEvolutionForm())
            {
                return;
            }

            // Asegurar que tenemos el MedicalCareId correcto
            currentEvolution.MedicalCareId = currentMedicalCareId;

            if (currentEvolution.Id == 0)
            {
                // Crear nuevo
                var result = await EvolutionService.CreateAsync(currentEvolution);
                if (result.Success && result.Data != null)
                {
                    evolutionsList.Add(result.Data);
                    await RefreshEvolutionsTable();
                    await JS.InvokeVoidAsync("alert", "Evolución agregada exitosamente.");

                    // Limpiar localStorage después de guardar exitosamente
                    await JS.InvokeVoidAsync("localStorage.removeItem", $"evolution_data_{currentMedicalCareId}");
                    hasUnsavedEvolutionData = false;
                }
                else
                {
                    evolutionFormError = result.Error;
                    await JS.InvokeVoidAsync("alert", $"Error al crear: {result.Error}");
                    return;
                }
            }
            else
            {
                // Actualizar existente
                var result = await EvolutionService.UpdateAsync(currentEvolution);
                if (result.Success && result.Data != null)
                {
                    var index = evolutionsList.FindIndex(e => e.Id == currentEvolution.Id);
                    if (index >= 0)
                    {
                        evolutionsList[index] = result.Data;
                        await RefreshEvolutionsTable();
                    }
                    await JS.InvokeVoidAsync("alert", "Evolución actualizada exitosamente.");

                    // Limpiar localStorage después de actualizar exitosamente
                    await JS.InvokeVoidAsync("localStorage.removeItem", $"evolution_data_{currentMedicalCareId}");
                    hasUnsavedEvolutionData = false;
                }
                else
                {
                    evolutionFormError = result.Error;
                    await JS.InvokeVoidAsync("alert", $"Error al actualizar: {result.Error}");
                    return;
                }
            }

            // Limpiar el formulario
            currentEvolution = new EvolutionDTO();
            evolutionErrors.Clear();
            evolutionFormError = "";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            evolutionFormError = $"Error inesperado: {ex.Message}";
            await JS.InvokeVoidAsync("alert", evolutionFormError);
        }
    }

    private bool ValidateEvolutionForm()
    {
        evolutionErrors.Clear();
        evolutionFormError = "";
        bool isValid = true;

        if (string.IsNullOrWhiteSpace(currentEvolution.Description))
        {
            evolutionErrors["Description"] = "La observación es obligatoria.";
            isValid = false;
        }
        else if (currentEvolution.Description.Length > 1000)
        {
            evolutionErrors["Description"] = "La observación no puede exceder 1000 caracteres.";
            isValid = false;
        }

        if (currentEvolution.Percentage < 0 || currentEvolution.Percentage > 100)
        {
            evolutionErrors["Percentage"] = "El porcentaje debe estar entre 0 y 100.";
            isValid = false;
        }

        if (!isValid)
        {
            evolutionFormError = "Por favor, corrija los errores antes de continuar.";
        }

        return isValid;
    }

    private bool IsEvolutionFormValid()
    {
        return !string.IsNullOrWhiteSpace(currentEvolution.Description) &&
               (currentEvolution.Description?.Length ?? 0) <= 1000 &&
               currentEvolution.Percentage >= 0 &&
               currentEvolution.Percentage <= 100;
    }

    private async Task LoadTreatmentData()
    {
        try
        {
            availableMedicines = await MedicineService.GetAllAsync() ?? new List<MedicineDTO>();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", $"Error loading treatment data: {ex.Message}");
        }
    }

    private async Task OpenTreatmentModal(int diagnosisId)
    {
        selectedDiagnosisForTreatment = diagnosisList.FirstOrDefault(d => d.Id == diagnosisId);
        if (selectedDiagnosisForTreatment != null)
        {
            await LoadTreatmentForDiagnosis(diagnosisId);
            showTreatmentModal = true;
        }
    }

    private void CloseTreatmentModal()
    {
        showTreatmentModal = false;
        selectedDiagnosisForTreatment = null;
        currentTreatmentId = 0;
        ClearTreatmentData();
    }

    private async Task LoadTreatmentForDiagnosis(int diagnosisId)
    {
        try
        {
            currentTreatmentId = 0; // Reset

            // Cargar datos existentes directamente por diagnóstico
            await LoadPharmacologicalTreatments(diagnosisId);
            await LoadNonPharmacologicalTreatment(diagnosisId);
            await LoadIndications(diagnosisId);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", $"Error loading treatment for diagnosis: {ex.Message}");
        }
    }

    private async Task LoadPharmacologicalTreatments(int diagnosisId)
    {
        try
        {
            pharmacologicalList = await PharmacologicalTreatmentService.GetByMedicalDiagnosisIdAsync(diagnosisId) ?? new List<PharmacologicalTreatmentDTO>();
            UpdatePharmacologicalRows();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", $"Error loading pharmacological treatments: {ex.Message}");
        }
    }

    private async Task LoadNonPharmacologicalTreatment(int diagnosisId)
    {
        try
        {
            nonPharmacologicalList = await NonPharmacologicalTreatmentService.GetByMedicalDiagnosisIdAsync(diagnosisId) ?? new List<NonPharmacologicalTreatmentDTO>();

            // Cargar el contenido del primer tratamiento no farmacológico si existe
            var firstNonPharmacological = nonPharmacologicalList.FirstOrDefault();
            nonPharmacologicalContent = firstNonPharmacological?.Description ?? "";
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", $"Error loading non-pharmacological treatment: {ex.Message}");
        }
    }

    private async Task SaveNonPharmacologicalTreatment()
    {
        try
        {
            if (selectedDiagnosisForTreatment == null || selectedDiagnosisForTreatment.Id <= 0)
                return;

            if (string.IsNullOrWhiteSpace(nonPharmacologicalContent))
            {
                // Si el contenido está vacío y existe un registro, eliminarlo
                var existingTreatment = nonPharmacologicalList.FirstOrDefault();
                if (existingTreatment != null && existingTreatment.Id > 0)
                {
                    await NonPharmacologicalTreatmentService.DeleteAsync(existingTreatment.Id);
                    nonPharmacologicalList.Clear();
                }
                return;
            }

            var existingNonPharmacological = nonPharmacologicalList.FirstOrDefault();

            if (existingNonPharmacological != null && existingNonPharmacological.Id > 0)
            {
                // Actualizar existente
                existingNonPharmacological.Description = nonPharmacologicalContent;
                var updateResult = await NonPharmacologicalTreatmentService.UpdateAsync(existingNonPharmacological);
                if (updateResult.Success && updateResult.Data != null)
                {
                    var index = nonPharmacologicalList.FindIndex(n => n.Id == existingNonPharmacological.Id);
                    if (index >= 0)
                    {
                        nonPharmacologicalList[index] = updateResult.Data;
                    }
                }
            }
            else
            {
                // Crear nuevo
                var newNonPharmacological = new NonPharmacologicalTreatmentDTO
                    {
                        Id = 0,
                        MedicalDiagnosisId = selectedDiagnosisForTreatment.Id,
                        Description = nonPharmacologicalContent,
                    };

                var createResult = await NonPharmacologicalTreatmentService.CreateAsync(newNonPharmacological);
                if (createResult.Success && createResult.Data != null)
                {
                    nonPharmacologicalList.Add(createResult.Data);
                }
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error al guardar tratamiento no farmacológico: {ex.Message}");
        }
    }

    private async Task LoadIndications(int diagnosisId)
    {
        try
        {
            // Obtener la indicación existente para este diagnóstico
            currentIndication = await IndicationsService.GetByMedicalDiagnosisIdAsync(diagnosisId);
            indicationsContent = currentIndication?.Description ?? "";
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", $"Error loading indications: {ex.Message}");
            indicationsContent = "";
        }
    }

    private async Task SaveIndications()
    {
        try
        {
            if (selectedDiagnosisForTreatment == null || selectedDiagnosisForTreatment.Id <= 0)
                return;

            if (string.IsNullOrWhiteSpace(indicationsContent))
            {
                // Si el contenido está vacío, eliminar las indicaciones existentes
                if (currentIndication != null && currentIndication.Id > 0)
                {
                    var deleteResult = await IndicationsService.DeleteByMedicalDiagnosisIdAsync(selectedDiagnosisForTreatment.Id);
                    if (deleteResult.Success)
                    {
                        currentIndication = null;
                    }
                }
                return;
            }

            // Crear o actualizar la indicación para este diagnóstico
            var result = await IndicationsService.CreateOrUpdateForDiagnosisAsync(selectedDiagnosisForTreatment.Id, indicationsContent);

            if (result.Success && result.Data != null)
            {
                currentIndication = result.Data;
            }
            else
            {
                await JS.InvokeVoidAsync("console.error", $"Error al guardar indicaciones: {result.Error}");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", $"Error al guardar indicaciones: {ex.Message}");
        }
    }

    private void ClearTreatmentData()
    {
        pharmacologicalList.Clear();
        pharmacologicalRows.Clear();
        pharmacologicalIds.Clear();
        nonPharmacologicalContent = "";
        indicationsContent = "";
        currentPharmacological = new PharmacologicalTreatmentDTO();
        pharmacologicalErrors.Clear();
        pharmacologicalFormError = "";
    }

    private void UpdatePharmacologicalRows()
    {
        pharmacologicalRows.Clear();
        pharmacologicalIds.Clear();

        foreach (var pharma in pharmacologicalList)
        {
            var medicine = availableMedicines.FirstOrDefault(m => m.Id == pharma.MedicineId);
            pharmacologicalRows.Add(new List<string>
            {
                medicine?.Name ?? "Medicamento no encontrado",
                pharma.Dose.ToString(),
                pharma.Frequency ?? "",
                pharma.Duration ?? "",
                pharma.ViaAdmission ?? ""
            });
            pharmacologicalIds.Add(pharma.Id);
        }
    }

    private void OnAddPharmacologicalRequested()
    {
        currentPharmacological = new PharmacologicalTreatmentDTO
            {
                Id = 0,
                MedicalDiagnosisId = selectedDiagnosisForTreatment?.Id ?? 0,
                Dose = 1,
                Frequency = "",
                Duration = "",
                ViaAdmission = "",
                MedicineId = 0
            };
        pharmacologicalErrors.Clear();
        pharmacologicalFormError = "";
    }

    private void OnEditPharmacologicalRequested(int id)
    {
        var pharma = pharmacologicalList.FirstOrDefault(p => p.Id == id);
        if (pharma != null)
        {
            currentPharmacological = new PharmacologicalTreatmentDTO
                {
                    Id = pharma.Id,
                    MedicalDiagnosisId = pharma.MedicalDiagnosisId, 
                    Description = pharma.Description,
                    Dose = pharma.Dose,
                    Frequency = pharma.Frequency,
                    Duration = pharma.Duration,
                    ViaAdmission = pharma.ViaAdmission,
                    MedicineId = pharma.MedicineId
                };
        }
        pharmacologicalErrors.Clear();
        pharmacologicalFormError = "";
    }

    private async Task OnDeletePharmacologicalRequested(int id)
    {
        try
        {
            var result = await PharmacologicalTreatmentService.DeleteAsync(id);
            if (result.Success)
            {
                pharmacologicalList.RemoveAll(p => p.Id == id);
                UpdatePharmacologicalRows();
                await JS.InvokeVoidAsync("alert", "Medicamento eliminado correctamente.");
            }
            else
            {
                await JS.InvokeVoidAsync("alert", $"Error al eliminar medicamento: {result.Error}");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error al eliminar medicamento: {ex.Message}");
        }
    }

    private async Task OnSavePharmacologicalRequested()
    {
        try
        {
            if (!ValidatePharmacologicalForm())
                return;

            // ✅ Asegurar que tenemos el MedicalDiagnosisId correcto
            if (currentPharmacological.MedicalDiagnosisId <= 0)
            {
                currentPharmacological.MedicalDiagnosisId = selectedDiagnosisForTreatment?.Id ?? 0;
            }

            if (currentPharmacological.MedicalDiagnosisId <= 0)
            {
                pharmacologicalFormError = "Error: No se pudo identificar el diagnóstico médico.";
                return;
            }

            if (currentPharmacological.Id == 0)
            {
                var result = await PharmacologicalTreatmentService.CreateAsync(currentPharmacological);
                if (result.Success && result.Data != null)
                {
                    pharmacologicalList.Add(result.Data);
                    await JS.InvokeVoidAsync("alert", "Medicamento agregado correctamente.");
                }
                else
                {
                    pharmacologicalFormError = result.Error;
                    await JS.InvokeVoidAsync("alert", $"Error al agregar medicamento: {result.Error}");
                    return;
                }
            }
            else
            {
                var result = await PharmacologicalTreatmentService.UpdateAsync(currentPharmacological);
                if (result.Success && result.Data != null)
                {
                    var index = pharmacologicalList.FindIndex(p => p.Id == currentPharmacological.Id);
                    if (index >= 0)
                    {
                        pharmacologicalList[index] = result.Data;
                    }
                    await JS.InvokeVoidAsync("alert", "Medicamento actualizado correctamente.");
                }
                else
                {
                    pharmacologicalFormError = result.Error;
                    await JS.InvokeVoidAsync("alert", $"Error al actualizar medicamento: {result.Error}");
                    return;
                }
            }

            UpdatePharmacologicalRows();
            currentPharmacological = new PharmacologicalTreatmentDTO();
            pharmacologicalErrors.Clear();
            pharmacologicalFormError = "";
        }
        catch (Exception ex)
        {
            pharmacologicalFormError = ex.Message;
            await JS.InvokeVoidAsync("alert", $"Error inesperado: {ex.Message}");
        }
    }

    private bool ValidatePharmacologicalForm()
    {
        pharmacologicalErrors.Clear();
        pharmacologicalFormError = "";

        if (currentPharmacological.MedicalDiagnosisId <= 0)
            pharmacologicalErrors["MedicalDiagnosisId"] = "El diagnóstico médico es requerido";

        if (currentPharmacological.MedicineId <= 0)
            pharmacologicalErrors["MedicineId"] = "Debe seleccionar un medicamento";

        if (currentPharmacological.Dose <= 0)
            pharmacologicalErrors["Dose"] = "La dosis debe ser mayor a 0";

        if (string.IsNullOrWhiteSpace(currentPharmacological.Frequency))
            pharmacologicalErrors["Frequency"] = "La frecuencia es obligatoria";

        if (string.IsNullOrWhiteSpace(currentPharmacological.Duration))
            pharmacologicalErrors["Duration"] = "La duración es obligatoria";

        if (string.IsNullOrWhiteSpace(currentPharmacological.ViaAdmission))
            pharmacologicalErrors["ViaAdmission"] = "La vía de administración es obligatoria";

        return !pharmacologicalErrors.Any();
    }

    private bool IsPharmacologicalFormValid()
    {
        return currentPharmacological.MedicineId > 0 &&
               currentPharmacological.Dose > 0 &&
               !string.IsNullOrWhiteSpace(currentPharmacological.Frequency) &&
               !string.IsNullOrWhiteSpace(currentPharmacological.Duration) &&
               !string.IsNullOrWhiteSpace(currentPharmacological.ViaAdmission);
    }
}
