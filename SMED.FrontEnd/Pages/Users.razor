@page "/users"
@layout MainLayout
@using SMED.FrontEnd.Components
@using SMED.Shared.Entity
@using SMED.Shared.DTOs
@using SMED.FrontEnd.Services
@inject UserService UserService
@inject PersonService PersonService
@inject HealthProfessionalService HealthProfessionalService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject HttpClient Http

<h3 class="mb-4">Gestión de Usuarios</h3>

<!-- ✅ Buscador de profesionales -->
<div class="search-container mb-4">
    <div class="card">
        <div class="card-header">
            <h6 class="mb-0">
                <i class="fas fa-search me-2"></i>
                Buscar Profesional de Salud
            </h6>
        </div>
        <div class="card-body">
            <HealthProfessionalSearch SelectedProfessional="selectedProfessional"
                                      SelectedProfessionalChanged="OnProfessionalSelected"
                                      OnProfessionalSelected="OnProfessionalSelected"
                                      OnProfessionalCleared="OnProfessionalCleared" />
            
            @if (selectedProfessional != null)
            {
                <div class="mt-3">
                    <button class="btn btn-secondary btn-sm" @onclick="ClearProfessionalSearch">
                        <i class="fas fa-times me-1"></i>
                        Limpiar Búsqueda
                    </button>
                </div>
            }
        </div>
    </div>
</div>

<!-- ✅ Alerta informativa cuando se busca -->
@if (showSearchInfo && !string.IsNullOrEmpty(searchInfoMessage))
{
    <div class="alert alert-info alert-dismissible fade show" role="alert">
        <i class="fas fa-info-circle me-2"></i>
        @searchInfoMessage
        <button type="button" class="btn-close" @onclick="ClearSearchInfo" aria-label="Close"></button>
    </div>
}

<ManagementTableR TableTitle="Usuarios"
                  Columns="UserColumns"
                  RenderActions="RenderUserActions"
                  AddCallback="AddUser"
                  @ref="table" />

@if (showDetail && selectedUser != null)
{
    <div class="modal fade show d-flex align-items-center justify-content-center"
         tabindex="-1"
         style="background-color: rgba(0,0,0,0.5); position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; z-index: 1050;"
         role="dialog">
        <div style="width: 90vw; height: 90vh; display: flex; justify-content: center; align-items: center;">
            <div class="modal-content"
                 style="width: 100%; height: 100%; display: flex; flex-direction: column; max-width: 800px;">
                <div class="modal-header">
                    <h5 class="modal-title">Detalle de Usuario</h5>
                    <button type="button" class="btn-close" @onclick="() => showDetail = false" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body" style="overflow-y: auto; flex-grow: 1;">
                    <UserDetailModal User="selectedUser" />
                </div>
            </div>
        </div>
    </div>
}

@if (showForm)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-xl modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        @(selectedUser?.Id == 0 ? "Nuevo Usuario" : "Editar Usuario")
                        @if (selectedUser?.Id == 0 && selectedProfessional != null)
                        {
                            <small class="text-muted ms-2">para @selectedProfessional.FullName</small>
                        }
                    </h5>
                    <button type="button" class="btn-close" @onclick="HideForm" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body">
                    <UserForm User="selectedUser"
                              OnSaved="OnUserSaved"
                              OnCancel="HideForm" />
                </div>
            </div>
        </div>
    </div>
}

@code {
    private ManagementTableR table;
    private UserDTO selectedUser;
    private HealthProfessionalDTO selectedProfessional;
    private bool showDetail = false;
    private bool showForm = false;
    private bool isSearching = false;
    private List<UserDTO> userList = new();
    private List<List<string>> UserData = new();

    // ✅ Para mensajes informativos
    private bool showSearchInfo = false;
    private string searchInfoMessage = string.Empty;

    private List<string> UserColumns = new()
    {
        "Nombre", "Email", "Estado", "Tipo Profesional", "Acciones"
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadUserData();
    }

    private async Task LoadUserData()
    {
        var results = (await UserService.GetAllUsersAsync()).ToList();
        userList = results;
        UserData = results.Select(u => new List<string>
        {
            u.Name ?? "N/A",
            u.Email ?? "N/A",
            u.IsActive.HasValue ? (u.IsActive.Value ? "Activo" : "Inactivo") : "N/A",
            u.HealthProfessionalTypeName ?? "ADMIN",
            u.Id.ToString()
        }).ToList();

        if (table != null)
        {
            await table.LoadRecords(UserData);
        }
    }

    // ✅ Manejo de selección de profesional
    private async Task OnProfessionalSelected(HealthProfessionalDTO professional)
    {
        selectedProfessional = professional;
        ClearSearchInfo();

        // ✅ Verificar si ya existe un usuario para este profesional
        var existingUser = userList.FirstOrDefault(u => u.PersonId == professional.HealthProfessionalId);
        
        if (existingUser != null)
        {
            // ✅ Si existe, cargar automáticamente para edición
            try
            {
                selectedUser = await UserService.GetUserByIdAsync(existingUser.Id);
                if (selectedUser != null)
                {
                    showForm = true;
                    searchInfoMessage = $"Usuario existente encontrado para {professional.FullName}. Abriendo formulario de edición...";
                    showSearchInfo = true;
                    
                    // Auto-ocultar el mensaje después de 3 segundos
                    _ = Task.Delay(3000).ContinueWith(_ => InvokeAsync(() => {
                        showSearchInfo = false;
                        StateHasChanged();
                    }));
                }
                else
                {
                    await JS.InvokeVoidAsync("alert", "Error al cargar el usuario existente");
                }
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("console.error", $"Error cargando usuario existente: {ex.Message}");
                await JS.InvokeVoidAsync("alert", "Error al cargar el usuario existente");
            }
        }
        else
        {
            // ✅ Si no existe, crear nuevo usuario
            selectedUser = new UserDTO
            {
                Id = 0,
                PersonId = professional.HealthProfessionalId,
                Name = professional.FullName,
                IsActive = true,
                Password = "",
                HealthProfessionalTypeName = professional.NameTypeProfessional
            };

            // Cargar email de la persona
            try
            {
                var person = await PersonService.GetPersonById(professional.HealthProfessionalId);
                if (person != null)
                {
                    selectedUser.Email = person.Email;
                }
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("console.error", $"Error cargando email: {ex.Message}");
            }

            showForm = true;
            searchInfoMessage = $"Creando nuevo usuario para {professional.FullName}...";
            showSearchInfo = true;
            
            // Auto-ocultar el mensaje después de 3 segundos
            _ = Task.Delay(3000).ContinueWith(_ => InvokeAsync(() => {
                showSearchInfo = false;
                StateHasChanged();
            }));
        }

        StateHasChanged();
    }

    private async Task OnProfessionalCleared()
    {
        selectedProfessional = null;
        ClearSearchInfo();
        StateHasChanged();
    }

    private async Task ClearProfessionalSearch()
    {
        selectedProfessional = null;
        ClearSearchInfo();
        StateHasChanged();
    }

    private void ClearSearchInfo()
    {
        showSearchInfo = false;
        searchInfoMessage = string.Empty;
    }

    private Task AddUser()
    {
        selectedUser = new UserDTO
        {
            Id = 0,
            IsActive = true,
            Password = ""
        };
        showForm = true;
        return Task.CompletedTask;
    }

    RenderFragment<List<string>> RenderUserActions => row => builder =>
    {
        int seq = 0;
        var id = row[row.Count - 1];

        builder.OpenElement(seq++, "button");
        builder.AddAttribute(seq++, "class", "btn btn-sm btn-warning me-1");
        builder.AddAttribute(seq++, "title", "Editar");
        builder.AddAttribute(seq++, "onclick", EventCallback.Factory.Create(this, () => EditUser(id)));
        builder.AddContent(seq++, "Editar");
        builder.CloseElement();

        builder.OpenElement(seq++, "button");
        builder.AddAttribute(seq++, "class", "btn btn-sm btn-danger");
        builder.AddAttribute(seq++, "title", "Eliminar");
        builder.AddAttribute(seq++, "onclick", EventCallback.Factory.Create(this, () => DeleteUser(id)));
        builder.AddContent(seq++, "Eliminar");
        builder.CloseElement();
    };

    private void ViewUser(string id)
    {
        if (int.TryParse(id, out int idInt))
        {
            selectedUser = userList.FirstOrDefault(u => u.Id == idInt);
            if (selectedUser != null)
            {
                showDetail = true;
            }
        }
    }

    private async Task EditUser(string id)
    {
        if (int.TryParse(id, out int idInt))
        {
            try
            {
                selectedUser = await UserService.GetUserByIdAsync(idInt);
                if (selectedUser != null)
                {
                    showForm = true;
                }
                else
                {
                    await JS.InvokeVoidAsync("alert", "No se pudo cargar el usuario");
                }
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("console.error", $"Error cargando usuario: {ex.Message}");
                await JS.InvokeVoidAsync("alert", "Error al cargar el usuario");
            }
        }
    }

    private async Task DeleteUser(string id)
    {
        if (!int.TryParse(id, out int idInt))
        {
            await JS.InvokeVoidAsync("alert", "ID inválido");
            return;
        }

        var userToDelete = userList.FirstOrDefault(u => u.Id == idInt);
        if (userToDelete == null)
        {
            await JS.InvokeVoidAsync("alert", "Usuario no encontrado");
            return;
        }

        bool confirmed = await JS.InvokeAsync<bool>("confirm",
            $"¿Estás seguro de eliminar el usuario '{userToDelete.Name ?? userToDelete.Email}'?");

        if (confirmed)
        {
            try
            {
                var success = await UserService.DeleteUserAsync(idInt);
                if (success)
                {
                    await LoadUserData();
                    await JS.InvokeVoidAsync("alert", "Usuario eliminado exitosamente");
                }
                else
                {
                    await JS.InvokeVoidAsync("alert", "Error al eliminar el usuario");
                }
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("console.error", $"Error eliminando: {ex.Message}");
                await JS.InvokeVoidAsync("alert", "Error inesperado al eliminar el usuario");
            }
        }
    }

    private void HideForm()
    {
        showForm = false;
        selectedUser = null;
        selectedProfessional = null;
    }

    // ✅ CORREGIDO: Lógica de guardado que faltaba
    private async Task OnUserSaved(UserDTO savedUser)
    {
        try
        {
            UserDTO result = null;

            if (savedUser.Id == 0)
            {
                // ✅ CREAR nuevo usuario
                result = await UserService.CreateUserAsync(savedUser);
                if (result != null)
                {
                    await JS.InvokeVoidAsync("alert", "Usuario creado exitosamente");
                }
                else
                {
                    await JS.InvokeVoidAsync("alert", "Error al crear el usuario");
                    return;
                }
            }
            else
            {
                // ✅ ACTUALIZAR usuario existente
                result = await UserService.UpdateUserAsync(savedUser);
                if (result != null)
                {
                    await JS.InvokeVoidAsync("alert", "Usuario actualizado exitosamente");
                }
                else
                {
                    await JS.InvokeVoidAsync("alert", "Error al actualizar el usuario");
                    return;
                }
            }

            // ✅ Cerrar formulario y recargar datos
            showForm = false;
            selectedUser = null;
            selectedProfessional = null;
            await LoadUserData();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", $"Error en OnUserSaved: {ex.Message}");
            await JS.InvokeVoidAsync("alert", "Error inesperado al guardar el usuario");
        }
    }

    void GuardarDatos()
    {
        // Lógica para guardar los datos (if TabContainer requires it)
    }
}
