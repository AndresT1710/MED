@page "/medical-history/general"
@using SMED.FrontEnd.Components
@using SMED.FrontEnd.Services
@using SMED.Shared.DTOs
@inject PersonalHistoryService PersonalHistoryService
@inject DiseaseService DiseaseService
@inject SurgeryService SurgeryService
@inject SurgeryHistoryService SurgeryHistoryService
@inject AllergyService AllergyService
@inject AllergyHistoryService AllergyHistoryService
@inject HabitService HabitService
@inject HabitHistoryService HabitHistoryService
@inject RelationshipService RelationshipService
@inject FamilyHistoryDetailService FamilyHistoryDetailService
@inject ILogger<General> Logger

<TabContainer>
    <h4>Historia Clínica - General</h4>

    <PatientSelector @bind-Value="clinicalHistoryId"
                     OnPatientSelected="HandlePatientSelected" />

    @if (clinicalHistoryId > 0)
    {
        <!-- SECCIÓN: ANTECEDENTES PERSONALES -->
        <div class="editable-table-wrapper">
            <EditableTable Title="Antecedentes Personales"
                           ColumnHeaders="@headersPersonales"
                           Rows="@personalesData.Select(d => d.Values).ToList()"
                           RowIds="@personalesData.Select(d => d.Id).ToList()"
                           OnAddRequested="PrepareForAdd"
                           OnEditRequested="PrepareForEdit"
                           OnDeleteRequested="HandleRowDeleted"
                           OnSaveRequested="SaveChanges"
                           IsValidForm="() => !string.IsNullOrEmpty(selectedDisease)"
                           EmptyMessage="@(isLoading ? "Cargando..." : "No hay datos disponibles")">

                <EditModalContent>
                    <div class="form-group mb-3">
                        <label>ID del Registro</label>
                        <input class="form-control" value="@GetCurrentEditingId()" disabled />
                    </div>
                    <div class="form-group mb-3">
                        <label>Tipo de Enfermedad</label>
                        <select class="form-select" @onchange="OnDiseaseTypeChanged">
                            <option value="">Seleccione un tipo</option>
                            @foreach (var type in diseaseTypes)
                            {
                                <option value="@type.DiseaseTypeId" selected="@(selectedDiseaseType == type.DiseaseTypeId)">
                                    @type.Name
                                </option>
                            }
                        </select>
                    </div>
                    <div class="form-group mb-3">
                        <label>Enfermedad</label>
                        <select class="form-select" @bind="selectedDisease" disabled="@(!canSelectDisease)">
                            <option value="">@(canSelectDisease ? "Seleccione una enfermedad" : "Seleccione primero el tipo")</option>
                            @foreach (var disease in availableDiseases)
                            {
                                <option value="@disease">@disease</option>
                            }
                        </select>
                        @if (isLoadingDiseases)
                        {
                            <div class="text-muted mt-1">Cargando enfermedades...</div>
                        }
                    </div>
                </EditModalContent>
            </EditableTable>
        </div>

        <!-- SECCIÓN: ANTECEDENTES QUIRÚRGICOS -->
        <div class="editable-table-wrapper mt-4">
            <EditableTable Title="Antecedentes Quirúrgicos"
                           ColumnHeaders="@headersQuirurgicos"
                           Rows="@quirurgicosData.Select(d => d.Values).ToList()"
                           RowIds="@quirurgicosData.Select(d => d.Id).ToList()"
                           OnAddRequested="PrepareForAddSurgery"
                           OnEditRequested="PrepareForEditSurgery"
                           OnDeleteRequested="HandleSurgeryRowDeleted"
                           OnSaveRequested="SaveSurgeryChanges"
                           IsValidForm="() => !string.IsNullOrEmpty(selectedSurgery) && surgeryDate != default"
                           EmptyMessage="@(isLoadingSurgeries ? "Cargando..." : "No hay datos disponibles")">

                <EditModalContent>
                    <div class="form-group mb-3">
                        <label>ID del Registro</label>
                        <input class="form-control" value="@GetCurrentEditingSurgeryId()" disabled />
                    </div>
                    <div class="form-group mb-3">
                        <label>Cirugía</label>
                        <select class="form-select" @bind="selectedSurgery">
                            <option value="">Seleccione una cirugía</option>
                            @foreach (var surgery in availableSurgeries)
                            {
                                <option value="@surgery">@surgery</option>
                            }
                        </select>
                        @if (isLoadingSurgeries)
                        {
                            <div class="text-muted mt-1">Cargando cirugías...</div>
                        }
                    </div>
                    <div class="form-group mb-3">
                        <label>Fecha de Cirugía</label>
                        <input type="date" class="form-control" @bind="surgeryDate" />
                    </div>
                    <div class="form-group mb-3">
                        <label>Descripción</label>
                        <textarea class="form-control" @bind="surgeryDescription" rows="2"></textarea>
                    </div>
                </EditModalContent>
            </EditableTable>
        </div>

        <!-- SECCIÓN: ANTECEDENTES DE ALERGIAS -->
        <div class="editable-table-wrapper mt-4">
            <EditableTable Title="Antecedentes de Alergias"
                           ColumnHeaders="@headersAlergias"
                           Rows="@alergiasData.Select(d => d.Values).ToList()"
                           RowIds="@alergiasData.Select(d => d.Id).ToList()"
                           OnAddRequested="PrepareForAddAllergy"
                           OnEditRequested="PrepareForEditAllergy"
                           OnDeleteRequested="HandleAllergyRowDeleted"
                           OnSaveRequested="SaveAllergyChanges"
                           IsValidForm="() => !string.IsNullOrEmpty(selectedAllergy)"
                           EmptyMessage="@(isLoadingAllergies ? "Cargando..." : "No hay datos disponibles")">

                <EditModalContent>
                    <div class="form-group mb-3">
                        <label>ID del Registro</label>
                        <input class="form-control" value="@GetCurrentEditingAllergyId()" disabled />
                    </div>
                    <div class="form-group mb-3">
                        <label>Alergia</label>
                        <select class="form-select" @bind="selectedAllergy">
                            <option value="">Seleccione una alergia</option>
                            @foreach (var allergy in availableAllergies)
                            {
                                <option value="@allergy">@allergy</option>
                            }
                        </select>
                        @if (isLoadingAllergies)
                        {
                            <div class="text-muted mt-1">Cargando alergias...</div>
                        }
                    </div>
                </EditModalContent>
            </EditableTable>
        </div>

        <!-- SECCIÓN: ANTECEDENTES DE HÁBITOS -->
        <div class="editable-table-wrapper mt-4">
            <EditableTable Title="Antecedentes de Hábitos"
                           ColumnHeaders="@headersHabitos"
                           Rows="@habitosData.Select(d => d.Values).ToList()"
                           RowIds="@habitosData.Select(d => d.Id).ToList()"
                           OnAddRequested="PrepareForAddHabit"
                           OnEditRequested="PrepareForEditHabit"
                           OnDeleteRequested="HandleHabitRowDeleted"
                           OnSaveRequested="SaveHabitChanges"
                           IsValidForm="() => !string.IsNullOrEmpty(selectedHabit)"
                           EmptyMessage="@(isLoadingHabits ? "Cargando..." : "No hay datos disponibles")">

                <EditModalContent>
                    <div class="form-group mb-3">
                        <label>ID del Registro</label>
                        <input class="form-control" value="@GetCurrentEditingHabitId()" disabled />
                    </div>
                    <div class="form-group mb-3">
                        <label>Hábito</label>
                        <select class="form-select" @bind="selectedHabit">
                            <option value="">Seleccione un hábito</option>
                            @foreach (var habit in availableHabits)
                            {
                                <option value="@habit">@habit</option>
                            }
                        </select>
                        @if (isLoadingHabits)
                        {
                            <div class="text-muted mt-1">Cargando hábitos...</div>
                        }
                    </div>
                </EditModalContent>
            </EditableTable>
        </div>

        <!-- SECCIÓN: ANTECEDENTES FAMILIARES -->
        <div class="editable-table-wrapper mt-4">
            <EditableTable Title="Antecedentes Familiares"
                           ColumnHeaders="@headersFamiliares"
                           Rows="@familiaresData.Select(d => d.Values).ToList()"
                           RowIds="@familiaresData.Select(d => d.Id).ToList()"
                           OnAddRequested="PrepareForAddFamily"
                           OnEditRequested="PrepareForEditFamily"
                           OnDeleteRequested="HandleFamilyRowDeleted"
                           OnSaveRequested="SaveFamilyChanges"
                           IsValidForm="() => selectedRelationshipId > 0 && selectedFamilyDiseaseType > 0 && !string.IsNullOrEmpty(selectedFamilyDisease) && familyAppearanceAge > 0"
                           EmptyMessage="@(isLoadingFamily ? "Cargando..." : "No hay datos disponibles")">

                <EditModalContent>
                    <div class="form-group mb-3">
                        <label>ID del Registro</label>
                        <input class="form-control" value="@GetCurrentEditingFamilyId()" disabled />
                    </div>
                    <div class="form-group mb-3">
                        <label>Parentesco</label>
                        <select class="form-select" @bind="selectedRelationshipId">
                            <option value="0">Seleccione un parentesco</option>
                            @foreach (var relationship in availableRelationships)
                            {
                                <option value="@relationship.Id">@relationship.Name</option>
                            }
                        </select>
                        @if (isLoadingRelationships)
                        {
                            <div class="text-muted mt-1">Cargando parentescos...</div>
                        }
                    </div>
                    <div class="form-group mb-3">
                        <label>Tipo de Enfermedad</label>
                        <select class="form-select" @onchange="OnFamilyDiseaseTypeChanged">
                            <option value="0">Seleccione un tipo</option>
                            @foreach (var type in diseaseTypes)
                            {
                                <option value="@type.DiseaseTypeId" selected="@(selectedFamilyDiseaseType == type.DiseaseTypeId)">
                                    @type.Name
                                </option>
                            }
                        </select>
                    </div>
                    <div class="form-group mb-3">
                        <label>Enfermedad</label>
                        <select class="form-select" @bind="selectedFamilyDisease" disabled="@(!canSelectFamilyDisease)">
                            <option value="">@(canSelectFamilyDisease ? "Seleccione una enfermedad" : "Seleccione primero el tipo")</option>
                            @foreach (var disease in availableFamilyDiseases)
                            {
                                <option value="@disease">@disease</option>
                            }
                        </select>
                        @if (isLoadingFamilyDiseases)
                        {
                            <div class="text-muted mt-1">Cargando enfermedades...</div>
                        }
                    </div>
                    <div class="form-group mb-3">
                        <label>Edad de Aparición</label>
                        <input type="number" class="form-control" @bind="familyAppearanceAge" min="0" max="120" placeholder="Ingrese la edad" />
                        @if (familyAppearanceAge <= 0)
                        {
                            <div class="text-muted mt-1">Debe ingresar una edad válida (mayor a 0)</div>
                        }
                    </div>
                </EditModalContent>
            </EditableTable>
        </div>
    }
    else
    {
        <p class="text-muted">Seleccione un paciente con historia clínica para mostrar los antecedentes.</p>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">
            @errorMessage
            <button type="button" class="btn-close float-end" @onclick="ClearErrorMessage"></button>
        </div>
    }
</TabContainer>

@code {
    private int clinicalHistoryId = 0;
    private string medicalRecordNumber = string.Empty;
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    // ==========================================
    // SECCIÓN: ANTECEDENTES PERSONALES
    // ==========================================
    private readonly List<string> headersPersonales = new() { "Tipo de Enfermedad", "Enfermedad" };
    private List<PersonalRow> personalesData = new();
    private List<PersonalHistoryDTO> currentPersonalHistories = new();
    private List<DiseaseTypeDTO> diseaseTypes = new();
    private List<string> availableDiseases = new();

    private int selectedDiseaseType = 0;
    private string selectedDisease = "";
    private int editingId = -1;
    private bool isLoadingDiseases = false;
    private bool canSelectDisease => selectedDiseaseType > 0 && !isLoadingDiseases;

    private class PersonalRow
    {
        public int Id { get; set; }
        public List<string> Values { get; set; } = new();
    }

    // ==========================================
    // SECCIÓN: ANTECEDENTES QUIRÚRGICOS
    // ==========================================
    private readonly List<string> headersQuirurgicos = new() { "Cirugía", "Fecha", "Descripción" };
    private List<SurgeryRow> quirurgicosData = new();
    private List<SurgeryHistoryDTO> currentSurgeryHistories = new();
    private List<SurgeryDTO> surgeries = new();
    private List<string> availableSurgeries = new();

    private string selectedSurgery = "";
    private DateTime surgeryDate = DateTime.Now;
    private string surgeryDescription = "";
    private int editingSurgeryId = -1;
    private bool isLoadingSurgeries = false;

    private class SurgeryRow
    {
        public int Id { get; set; }
        public List<string> Values { get; set; } = new();
    }

    // ==========================================
    // SECCIÓN: ANTECEDENTES DE ALERGIAS
    // ==========================================
    private readonly List<string> headersAlergias = new() { "Alergia" };
    private List<AllergyRow> alergiasData = new();
    private List<AllergyHistoryDTO> currentAllergyHistories = new();
    private List<AllergyDTO> allergies = new();
    private List<string> availableAllergies = new();

    private string selectedAllergy = "";
    private int editingAllergyId = -1;
    private bool isLoadingAllergies = false;

    private class AllergyRow
    {
        public int Id { get; set; }
        public List<string> Values { get; set; } = new();
    }

    // ==========================================
    // SECCIÓN: ANTECEDENTES DE HÁBITOS
    // ==========================================
    private readonly List<string> headersHabitos = new() { "Hábito" };
    private List<HabitRow> habitosData = new();
    private List<HabitHistoryDTO> currentHabitHistories = new();
    private List<HabitsDTO> habits = new();
    private List<string> availableHabits = new();

    private string selectedHabit = "";
    private int editingHabitId = -1;
    private bool isLoadingHabits = false;

    private class HabitRow
    {
        public int Id { get; set; }
        public List<string> Values { get; set; } = new();
    }

    // ==========================================
    // SECCIÓN: ANTECEDENTES FAMILIARES
    // ==========================================
    private readonly List<string> headersFamiliares = new() { "Parentesco", "Tipo de Enfermedad", "Enfermedad", "Edad de Aparición" };
    private List<FamilyRow> familiaresData = new();
    private List<FamilyHistoryDetailDTO> currentFamilyHistories = new();
    private List<RelationshipDTO> relationships = new();
    private List<RelationshipDTO> availableRelationships = new();
    private List<string> availableFamilyDiseases = new();

    private int selectedRelationshipId = 0;
    private int selectedFamilyDiseaseType = 0;
    private string selectedFamilyDisease = "";
    private int familyAppearanceAge = 0;
    private int editingFamilyId = -1;
    private bool isLoadingFamily = false;
    private bool isLoadingRelationships = false;
    private bool isLoadingFamilyDiseases = false;
    private bool canSelectFamilyDisease => selectedFamilyDiseaseType > 0 && !isLoadingFamilyDiseases;

    private class FamilyRow
    {
        public int Id { get; set; }
        public List<string> Values { get; set; } = new();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            diseaseTypes = await DiseaseService.GetAllAsyncDiseaseTypes() ?? new();

            // Cargar cirugías disponibles
            surgeries = await SurgeryService.GetAllAsync() ?? new();
            availableSurgeries = surgeries.Select(s => s.Name).ToList();

            // Cargar alergias disponibles
            allergies = await AllergyService.GetAllAsync() ?? new();
            availableAllergies = allergies.Select(a => a.Name).ToList();

            // Cargar hábitos disponibles
            habits = await HabitService.GetAllAsync() ?? new();
            availableHabits = habits.Select(h => h.Name).ToList();

            // Cargar parentescos disponibles
            relationships = await RelationshipService.GetAllAsync() ?? new();
            availableRelationships = relationships.ToList();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar datos iniciales");
            errorMessage = "Error al cargar los datos iniciales.";
        }
        finally
        {
            isLoading = false;
        }
    }

    // ==========================================
    // MÉTODOS: ANTECEDENTES PERSONALES
    // ==========================================
    private async Task LoadHistories()
    {
        errorMessage = string.Empty;
        isLoading = true;

        try
        {
            var result = await PersonalHistoryService.GetByClinicalHistoryIdAsync(clinicalHistoryId);
            currentPersonalHistories = result ?? new();
            personalesData = new();

            foreach (var ph in currentPersonalHistories)
            {
                personalesData.Add(new PersonalRow
                    {
                        Id = ph.PersonalHistoryId,
                        Values = new()
                    {
                        ph.DiseaseTypeName ?? "Desconocido",
                        ph.DiseaseName ?? "No especificada"
                    }
                    });
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar historias personales");
            errorMessage = "Error al cargar los antecedentes personales.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task PrepareForEdit(int id)
    {
        errorMessage = string.Empty;

        try
        {
            var dto = currentPersonalHistories.FirstOrDefault(p => p.PersonalHistoryId == id);
            if (dto == null)
            {
                errorMessage = $"No se encontró el antecedente con ID {id}";
                return;
            }

            editingId = id;
            selectedDisease = dto.DiseaseName ?? "";
            selectedDiseaseType = 0;
            availableDiseases = new();

            if (dto.DiseaseId.HasValue)
            {
                var disease = await DiseaseService.GetByIdAsync(dto.DiseaseId.Value);
                if (disease != null)
                {
                    selectedDiseaseType = disease.DiseaseTypeId;
                    await LoadDiseasesByType(selectedDiseaseType);
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al preparar edición");
            errorMessage = "Error al preparar el formulario de edición.";
        }
    }

    private async Task LoadDiseasesByType(int typeId)
    {
        isLoadingDiseases = true;
        try
        {
            var diseases = await DiseaseService.GetDiseasesByTypeAsync(typeId);
            availableDiseases = diseases?.Select(d => d.Name).ToList() ?? new();
        }
        finally
        {
            isLoadingDiseases = false;
        }
    }

    private async Task HandleRowDeleted(int id)
    {
        errorMessage = string.Empty;

        try
        {
            var (success, error) = await PersonalHistoryService.DeleteAsync(id);
            if (!success)
            {
                errorMessage = $"Error al eliminar: {error}";
                return;
            }

            await LoadHistories();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al eliminar antecedente");
            errorMessage = "Error al eliminar el antecedente.";
        }
    }

    private async Task SaveChanges()
    {
        errorMessage = string.Empty;

        try
        {
            if (string.IsNullOrWhiteSpace(selectedDisease))
            {
                errorMessage = "Debe seleccionar una enfermedad.";
                return;
            }

            var diseaseList = await DiseaseService.GetDiseasesByTypeAsync(selectedDiseaseType);
            var enfermedad = diseaseList?.FirstOrDefault(d => d.Name == selectedDisease);
            if (enfermedad == null)
            {
                errorMessage = "Enfermedad no encontrada.";
                return;
            }

            if (editingId == -1)
            {
                var nuevo = new PersonalHistoryDTO
                    {
                        ClinicalHistoryId = clinicalHistoryId,
                        DiseaseId = enfermedad.DiseaseId,
                        Description = $"{selectedDiseaseType} - {selectedDisease}",
                        RegistrationDate = DateTime.Now,
                        MedicalRecordNumber = medicalRecordNumber
                    };

                var (success, _, error) = await PersonalHistoryService.CreateAsync(nuevo);
                if (!success)
                {
                    errorMessage = $"Error al crear antecedente: {error}";
                    return;
                }
            }
            else
            {
                var dto = currentPersonalHistories.FirstOrDefault(p => p.PersonalHistoryId == editingId);
                if (dto == null)
                {
                    errorMessage = "Registro no encontrado para editar.";
                    return;
                }

                dto.DiseaseId = enfermedad.DiseaseId;
                dto.Description = $"{selectedDiseaseType} - {selectedDisease}";

                var (success, error) = await PersonalHistoryService.UpdateAsync(dto);
                if (!success)
                {
                    errorMessage = $"Error al actualizar antecedente: {error}";
                    return;
                }
            }

            await LoadHistories();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al guardar cambios");
            errorMessage = "Error inesperado al guardar cambios.";
        }
    }

    private async Task OnDiseaseTypeChanged(ChangeEventArgs e)
    {
        errorMessage = string.Empty;

        if (int.TryParse(e.Value?.ToString(), out var typeId))
        {
            selectedDiseaseType = typeId;
            selectedDisease = "";
            await LoadDiseasesByType(typeId);
        }
    }

    private void PrepareForAdd()
    {
        editingId = -1;
        selectedDiseaseType = 0;
        selectedDisease = "";
        availableDiseases = new();
        errorMessage = string.Empty;
    }

    // ==========================================
    // MÉTODOS: ANTECEDENTES QUIRÚRGICOS
    // ==========================================
    private async Task LoadSurgeryHistories()
    {
        errorMessage = string.Empty;
        isLoadingSurgeries = true;

        try
        {
            var result = await SurgeryHistoryService.GetByClinicalHistoryIdAsync(clinicalHistoryId);
            currentSurgeryHistories = result ?? new();
            quirurgicosData = new();

            foreach (var sh in currentSurgeryHistories)
            {
                quirurgicosData.Add(new SurgeryRow
                    {
                        Id = sh.SurgeryHistoryId,
                        Values = new()
                    {
                        GetSurgeryName(sh.SurgeryId ?? 0),
                        sh.SurgeryDate?.ToShortDateString() ?? "Sin fecha",
                        sh.Description ?? "Sin descripción"
                    }
                    });
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar historias quirúrgicas");
            errorMessage = "Error al cargar los antecedentes quirúrgicos.";
        }
        finally
        {
            isLoadingSurgeries = false;
        }
    }

    private string GetSurgeryName(int surgeryId)
    {
        if (surgeryId == 0) return "Sin especificar";
        return surgeries.FirstOrDefault(s => s.SurgeryId == surgeryId)?.Name ?? "Desconocida";
    }

    private async Task PrepareForEditSurgery(int id)
    {
        errorMessage = string.Empty;

        try
        {
            var dto = currentSurgeryHistories.FirstOrDefault(s => s.SurgeryHistoryId == id);
            if (dto == null)
            {
                errorMessage = $"No se encontró el antecedente quirúrgico con ID {id}";
                return;
            }

            editingSurgeryId = id;
            selectedSurgery = GetSurgeryName(dto.SurgeryId ?? 0);
            surgeryDate = dto.SurgeryDate ?? DateTime.Now;
            surgeryDescription = dto.Description ?? "";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al preparar edición de antecedente quirúrgico");
            errorMessage = "Error al preparar el formulario de edición.";
        }
    }

    private async Task HandleSurgeryRowDeleted(int id)
    {
        errorMessage = string.Empty;

        try
        {
            var (success, error) = await SurgeryHistoryService.DeleteAsync(id);
            if (!success)
            {
                errorMessage = $"Error al eliminar: {error}";
                return;
            }

            await LoadSurgeryHistories();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al eliminar antecedente quirúrgico");
            errorMessage = "Error al eliminar el antecedente quirúrgico.";
        }
    }

    private async Task SaveSurgeryChanges()
    {
        errorMessage = string.Empty;

        try
        {
            if (string.IsNullOrWhiteSpace(selectedSurgery))
            {
                errorMessage = "Debe seleccionar una cirugía.";
                return;
            }

            if (surgeryDate == default)
            {
                errorMessage = "Debe seleccionar una fecha válida.";
                return;
            }

            var cirugia = surgeries.FirstOrDefault(s => s.Name == selectedSurgery);
            if (cirugia == null)
            {
                errorMessage = "Cirugía no encontrada.";
                return;
            }

            if (editingSurgeryId == -1)
            {
                var nuevo = new SurgeryHistoryDTO
                    {
                        ClinicalHistoryId = clinicalHistoryId,
                        SurgeryId = cirugia.SurgeryId,
                        Description = string.IsNullOrWhiteSpace(surgeryDescription) ?
                                             $"Cirugía: {selectedSurgery}" : surgeryDescription,
                        SurgeryDate = surgeryDate,
                        RegistrationDate = DateTime.Now,
                        HistoryNumber = medicalRecordNumber
                    };

                var (success, _, error) = await SurgeryHistoryService.CreateAsync(nuevo);
                if (!success)
                {
                    errorMessage = $"Error al crear antecedente quirúrgico: {error}";
                    return;
                }
            }
            else
            {
                var dto = currentSurgeryHistories.FirstOrDefault(s => s.SurgeryHistoryId == editingSurgeryId);
                if (dto == null)
                {
                    errorMessage = "Registro no encontrado para editar.";
                    return;
                }

                dto.SurgeryId = cirugia.SurgeryId;
                dto.Description = string.IsNullOrWhiteSpace(surgeryDescription) ?
                                 $"Cirugía: {selectedSurgery}" : surgeryDescription;
                dto.SurgeryDate = surgeryDate;

                var (success, error) = await SurgeryHistoryService.UpdateAsync(dto);
                if (!success)
                {
                    errorMessage = $"Error al actualizar antecedente quirúrgico: {error}";
                    return;
                }
            }

            await LoadSurgeryHistories();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al guardar cambios de antecedente quirúrgico");
            errorMessage = "Error inesperado al guardar cambios.";
        }
    }

    private void PrepareForAddSurgery()
    {
        editingSurgeryId = -1;
        selectedSurgery = "";
        surgeryDate = DateTime.Now;
        surgeryDescription = "";
        errorMessage = string.Empty;
    }

    private string GetCurrentEditingSurgeryId() => editingSurgeryId == -1 ? "Nuevo" : editingSurgeryId.ToString();

    // ==========================================
    // MÉTODOS: ANTECEDENTES DE ALERGIAS
    // ==========================================
    private async Task LoadAllergyHistories()
    {
        errorMessage = string.Empty;
        isLoadingAllergies = true;

        try
        {
            var result = await AllergyHistoryService.GetByClinicalHistoryIdAsync(clinicalHistoryId);
            currentAllergyHistories = result ?? new();
            alergiasData = new();

            foreach (var ah in currentAllergyHistories)
            {
                alergiasData.Add(new AllergyRow
                    {
                        Id = ah.AllergyHistoryId,
                        Values = new()
                    {
                        GetAllergyName(ah.AllergyId ?? 0)
                    }
                    });
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar historias de alergias");
            errorMessage = "Error al cargar los antecedentes de alergias.";
        }
        finally
        {
            isLoadingAllergies = false;
        }
    }

    private string GetAllergyName(int allergyId)
    {
        if (allergyId == 0) return "Sin especificar";
        return allergies.FirstOrDefault(a => a.AllergyId == allergyId)?.Name ?? "Desconocida";
    }

    private async Task PrepareForEditAllergy(int id)
    {
        errorMessage = string.Empty;

        try
        {
            var dto = currentAllergyHistories.FirstOrDefault(a => a.AllergyHistoryId == id);
            if (dto == null)
            {
                errorMessage = $"No se encontró el antecedente alérgico con ID {id}";
                return;
            }

            editingAllergyId = id;
            selectedAllergy = GetAllergyName(dto.AllergyId ?? 0);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al preparar edición de antecedente alérgico");
            errorMessage = "Error al preparar el formulario de edición.";
        }
    }

    private async Task HandleAllergyRowDeleted(int id)
    {
        errorMessage = string.Empty;

        try
        {
            var (success, error) = await AllergyHistoryService.DeleteAsync(id);
            if (!success)
            {
                errorMessage = $"Error al eliminar: {error}";
                return;
            }

            await LoadAllergyHistories();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al eliminar antecedente alérgico");
            errorMessage = "Error al eliminar el antecedente alérgico.";
        }
    }

    private async Task SaveAllergyChanges()
    {
        errorMessage = string.Empty;

        try
        {
            if (string.IsNullOrWhiteSpace(selectedAllergy))
            {
                errorMessage = "Debe seleccionar una alergia.";
                return;
            }

            var alergia = allergies.FirstOrDefault(a => a.Name == selectedAllergy);
            if (alergia == null)
            {
                errorMessage = "Alergia no encontrada.";
                return;
            }

            if (editingAllergyId == -1)
            {
                var nuevo = new AllergyHistoryDTO
                    {
                        ClinicalHistoryId = clinicalHistoryId,
                        AllergyId = alergia.AllergyId,
                        Description = $"Alergia: {selectedAllergy}",
                        RegistrationDate = DateTime.Now,
                        HistoryNumber = medicalRecordNumber
                    };

                var (success, _, error) = await AllergyHistoryService.CreateAsync(nuevo);
                if (!success)
                {
                    errorMessage = $"Error al crear antecedente alérgico: {error}";
                    return;
                }
            }
            else
            {
                var dto = currentAllergyHistories.FirstOrDefault(a => a.AllergyHistoryId == editingAllergyId);
                if (dto == null)
                {
                    errorMessage = "Registro no encontrado para editar.";
                    return;
                }

                dto.AllergyId = alergia.AllergyId;
                dto.Description = $"Alergia: {selectedAllergy}";

                var (success, error) = await AllergyHistoryService.UpdateAsync(dto);
                if (!success)
                {
                    errorMessage = $"Error al actualizar antecedente alérgico: {error}";
                    return;
                }
            }

            await LoadAllergyHistories();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al guardar cambios de antecedente alérgico");
            errorMessage = "Error inesperado al guardar cambios.";
        }
    }

    private void PrepareForAddAllergy()
    {
        editingAllergyId = -1;
        selectedAllergy = "";
        errorMessage = string.Empty;
    }

    private string GetCurrentEditingAllergyId() => editingAllergyId == -1 ? "Nuevo" : editingAllergyId.ToString();

    // ==========================================
    // MÉTODOS: ANTECEDENTES DE HÁBITOS
    // ==========================================
    private async Task LoadHabitHistories()
    {
        errorMessage = string.Empty;
        isLoadingHabits = true;

        try
        {
            var result = await HabitHistoryService.GetByClinicalHistoryIdAsync(clinicalHistoryId);
            currentHabitHistories = result ?? new();
            habitosData = new();

            foreach (var hh in currentHabitHistories)
            {
                habitosData.Add(new HabitRow
                    {
                        Id = hh.HabitHistoryId,
                        Values = new()
                    {
                        GetHabitName(hh.HabitId)
                    }
                    });
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar historias de hábitos");
            errorMessage = "Error al cargar los antecedentes de hábitos.";
        }
        finally
        {
            isLoadingHabits = false;
        }
    }

    private string GetHabitName(int habitId)
    {
        return habits.FirstOrDefault(h => h.HabitId == habitId)?.Name ?? "Desconocido";
    }

    private async Task PrepareForEditHabit(int id)
    {
        errorMessage = string.Empty;

        try
        {
            var dto = currentHabitHistories.FirstOrDefault(h => h.HabitHistoryId == id);
            if (dto == null)
            {
                errorMessage = $"No se encontró el antecedente de hábito con ID {id}";
                return;
            }

            editingHabitId = id;
            selectedHabit = GetHabitName(dto.HabitId);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al preparar edición de antecedente de hábito");
            errorMessage = "Error al preparar el formulario de edición.";
        }
    }

    private async Task HandleHabitRowDeleted(int id)
    {
        errorMessage = string.Empty;

        try
        {
            var (success, error) = await HabitHistoryService.DeleteAsync(id);
            if (!success)
            {
                errorMessage = $"Error al eliminar: {error}";
                return;
            }

            await LoadHabitHistories();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al eliminar antecedente de hábito");
            errorMessage = "Error al eliminar el antecedente de hábito.";
        }
    }

    private async Task SaveHabitChanges()
    {
        errorMessage = string.Empty;

        try
        {
            if (string.IsNullOrWhiteSpace(selectedHabit))
            {
                errorMessage = "Debe seleccionar un hábito.";
                return;
            }

            var habito = habits.FirstOrDefault(h => h.Name == selectedHabit);
            if (habito == null)
            {
                errorMessage = "Hábito no encontrado.";
                return;
            }

            if (editingHabitId == -1)
            {
                var nuevo = new HabitHistoryDTO
                    {
                        ClinicalHistoryId = clinicalHistoryId,
                        HabitId = habito.HabitId,
                        RecordDate = DateTime.Now,
                        HistoryNumber = medicalRecordNumber
                    };

                var (success, _, error) = await HabitHistoryService.CreateAsync(nuevo);
                if (!success)
                {
                    errorMessage = $"Error al crear antecedente de hábito: {error}";
                    return;
                }
            }
            else
            {
                var dto = currentHabitHistories.FirstOrDefault(h => h.HabitHistoryId == editingHabitId);
                if (dto == null)
                {
                    errorMessage = "Registro no encontrado para editar.";
                    return;
                }

                dto.HabitId = habito.HabitId;

                var (success, error) = await HabitHistoryService.UpdateAsync(dto);
                if (!success)
                {
                    errorMessage = $"Error al actualizar antecedente de hábito: {error}";
                    return;
                }
            }

            await LoadHabitHistories();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al guardar cambios de antecedente de hábito");
            errorMessage = "Error inesperado al guardar cambios.";
        }
    }

    private void PrepareForAddHabit()
    {
        editingHabitId = -1;
        selectedHabit = "";
        errorMessage = string.Empty;
    }

    private string GetCurrentEditingHabitId() => editingHabitId == -1 ? "Nuevo" : editingHabitId.ToString();

    // ==========================================
    // MÉTODOS: ANTECEDENTES FAMILIARES
    // ==========================================
    private async Task LoadFamilyHistories()
    {
        errorMessage = string.Empty;
        isLoadingFamily = true;

        try
        {
            var result = await FamilyHistoryDetailService.GetByClinicalHistoryIdAsync(clinicalHistoryId);
            currentFamilyHistories = result ?? new();
            familiaresData = new();

            foreach (var fh in currentFamilyHistories)
            {
                familiaresData.Add(new FamilyRow
                    {
                        Id = fh.FamilyHistoryDetailId,
                        Values = new()
                    {
                        GetRelationshipName(fh.RelationshipId),
                        await GetDiseaseTypeName(fh.DiseaseId ?? 0),
                        await GetDiseaseName(fh.DiseaseId ?? 0),
                        fh.appearanceAge?.ToString() ?? "No especificada"
                    }
                    });
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar historias familiares");
            errorMessage = "Error al cargar los antecedentes familiares.";
        }
        finally
        {
            isLoadingFamily = false;
        }
    }

    private string GetRelationshipName(int relationshipId)
    {
        return relationships.FirstOrDefault(r => r.Id == relationshipId)?.Name ?? "Desconocido";
    }

    private async Task<string> GetDiseaseTypeName(int diseaseId)
    {
        if (diseaseId == 0) return "Sin especificar";

        try
        {
            var disease = await DiseaseService.GetByIdAsync(diseaseId);
            if (disease != null)
            {
                var diseaseType = diseaseTypes.FirstOrDefault(dt => dt.DiseaseTypeId == disease.DiseaseTypeId);
                return diseaseType?.Name ?? "Desconocido";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al obtener tipo de enfermedad");
        }

        return "Desconocido";
    }

    private async Task<string> GetDiseaseName(int diseaseId)
    {
        if (diseaseId == 0) return "Sin especificar";

        try
        {
            var disease = await DiseaseService.GetByIdAsync(diseaseId);
            return disease?.Name ?? "Desconocida";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al obtener nombre de enfermedad");
            return "Desconocida";
        }
    }

    private async Task PrepareForEditFamily(int id)
    {
        errorMessage = string.Empty;

        try
        {
            var dto = currentFamilyHistories.FirstOrDefault(f => f.FamilyHistoryDetailId == id);
            if (dto == null)
            {
                errorMessage = $"No se encontró el antecedente familiar con ID {id}";
                return;
            }

            editingFamilyId = id;
            selectedRelationshipId = dto.RelationshipId;
            familyAppearanceAge = dto.appearanceAge ?? 0;
            selectedFamilyDiseaseType = 0;
            selectedFamilyDisease = "";
            availableFamilyDiseases = new();

            if (dto.DiseaseId.HasValue)
            {
                var disease = await DiseaseService.GetByIdAsync(dto.DiseaseId.Value);
                if (disease != null)
                {
                    selectedFamilyDiseaseType = disease.DiseaseTypeId;
                    await LoadFamilyDiseasesByType(selectedFamilyDiseaseType);
                    selectedFamilyDisease = disease.Name;
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al preparar edición de antecedente familiar");
            errorMessage = "Error al preparar el formulario de edición.";
        }
    }

    private async Task LoadFamilyDiseasesByType(int typeId)
    {
        isLoadingFamilyDiseases = true;
        try
        {
            var diseases = await DiseaseService.GetDiseasesByTypeAsync(typeId);
            availableFamilyDiseases = diseases?.Select(d => d.Name).ToList() ?? new();
        }
        finally
        {
            isLoadingFamilyDiseases = false;
        }
    }

    private async Task HandleFamilyRowDeleted(int id)
    {
        errorMessage = string.Empty;

        try
        {
            var (success, error) = await FamilyHistoryDetailService.DeleteAsync(id);
            if (!success)
            {
                errorMessage = $"Error al eliminar: {error}";
                return;
            }

            await LoadFamilyHistories();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al eliminar antecedente familiar");
            errorMessage = "Error al eliminar el antecedente familiar.";
        }
    }

    private async Task SaveFamilyChanges()
    {
        errorMessage = string.Empty;

        try
        {
            if (selectedRelationshipId <= 0)
            {
                errorMessage = "Debe seleccionar un parentesco.";
                return;
            }

            if (selectedFamilyDiseaseType <= 0)
            {
                errorMessage = "Debe seleccionar un tipo de enfermedad.";
                return;
            }

            if (string.IsNullOrWhiteSpace(selectedFamilyDisease))
            {
                errorMessage = "Debe seleccionar una enfermedad.";
                return;
            }

            if (familyAppearanceAge <= 0)
            {
                errorMessage = "Debe ingresar una edad válida (mayor a 0).";
                return;
            }

            var diseaseList = await DiseaseService.GetDiseasesByTypeAsync(selectedFamilyDiseaseType);
            var enfermedad = diseaseList?.FirstOrDefault(d => d.Name == selectedFamilyDisease);
            if (enfermedad == null)
            {
                errorMessage = "Enfermedad no encontrada.";
                return;
            }

            var relationshipName = GetRelationshipName(selectedRelationshipId);
            var diseaseTypeName = diseaseTypes.FirstOrDefault(dt => dt.DiseaseTypeId == selectedFamilyDiseaseType)?.Name ?? "Desconocido";

            if (editingFamilyId == -1)
            {
                var nuevo = new FamilyHistoryDetailDTO
                    {
                        ClinicalHistoryId = clinicalHistoryId,
                        RelationshipId = selectedRelationshipId,
                        DiseaseId = enfermedad.DiseaseId,
                        appearanceAge = familyAppearanceAge,
                        Description = $"{relationshipName} - {diseaseTypeName} - {selectedFamilyDisease} (Edad: {familyAppearanceAge})",
                        RegistrationDate = DateTime.Now,
                        MedicalRecordNumber = medicalRecordNumber
                    };

                var (success, _, error) = await FamilyHistoryDetailService.CreateAsync(nuevo);
                if (!success)
                {
                    errorMessage = $"Error al crear antecedente familiar: {error}";
                    return;
                }
            }
            else
            {
                var dto = currentFamilyHistories.FirstOrDefault(f => f.FamilyHistoryDetailId == editingFamilyId);
                if (dto == null)
                {
                    errorMessage = "Registro no encontrado para editar.";
                    return;
                }

                dto.RelationshipId = selectedRelationshipId;
                dto.DiseaseId = enfermedad.DiseaseId;
                dto.appearanceAge = familyAppearanceAge;
                dto.Description = $"{relationshipName} - {diseaseTypeName} - {selectedFamilyDisease} (Edad: {familyAppearanceAge})";

                var (success, error) = await FamilyHistoryDetailService.UpdateAsync(dto);
                if (!success)
                {
                    errorMessage = $"Error al actualizar antecedente familiar: {error}";
                    return;
                }
            }

            await LoadFamilyHistories();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al guardar cambios de antecedente familiar");
            errorMessage = "Error inesperado al guardar cambios.";
        }
    }

    private async Task OnFamilyDiseaseTypeChanged(ChangeEventArgs e)
    {
        errorMessage = string.Empty;

        if (int.TryParse(e.Value?.ToString(), out var typeId))
        {
            selectedFamilyDiseaseType = typeId;
            selectedFamilyDisease = "";
            await LoadFamilyDiseasesByType(typeId);
        }
    }

    private void PrepareForAddFamily()
    {
        editingFamilyId = -1;
        selectedRelationshipId = 0;
        selectedFamilyDiseaseType = 0;
        selectedFamilyDisease = "";
        familyAppearanceAge = 0;
        availableFamilyDiseases = new();
        errorMessage = string.Empty;
    }

    private string GetCurrentEditingFamilyId() => editingFamilyId == -1 ? "Nuevo" : editingFamilyId.ToString();

    // ==========================================
    // MÉTODOS COMUNES
    // ==========================================
    private async Task HandlePatientSelected((int ClinicalHistoryId, string MedicalRecordNumber) patient)
    {
        clinicalHistoryId = patient.ClinicalHistoryId;
        medicalRecordNumber = patient.MedicalRecordNumber;

        if (clinicalHistoryId > 0)
        {
            await LoadHistories();
            await LoadSurgeryHistories();
            await LoadAllergyHistories();
            await LoadHabitHistories();
            await LoadFamilyHistories();
        }
    }

    private string GetCurrentEditingId() => editingId == -1 ? "Nuevo" : editingId.ToString();

    private void ClearErrorMessage() => errorMessage = string.Empty;
}
