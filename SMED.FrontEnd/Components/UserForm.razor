@using SMED.Shared.DTOs
@using SMED.FrontEnd.Components
@using SMED.FrontEnd.Services
@inject IJSRuntime JS
@inject HealthProfessionalService HealthProfessionalService
@inject PersonService PersonService

<div class="user-form-container">
    <EditForm Model="@User" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />

        <div class="row">
            <div class="col-md-12 mb-3">
                <label class="form-label">Profesional de Salud *</label>
                @if (User.PersonId == null)
                {
                    <HealthProfessionalSearch SelectedProfessional="selectedProfessional"
                                              SelectedProfessionalChanged="OnProfessionalSelected"
                                              OnProfessionalSelected="OnProfessionalSelected" />
                }
                else
                {
                    <div class="alert alert-info">
                        <strong>Profesional seleccionado:</strong> @selectedProfessionalName
                        <button type="button" class="btn btn-sm btn-outline-secondary ms-2" @onclick="ClearProfessionalSelection">
                            Cambiar
                        </button>
                    </div>
                }
                <ValidationMessage For="@(() => User.PersonId)" />
            </div>
        </div>

        <div class="row">
            <div class="col-md-6 mb-3">
                <label for="email" class="form-label">Email *</label>
                <InputText id="email" class="form-control" @bind-Value="User.Email" placeholder="usuario@ejemplo.com" readonly />
                <ValidationMessage For="@(() => User.Email)" />
            </div>

            <div class="col-md-6 mb-3">
                <label for="password" class="form-label">Contraseña *</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="User.Password" />
                <ValidationMessage For="@(() => User.Password)" />
            </div>
        </div>

        <div class="row">
            <div class="col-md-6 mb-3">
                <div class="form-check">
                    <input id="isActive" type="checkbox" class="form-check-input"
                           checked="@(User.IsActive ?? false)"
                           @onchange="@((ChangeEventArgs e) => User.IsActive = (bool)e.Value)" />
                    <label class="form-check-label" for="isActive">
                        Usuario Activo
                    </label>
                </div>
            </div>
        </div>

        <div class="d-flex justify-content-end gap-2">
            <button type="button" class="btn btn-secondary" @onclick="OnCancel">
                <i class="fas fa-times"></i> Cancelar
            </button>
            <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                @if (isSubmitting)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                }
                <i class="fas fa-save"></i> @((User.Id == 0) ? "Crear Usuario" : "Actualizar Usuario")
            </button>
        </div>
    </EditForm>
</div>

@code {
    [Parameter] public UserDTO User { get; set; } = new();
    [Parameter] public EventCallback<UserDTO> OnSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private HealthProfessionalDTO? selectedProfessional;
    private string selectedProfessionalName = string.Empty;
    private bool isSubmitting = false;

    protected override async Task OnParametersSetAsync()
    {
        // Si el usuario ya tiene un PersonId (que en este contexto es HealthProfessionalId)
        // y no hemos cargado el profesional, cárgalo.
        if (User.PersonId.HasValue && selectedProfessional == null)
        {
            // Obtener el profesional de salud por su ID
            selectedProfessional = await HealthProfessionalService.GetByIdAsync(User.PersonId.Value);
            if (selectedProfessional != null)
            {
                selectedProfessionalName = selectedProfessional.FullName;

                // Obtener la persona asociada para obtener el email
                var person = await PersonService.GetPersonById(User.PersonId.Value);
                if (person != null)
                {
                    User.Email = person.Email; // Autocargar email al editar
                }
            }
            else
            {
                selectedProfessionalName = "Profesional no encontrado";
            }
        }

        // Asegurar que IsActive tenga un valor por defecto si es null
        if (!User.IsActive.HasValue)
        {
            User.IsActive = true;
        }
    }

    private async Task OnProfessionalSelected(HealthProfessionalDTO professional)
    {
        selectedProfessional = professional;
        selectedProfessionalName = professional.FullName;
        User.PersonId = professional.HealthProfessionalId; // El PersonId del usuario es el HealthProfessionalId
        User.Name = professional.FullName; // Asignar el nombre completo del profesional

        // Obtener el email de la persona asociada al profesional
        var person = await PersonService.GetPersonById(professional.HealthProfessionalId);
        if (person != null)
        {
            User.Email = person.Email; // Autocargar el email de la persona seleccionada
        }
        else
        {
            User.Email = null; // Si no se encuentra la persona, el email queda nulo
        }

        StateHasChanged();
    }

    private void ClearProfessionalSelection() // Renombrado para mayor claridad
    {
        selectedProfessional = null;
        selectedProfessionalName = string.Empty;
        User.PersonId = null;
        User.Name = null;
        User.Email = null; // Limpiar también el email
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        if (User.PersonId == null)
        {
            await JS.InvokeVoidAsync("alert", "Debe seleccionar un profesional de salud");
            return;
        }

        // El email se autocarga y es readonly, así que no se valida aquí
        // if (string.IsNullOrWhiteSpace(User.Email))
        // {
        //     await JS.InvokeVoidAsync("alert", "El email es requerido");
        //     return;
        // }

        if (string.IsNullOrWhiteSpace(User.Password))
        {
            await JS.InvokeVoidAsync("alert", "La contraseña es requerida");
            return;
        }

        // Asegurar que IsActive tenga un valor por defecto
        if (!User.IsActive.HasValue)
        {
            User.IsActive = true;
        }

        isSubmitting = true;
        StateHasChanged();

        try
        {
            await OnSaved.InvokeAsync(User);
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }
}
