@page "/medical-history/general"
@using SMED.FrontEnd.Components
@using SMED.FrontEnd.Services
@using SMED.Shared.DTOs
@inject PersonalHistoryService PersonalHistoryService
@inject DiseaseService DiseaseService
@inject ILogger<General> Logger

<TabContainer>
    <h4>Historia Clínica - General</h4>

    <PatientSelector @bind-Value="clinicalHistoryId"
                     OnPatientSelected="HandlePatientSelected" />

    @if (clinicalHistoryId > 0)
    {
        <div class="editable-table-wrapper">
            <EditableTable Title="Antecedentes Personales"
                           ColumnHeaders="@headersPersonales"
                           Rows="@personalesRows"
                           OnAddRequested="PrepareForAdd"
                           OnEditRequested="PrepareForEdit"
                           OnDeleteRequested="HandleRowDeleted"
                           OnSaveRequested="SaveChanges"
                           IsValidForm="() => !string.IsNullOrEmpty(selectedDisease)">

                <EditModalContent>
                    <div class="form-group mb-3">
                        <label>Tipo de Enfermedad</label>
                        <select class="form-select" @onchange="OnDiseaseTypeChanged">
                            <option value="">Seleccione un tipo</option>
                            @foreach (var type in diseaseTypes)
                            {
                                <option value="@type.DiseaseTypeId" selected="@(selectedDiseaseType == type.DiseaseTypeId)">
                                    @type.Name
                                </option>
                            }
                        </select>
                    </div>
                    <div class="form-group mb-3">
                        <label>Enfermedad</label>
                        <select class="form-select" @bind="selectedDisease" disabled="@(!canSelectDisease)">
                            <option value="">@(canSelectDisease ? "Seleccione una enfermedad" : "Seleccione primero el tipo")</option>
                            @foreach (var disease in availableDiseases)
                            {
                                <option value="@disease">@disease</option>
                            }
                        </select>
                        @if (isLoadingDiseases)
                        {
                            <div class="text-muted mt-1">Cargando enfermedades...</div>
                        }
                    </div>
                </EditModalContent>

            </EditableTable>
        </div>
    }
    else
    {
        <p class="text-muted">Seleccione un paciente con historia clínica para mostrar los antecedentes personales.</p>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">
            @errorMessage
            <button type="button" class="btn-close float-end" @onclick="() => errorMessage = string.Empty"></button>
        </div>
    }
</TabContainer>

@code {
    private int clinicalHistoryId = 0;
    private string medicalRecordNumber = string.Empty;
    private string errorMessage = string.Empty;

    // Datos para la tabla
    private readonly List<string> headersPersonales = new() { "Tipo de Enfermedad", "Enfermedad" };
    private List<List<string>> personalesRows = new();
    private List<DiseaseTypeDTO> diseaseTypes = new();
    private List<PersonalHistoryDTO> currentPersonalHistories = new();

    // Estado para el formulario de edición
    private int selectedDiseaseType = 0;
    private string selectedDisease = "";
    private List<string> availableDiseases = new();
    private bool isLoadingDiseases = false;
    private bool canSelectDisease => selectedDiseaseType > 0;
    private int editingIndex = -1;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            diseaseTypes = await DiseaseService.GetAllAsyncDiseaseTypes();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar tipos de enfermedad");
            errorMessage = "Error al cargar los tipos de enfermedad. Por favor intente nuevamente.";
        }
    }

    private async Task LoadHistories()
    {
        try
        {
            errorMessage = string.Empty;
            personalesRows.Clear();
            currentPersonalHistories.Clear();

            var result = await PersonalHistoryService.GetByClinicalHistoryIdAsync(clinicalHistoryId);
            currentPersonalHistories = result ?? new();

            foreach (var ph in currentPersonalHistories)
            {
                if (ph.DiseaseId.HasValue)
                {
                    var disease = await DiseaseService.GetByIdAsync(ph.DiseaseId.Value);
                    if (disease != null)
                    {
                        var tipo = diseaseTypes.FirstOrDefault(dt => dt.DiseaseTypeId == disease.DiseaseTypeId)?.Name ?? "Desconocido";
                        personalesRows.Add(new() { tipo, disease.Name });
                    }
                }
            }

            if (personalesRows.Count == 0)
                personalesRows.Add(new() { "", "" });
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar antecedentes personales");
            errorMessage = "Error al cargar los antecedentes personales. Intente nuevamente.";
        }
    }

    private async Task OnDiseaseTypeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var typeId))
        {
            selectedDiseaseType = typeId;
            selectedDisease = "";
            availableDiseases.Clear();
            isLoadingDiseases = true;

            try
            {
                var diseases = await DiseaseService.GetDiseasesByTypeAsync(typeId);
                availableDiseases = diseases?.Select(d => d.Name).ToList() ?? new();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, $"Error obteniendo enfermedades para tipo {typeId}");
                errorMessage = "No se pudieron cargar las enfermedades.";
            }
            finally
            {
                isLoadingDiseases = false;
            }
        }
    }

    private void PrepareForAdd()
    {
        editingIndex = -1;
        selectedDiseaseType = 0;
        selectedDisease = "";
        availableDiseases = new();
    }

    private async Task PrepareForEdit(int index)
    {
        editingIndex = index;

        if (index < 0 || index >= personalesRows.Count) return;

        var diseaseTypeName = personalesRows[index][0];
        var diseaseName = personalesRows[index][1];

        var type = diseaseTypes.FirstOrDefault(t => t.Name == diseaseTypeName);
        if (type != null)
        {
            selectedDiseaseType = type.DiseaseTypeId;
            selectedDisease = diseaseName;

            isLoadingDiseases = true;
            try
            {
                var diseases = await DiseaseService.GetDiseasesByTypeAsync(type.DiseaseTypeId);
                availableDiseases = diseases?.Select(d => d.Name).ToList() ?? new();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, $"Error obteniendo enfermedades para tipo {type.DiseaseTypeId}");
                errorMessage = "No se pudieron cargar las enfermedades.";
            }
            finally
            {
                isLoadingDiseases = false;
            }
        }
    }

    private async Task SaveChanges()
    {
        try
        {
            errorMessage = string.Empty;

            if (string.IsNullOrWhiteSpace(selectedDisease))
            {
                errorMessage = "Debe seleccionar una enfermedad.";
                return;
            }

            var type = diseaseTypes.FirstOrDefault(t => t.DiseaseTypeId == selectedDiseaseType);
            if (type == null)
            {
                errorMessage = "Tipo de enfermedad no válido.";
                return;
            }

            if (editingIndex == -1)
            {
                await AddNewRecord(type.Name, selectedDisease);
            }
            else
            {
                await UpdateExistingRecord(editingIndex, type.Name, selectedDisease);
            }

            await LoadHistories();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al guardar cambios");
            errorMessage = "Error inesperado al guardar cambios.";
        }
    }

    private async Task AddNewRecord(string diseaseType, string disease)
    {
        var enfermedades = await DiseaseService.GetDiseasesByTypeAsync(selectedDiseaseType);
        var enfermedad = enfermedades.FirstOrDefault(d => d.Name == disease);
        if (enfermedad == null)
        {
            errorMessage = "Enfermedad no encontrada.";
            return;
        }

        var nuevo = new PersonalHistoryDTO
            {
                ClinicalHistoryId = clinicalHistoryId,
                DiseaseId = enfermedad.DiseaseId,
                Description = $"{diseaseType} - {disease}",
                RegistrationDate = DateTime.Now,
                MedicalRecordNumber = medicalRecordNumber
            };

        var (success, result, error) = await PersonalHistoryService.CreateAsync(nuevo);

        if (!success)
        {
            errorMessage = $"Error al crear antecedente: {error}";
        }
    }

    private async Task UpdateExistingRecord(int index, string diseaseType, string disease)
    {
        if (index < 0 || index >= currentPersonalHistories.Count)
        {
            errorMessage = "Índice inválido para actualizar.";
            return;
        }

        var enfermedades = await DiseaseService.GetDiseasesByTypeAsync(selectedDiseaseType);
        var enfermedad = enfermedades.FirstOrDefault(d => d.Name == disease);
        if (enfermedad == null)
        {
            errorMessage = "Enfermedad no encontrada.";
            return;
        }

        var toUpdate = currentPersonalHistories[index];
        toUpdate.DiseaseId = enfermedad.DiseaseId;
        toUpdate.Description = $"{diseaseType} - {disease}";

        var (success, error) = await PersonalHistoryService.UpdateAsync(toUpdate);

        if (!success)
        {
            errorMessage = $"Error al actualizar antecedente: {error}";
        }
    }

    private async Task HandleRowDeleted(int rowIndex)
    {
        try
        {
            errorMessage = string.Empty;

            if (rowIndex < 0 || rowIndex >= currentPersonalHistories.Count)
            {
                errorMessage = "Índice inválido para eliminar.";
                return;
            }

            var toDelete = currentPersonalHistories[rowIndex];
            var (success, error) = await PersonalHistoryService.DeleteAsync(toDelete.PersonalHistoryId);

            if (!success)
            {
                errorMessage = $"Error al eliminar antecedente: {error}";
                return;
            }

            await LoadHistories();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al eliminar antecedente");
            errorMessage = "Error inesperado al eliminar antecedente.";
        }
    }

    private async void HandlePatientSelected((int ClinicalHistoryId, string MedicalRecordNumber) patient)
    {
        clinicalHistoryId = patient.ClinicalHistoryId;
        medicalRecordNumber = patient.MedicalRecordNumber;

        if (clinicalHistoryId > 0)
        {
            await LoadHistories();
            StateHasChanged();
        }
    }
}