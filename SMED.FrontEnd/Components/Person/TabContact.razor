@using SMED.Shared.DTOs
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<div class="form-section">
    <h5 class="mb-3"><i class="fas fa-map-marker-alt me-2"></i>Dirección</h5>
    <div class="row">
        <div class="col-md-6">
            <div class="form-group mb-3">
                <label class="form-label fw-bold">Calle Principal *</label>
                <InputText class="@GetInputClass(string.IsNullOrWhiteSpace(MainStreet))"
                           @bind-Value="MainStreet" 
                           placeholder="Ingrese Calle Principal" />
                @if (ShowValidationErrors && string.IsNullOrWhiteSpace(MainStreet))
                {
                    <div class="invalid-feedback">La calle principal es obligatoria</div>
                }
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group mb-3">
                <label class="form-label fw-bold">Calle Secundaria 1 *</label>
                <InputText class="@GetInputClass(string.IsNullOrWhiteSpace(SecondaryStreet1))"
                           @bind-Value="SecondaryStreet1" 
                           placeholder="Ingrese Calle Secundaria 1" />
                @if (ShowValidationErrors && string.IsNullOrWhiteSpace(SecondaryStreet1))
                {
                    <div class="invalid-feedback">La calle secundaria 1 es obligatoria</div>
                }
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="form-group mb-3">
                <label class="form-label">Calle Secundaria 2</label>
                <InputText class="form-control" @bind-Value="SecondaryStreet2" 
                placeholder="Ingrese Calle Secundaria 2" />
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group mb-3">
                <label class="form-label">Número de Casa</label>
                <InputText class="form-control" @bind-Value="HouseNumber"
                           placeholder="Ingrese Número de Casa" />
            </div>
        </div>
    </div>

    <div class="form-group mb-3">
        <label class="form-label fw-bold">Referencia *</label>
        <InputText class="@GetInputClass(string.IsNullOrWhiteSpace(Reference))"
                   @bind-Value="Reference" 
                   placeholder="Ingrese una Referencia" />
        @if (ShowValidationErrors && string.IsNullOrWhiteSpace(Reference))
        {
            <div class="invalid-feedback">La referencia es obligatoria</div>
        }
    </div>
</div>

<div class="form-section">
    <h5 class="mb-3"><i class="fas fa-phone me-2"></i>Teléfonos</h5>
    <div class="row">
        <div class="col-md-6">
            <div class="form-group mb-3">
                <label class="form-label">Teléfono Fijo</label>
                <input type="text"
                       class="@GetPhoneInputClass("landline")"
                       @bind="landlineInput"
                       @oninput="OnLandlineInput"
                       placeholder="Ingrese el teléfono fijo"
                       maxlength="9" />
                @if (!string.IsNullOrEmpty(landlineError))
                {
                    <div class="invalid-feedback" style="display: block;">
                        <i class="fas fa-exclamation-triangle me-1"></i>@landlineError
                    </div>
                }
                <small class="form-text text-muted">Formato: código de área + número (9 dígitos total)</small>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group mb-3">
                <label class="form-label fw-bold">Celular *</label>
                <input type="text"
                       class="@GetPhoneInputClass("mobile")"
                       @bind="mobileInput"
                       @oninput="OnMobileInput"
                       placeholder="Ingrese el número de celular"
                       maxlength="10" />
                @if (!string.IsNullOrEmpty(mobileError))
                {
                    <div class="invalid-feedback" style="display: block;">
                        <i class="fas fa-exclamation-triangle me-1"></i>@mobileError
                    </div>
                }
                @if (ShowValidationErrors && string.IsNullOrWhiteSpace(Mobile))
                {
                    <div class="invalid-feedback">El número de celular es obligatorio</div>
                }
                <small class="form-text text-muted">Formato: 09XXXXXXXX (10 dígitos, debe empezar con 09)</small>
            </div>
        </div>
    </div>
</div>

<div class="form-section">
    <h5 class="mb-3"><i class="fas fa-home me-2"></i>Residencia</h5>
    <div class="row">
        <div class="col-md-6">
            <div class="form-group mb-3">
                <label class="form-label fw-bold">Provincia *</label>
                <InputSelect @bind-Value="SelectedProvinceId"
                             class="@GetInputClass(!SelectedProvinceId.HasValue)">
                    <option value="">-- Seleccione Provincia --</option>
                    @if (provincias != null)
                    {
                        @foreach (var provincia in provincias)
                        {
                            <option value="@provincia.Id">@provincia.Name</option>
                        }
                    }
                </InputSelect>
                @if (ShowValidationErrors && !SelectedProvinceId.HasValue)
                {
                    <div class="invalid-feedback">Debe seleccionar una provincia</div>
                }
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group mb-3">
                <label class="form-label fw-bold">Ciudad *</label>
                <InputSelect @bind-Value="Person.Residence.CityId"
                             class="@GetInputClass(!(Person.Residence?.CityId.HasValue == true))"
                             disabled="@(ciudades == null || !ciudades.Any())">
                    <option value="">-- Seleccione Ciudad --</option>
                    @if (ciudades != null)
                    {
                        @foreach (var ciudad in ciudades)
                        {
                            <option value="@ciudad.Id">@ciudad.Name</option>
                        }
                    }
                </InputSelect>
                @if (ShowValidationErrors && !(Person.Residence?.CityId.HasValue == true))
                {
                    <div class="invalid-feedback">Debe seleccionar una ciudad</div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public PersonDTO Person { get; set; } = new();
    [Parameter] public bool ShowValidationErrors { get; set; }
    [Parameter] public EventCallback<int?> ProvinceIdChanged { get; set; }

    private List<ProvinceDTO>? provincias;
    private List<CityDTO>? ciudades;
    private bool isLoading = false;

    // Variables para validación de teléfonos
    private string landlineInput = "";
    private string mobileInput = "";
    private string landlineError = "";
    private string mobileError = "";

    // Método helper para generar clases CSS
    private string GetInputClass(bool hasError)
    {
        return $"form-control {(ShowValidationErrors && hasError ? "is-invalid" : "")}";
    }

    // Método específico para inputs de teléfono
    private string GetPhoneInputClass(string phoneType)
    {
        var baseClass = "form-control";
        var hasError = phoneType == "landline" ? !string.IsNullOrEmpty(landlineError) : !string.IsNullOrEmpty(mobileError);

        if (hasError)
            baseClass += " is-invalid";
        else if ((phoneType == "landline" && !string.IsNullOrEmpty(landlineInput)) ||
                 (phoneType == "mobile" && !string.IsNullOrEmpty(mobileInput)))
            baseClass += " is-valid";

        return baseClass;
    }

    // Validación para teléfono fijo
    private void OnLandlineInput(ChangeEventArgs e)
    {
        var input = e.Value?.ToString() ?? "";

        // Filtrar solo números
        var numericInput = new string(input.Where(char.IsDigit).ToArray());

        // Limitar a 9 dígitos
        if (numericInput.Length > 9)
            numericInput = numericInput.Substring(0, 9);

        landlineInput = numericInput;
        Landline = numericInput;

        // Validar
        ValidateLandline(numericInput);
        StateHasChanged();
    }

    private void ValidateLandline(string phone)
    {
        if (string.IsNullOrEmpty(phone))
        {
            landlineError = "";
            return;
        }

        if (phone.Length != 9)
        {
            landlineError = "Debe tener exactamente 9 dígitos (ej: 032445388)";
            return;
        }

        // Verificar código de área válido (02, 03, 04, 05, 06, 07)
        if (!System.Text.RegularExpressions.Regex.IsMatch(phone, @"^0[2-7]"))
        {
            landlineError = "Debe empezar con un código de área válido (02, 03, 04, 05, 06, 07)";
            return;
        }

        landlineError = "";
    }

    // Validación para celular
    private void OnMobileInput(ChangeEventArgs e)
    {
        var input = e.Value?.ToString() ?? "";

        // Filtrar solo números
        var numericInput = new string(input.Where(char.IsDigit).ToArray());

        // Limitar a 10 dígitos
        if (numericInput.Length > 10)
            numericInput = numericInput.Substring(0, 10);

        mobileInput = numericInput;
        Mobile = numericInput;

        // Validar
        ValidateMobile(numericInput);
        StateHasChanged();
    }

    private void ValidateMobile(string mobile)
    {
        if (string.IsNullOrEmpty(mobile))
        {
            mobileError = "El número de celular es obligatorio";
            return;
        }

        if (mobile.Length != 10)
        {
            mobileError = "Debe tener exactamente 10 dígitos";
            return;
        }

        if (!mobile.StartsWith("09"))
        {
            mobileError = "Debe empezar con 09";
            return;
        }

        mobileError = "";
    }

    protected override async Task OnInitializedAsync()
    {
        Person.Address ??= new() { new PersonAddressDTO() };
        Person.Residence ??= new PersonResidenceDTO();
        Person.Phone ??= new PersonPhoneDTO();

        // Inicializar valores de teléfonos si existen
        landlineInput = Person.Phone?.Landline ?? "";
        mobileInput = Person.Phone?.Mobile ?? "";

        await LoadProvinces();

        if (Person.Residence.ProvinceId.HasValue)
        {
            await LoadCities(Person.Residence.ProvinceId.Value);
            if (Person.Residence.CityId.HasValue)
            {
                var ciudad = ciudades?.FirstOrDefault(c => c.Id == Person.Residence.CityId);
                Person.Residence.CityName = ciudad?.Name;
            }
        }

        await SaveToLocalStorage();
    }

    private async Task LoadProvinces()
    {
        isLoading = true;
        try
        {
            provincias = await Http.GetFromJsonAsync<List<ProvinceDTO>>("api/complements/provinces");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading provinces: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadCities(int provinceId)
    {
        if (provinceId <= 0) return;

        isLoading = true;
        try
        {
            ciudades = await Http.GetFromJsonAsync<List<CityDTO>>($"api/complements/city/{provinceId}");
            var selectedProvince = provincias?.FirstOrDefault(p => p.Id == provinceId);
            if (selectedProvince != null)
            {
                Person.Residence.ProvinceName = selectedProvince.Name;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading cities: {ex.Message}");
            ciudades = new List<CityDTO>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SaveToLocalStorage()
    {
        try
        {
            await localStorage.SetItemAsync("person", Person);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving to localStorage: {ex.Message}");
        }
    }

    private int? SelectedProvinceId
    {
        get => Person.Residence?.ProvinceId;
        set
        {
            if (Person.Residence == null)
                Person.Residence = new PersonResidenceDTO();

            if (Person.Residence.ProvinceId != value)
            {
                Person.Residence.ProvinceId = value;
                Person.Residence.CityId = null;
                Person.Residence.CityName = null;

                var provincia = provincias?.FirstOrDefault(p => p.Id == value);
                Person.Residence.ProvinceName = provincia?.Name;

                _ = LoadCitiesAndSave(value);
            }
        }
    }

    private async Task LoadCitiesAndSave(int? provinceId)
    {
        if (provinceId.HasValue)
            await LoadCities(provinceId.Value);

        await ProvinceIdChanged.InvokeAsync(provinceId);
        await SaveToLocalStorage();
        StateHasChanged();
    }

    // INPUTS - Propiedades para direcciones (sin cambios)
    private string? MainStreet
    {
        get => Person.Address?.ElementAtOrDefault(0)?.MainStreet;
        set
        {
            if (Person.Address != null && Person.Address.Count > 0)
            {
                Person.Address[0].MainStreet = value;
            }
        }
    }

    private string? SecondaryStreet1
    {
        get => Person.Address?.ElementAtOrDefault(0)?.SecondaryStreet1;
        set
        {
            if (Person.Address != null && Person.Address.Count > 0)
            {
                Person.Address[0].SecondaryStreet1 = value;
            }
        }
    }

    private string? SecondaryStreet2
    {
        get => Person.Address?.ElementAtOrDefault(0)?.SecondaryStreet2;
        set
        {
            if (Person.Address != null && Person.Address.Count > 0)
            {
                Person.Address[0].SecondaryStreet2 = value;
            }
        }
    }

    private string? HouseNumber
    {
        get => Person.Address?.ElementAtOrDefault(0)?.HouseNumber;
        set
        {
            if (Person.Address != null && Person.Address.Count > 0)
            {
                Person.Address[0].HouseNumber = value;
            }
        }
    }

    private string? Reference
    {
        get => Person.Address?.ElementAtOrDefault(0)?.Reference;
        set
        {
            if (Person.Address != null && Person.Address.Count > 0)
            {
                Person.Address[0].Reference = value;
            }
        }
    }

    // INPUTS - Propiedades para teléfonos (actualizadas)
    private string? Landline
    {
        get => Person.Phone?.Landline;
        set
        {
            if (Person.Phone == null)
                Person.Phone = new PersonPhoneDTO();
            Person.Phone.Landline = value;
        }
    }

    private string? Mobile
    {
        get => Person.Phone?.Mobile;
        set
        {
            if (Person.Phone == null)
                Person.Phone = new PersonPhoneDTO();
            Person.Phone.Mobile = value;
        }
    }
}
