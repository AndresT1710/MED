@page "/medical-history/obstetric"
@using SMED.FrontEnd.Components
@using SMED.FrontEnd.Services
@using SMED.Shared.DTOs

@inject ObstetricHistoryService ObstetricHistoryService
@inject ILogger<Obstetric> Logger

<TabContainer>
    <h4>Historia Clínica - Obstétrico</h4>

    <PatientSelector @bind-Value="clinicalHistoryId"
                     OnPatientSelected="HandlePatientSelected" />

    @if (clinicalHistoryId > 0)
    {
        <div class="d-flex flex-wrap">
            <Check Title="Embarazo actual"
                   @bind-Value="obstetric.CurrentPregnancy" />

            <Check Title="Embarazos previos"
                   @bind-Value="obstetric.PreviousPregnancies" />

            <Check Title="Partos"
                   @bind-Value="obstetric.Deliveries" />

            <Check Title="Antecedentes de aborto espontáneo"
                   @bind-Value="obstetric.Abortions" />

            <Check Title="Cesáreas"
                   @bind-Value="obstetric.CSections" />

            <Check Title="Lactando"
                   @bind-Value="obstetric.Breastfeeding" />
        </div>

        <div class="containerbox1-grid">
            
            <ContainerBox1 Title="Nacidos Vivos"
                           Width="half"
                           @bind-Content="liveBirthsContent"
                           @bind-Content:after="OnLiveBirthsContentChanged" />

            <ContainerBox1 Title="Nacidos Muertos"
                           Width="half"
                           @bind-Content="stillbirthsContent"
                           @bind-Content:after="OnStillbirthsContentChanged" />

            <ContainerBox1 Title="Hijos Vivos"
                           Width="half"
                           @bind-Content="livingChildrenContent"
                           @bind-Content:after="OnLivingChildrenContentChanged" />

            <ContainerBox1 Title="Edad Gestacional"
                           Width="half"
                           @bind-Content="gestationalAgeContent"
                           @bind-Content:after="OnGestationalAgeContentChanged" />
        </div>

        <div class="containerbox2-grid">
            
            <ContainerBox2 Title="Fecha probable de parto"
                           Width="half"
                           @bind-SelectedDate="expectedDeliveryDate"
                           @bind-SelectedDate:after="OnExpectedDeliveryDateChanged" />
        </div>

       

        @if(!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-3">
                @errorMessage
                <button type="button" class="btn-close float-end" @onclick="ClearErrorMessage"></button>
            </div>
        }
    }
    else
    {
        <p class="text-muted">Seleccione un paciente con historia clínica para mostrar los antecedentes obstétricos.</p>
    }
</TabContainer>

@code {
    private int clinicalHistoryId = 0;
    private string medicalRecordNumber = string.Empty;
    private ObstetricHistoryDTO obstetric = new();
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    // Variables para ContainerBox1
    private string liveBirthsContent = "";
    private string stillbirthsContent = "";
    private string livingChildrenContent = "";
    private string gestationalAgeContent = "";

    // Variables para ContainerBox2
    private DateTime? expectedDeliveryDate = null;

    private async Task OnLiveBirthsContentChanged()
    {
        if (clinicalHistoryId > 0)
        {
            await SaveObstetricDataAsync();
        }
    }

    private async Task OnStillbirthsContentChanged()
    {
        if (clinicalHistoryId > 0)
        {
            await SaveObstetricDataAsync();
        }
    }

    private async Task OnLivingChildrenContentChanged()
    {
        if (clinicalHistoryId > 0)
        {
            await SaveObstetricDataAsync();
        }
    }

    private async Task OnGestationalAgeContentChanged()
    {
        if (clinicalHistoryId > 0)
        {
            await SaveObstetricDataAsync();
        }
    }

    private async Task OnExpectedDeliveryDateChanged()
    {
        if (clinicalHistoryId > 0)
        {
            await SaveObstetricDataAsync();
        }
    }

    private async Task HandlePatientSelected((int ClinicalHistoryId, string MedicalRecordNumber, int PersonId) patient)
    {
        clinicalHistoryId = patient.ClinicalHistoryId;
        medicalRecordNumber = patient.MedicalRecordNumber;

        if (clinicalHistoryId > 0)
        {
            await LoadObstetricHistory();
        }
    }

    private async Task LoadObstetricHistory()
    {
        errorMessage = string.Empty;
        isLoading = true;

        try
        {
            var result = await ObstetricHistoryService.GetByClinicalHistoryIdAsync(clinicalHistoryId);
            if (result != null)
            {
                obstetric = result;

                // Cargar datos en ContainerBox
                liveBirthsContent = obstetric.LiveBirths?.ToString() ?? "";
                stillbirthsContent = obstetric.Stillbirths?.ToString() ?? "";
                livingChildrenContent = obstetric.LivingChildren?.ToString() ?? "";
                gestationalAgeContent = obstetric.GestionalAge ?? "";
                expectedDeliveryDate = obstetric.ExpectedDeliveryDate;
            }
            else
            {
                // Crear nuevo registro si no existe
                obstetric = new ObstetricHistoryDTO
                {
                    ClinicalHistoryId = clinicalHistoryId,
                    HistoryNumber = medicalRecordNumber
                };

                // Limpiar ContainerBox
                liveBirthsContent = "";
                stillbirthsContent = "";
                livingChildrenContent = "";
                gestationalAgeContent = "";
                expectedDeliveryDate = null;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar historia obstétrica");
            errorMessage = "Error al cargar los datos obstétricos.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SaveObstetricDataAsync()
    {
        try
        {
            if (clinicalHistoryId <= 0)
            {
                return; // No hacer nada si no hay paciente seleccionado
            }

            // Actualizar DTO con datos de ContainerBox
            if (int.TryParse(liveBirthsContent, out var liveBirths))
                obstetric.LiveBirths = liveBirths;
            else
                obstetric.LiveBirths = null;

            if (int.TryParse(stillbirthsContent, out var stillbirths))
                obstetric.Stillbirths = stillbirths;
            else
                obstetric.Stillbirths = null;

            if (int.TryParse(livingChildrenContent, out var livingChildren))
                obstetric.LivingChildren = livingChildren;
            else
                obstetric.LivingChildren = null;

            obstetric.GestionalAge = string.IsNullOrWhiteSpace(gestationalAgeContent) ? null : gestationalAgeContent;
            obstetric.ExpectedDeliveryDate = expectedDeliveryDate;

            // Asegurar que los datos básicos estén establecidos
            obstetric.ClinicalHistoryId = clinicalHistoryId;
            obstetric.HistoryNumber = medicalRecordNumber;

            bool success;
            string error;

            if (obstetric.ObstetricHistoryId == 0)
            {
                // Crear nuevo registro
                var (createSuccess, _, createError) = await ObstetricHistoryService.CreateAsync(obstetric);
                success = createSuccess;
                error = createError;
            }
            else
            {
                // Actualizar registro existente
                var (updateSuccess, updateError) = await ObstetricHistoryService.UpdateAsync(obstetric);
                success = updateSuccess;
                error = updateError;
            }

            if (success)
            {
                await LoadObstetricHistory(); // Recargar para obtener el ID actualizado
                errorMessage = string.Empty; // Limpiar errores previos
            }
            else
            {
                Logger.LogError("Error al guardar datos obstétricos: {Error}", error);
                // No mostrar error al usuario para auto-save, solo registrar en logs
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error técnico al guardar datos obstétricos");
            // No mostrar error al usuario para auto-save, solo registrar en logs
        }
    }

    private void ClearErrorMessage() => errorMessage = string.Empty;
}
