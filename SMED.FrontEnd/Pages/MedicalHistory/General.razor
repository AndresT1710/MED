@page "/medical-history/general"
@using SMED.FrontEnd.Components
@using SMED.FrontEnd.Services
@using SMED.Shared.DTOs
@inject PersonalHistoryService PersonalHistoryService
@inject DiseaseService DiseaseService
@inject ILogger<General> Logger

<TabContainer>
    <h4>Historia Clínica - General</h4>

    <PatientSelector @bind-Value="clinicalHistoryId" />

    @if (clinicalHistoryId > 0)
    {
        <div class="editable-table-wrapper">
            <EditableTable Title="Antecedentes Personales"
                           ColumnHeaders="@headersPersonales"
                           Rows="@personalesRows"
                           DiseaseTypes="@diseaseTypes"
                           GetDiseaseNamesByType="@GetDiseaseNamesByType"
                           OnRowAdded="@(async (args) => await HandleRowAdded(args))"
                           OnRowUpdated="@(async (args) => await HandleRowUpdated(args))"
                           OnRowDeleted="@(async (args) => await HandleRowDeleted(args))" />
        </div>
    }
    else
    {
        <p class="text-muted">Seleccione un paciente con historia clínica para mostrar los antecedentes personales.</p>
    }

    <!-- Notificación de errores -->
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">
            @errorMessage
            <button type="button" class="btn-close float-end" @onclick="() => errorMessage = string.Empty"></button>
        </div>
    }
</TabContainer>

@code {
    private int clinicalHistoryId = 0;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    private readonly List<string> headersPersonales = new() { "Tipo de Enfermedad", "Enfermedad" };
    private List<List<string>> personalesRows = new();
    private List<DiseaseTypeDTO> diseaseTypes = new();
    private List<PersonalHistoryDTO> currentPersonalHistories = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            diseaseTypes = await DiseaseService.GetAllAsyncDiseaseTypes();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar tipos de enfermedad");
            errorMessage = "Error al cargar los tipos de enfermedad. Por favor intente nuevamente.";
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (clinicalHistoryId > 0)
        {
            await LoadHistories();
        }
        else
        {
            personalesRows.Clear();
            currentPersonalHistories.Clear();
        }
    }

    private async Task<List<string>> GetDiseaseNamesByType(int diseaseTypeId)
    {
        try
        {
            var diseases = await DiseaseService.GetDiseasesByTypeAsync(diseaseTypeId);
            return diseases?.Select(d => d.Name).ToList() ?? new List<string>();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error en GetDiseaseNamesByType para el tipo {diseaseTypeId}");
            return new List<string>();
        }
    }

    private async Task LoadHistories()
    {
        try
        {
            errorMessage = string.Empty;
            personalesRows.Clear();

            var result = await PersonalHistoryService.GetByClinicalHistoryIdAsync(clinicalHistoryId);
            currentPersonalHistories = result ?? new();

            foreach (var ph in currentPersonalHistories)
            {
                if (ph.DiseaseId.HasValue)
                {
                    var disease = await DiseaseService.GetByIdAsync(ph.DiseaseId.Value);
                    if (disease != null)
                    {
                        var tipo = diseaseTypes.FirstOrDefault(dt => dt.DiseaseTypeId == disease.DiseaseTypeId)?.Name ?? "Desconocido";
                        personalesRows.Add(new() { tipo, disease.Name });
                    }
                }
            }

            if (personalesRows.Count == 0)
                personalesRows.Add(new() { "", "" });
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error en LoadHistories");
            errorMessage = "Error al cargar los antecedentes personales. Por favor intente nuevamente.";
        }
    }

    private async Task HandleRowAdded((string diseaseType, string disease) args)
    {
        try
        {
            errorMessage = string.Empty;

            if (clinicalHistoryId <= 0)
            {
                errorMessage = "No se ha seleccionado una historia clínica válida.";
                return;
            }

            if (string.IsNullOrWhiteSpace(args.diseaseType) || string.IsNullOrWhiteSpace(args.disease))
            {
                errorMessage = "Debe seleccionar tanto el tipo como la enfermedad.";
                return;
            }

            var tipoDto = diseaseTypes.FirstOrDefault(dt => dt.Name == args.diseaseType);
            if (tipoDto == null)
            {
                errorMessage = "Tipo de enfermedad no válido.";
                return;
            }

            var enfermedades = await DiseaseService.GetDiseasesByTypeAsync(tipoDto.DiseaseTypeId);
            var enfermedad = enfermedades?.FirstOrDefault(d => d.Name == args.disease);
            if (enfermedad == null)
            {
                errorMessage = "Enfermedad no encontrada para el tipo seleccionado.";
                return;
            }

            var newHistory = new PersonalHistoryDTO
                {
                    ClinicalHistoryId = clinicalHistoryId,
                    DiseaseId = enfermedad.DiseaseId,
                    Description = $"{args.diseaseType} - {args.disease}",
                    RegistrationDate = DateTime.Now,
                    MedicalRecordNumber = GenerateMedicalRecordNumber()
                };

            var (success, result, error) = await PersonalHistoryService.CreateAsync(newHistory);

            if (!success)
            {
                errorMessage = $"Error al crear antecedente: {error}";
                Logger.LogError("Error al crear antecedente: {Error}", error);
                return;
            }

            await LoadHistories();
        }
        catch (Exception ex)
        {
            errorMessage = "Error inesperado al agregar antecedente.";
            Logger.LogError(ex, "Error en HandleRowAdded");
        }
    }

    private async Task HandleRowUpdated((int index, string diseaseType, string disease) args)
    {
        try
        {
            errorMessage = string.Empty;

            if (clinicalHistoryId <= 0 || args.index < 0 || args.index >= currentPersonalHistories.Count)
            {
                errorMessage = "Índice de antecedente no válido.";
                return;
            }

            var tipoDto = diseaseTypes.FirstOrDefault(dt => dt.Name == args.diseaseType);
            if (tipoDto == null)
            {
                errorMessage = "Tipo de enfermedad no válido.";
                return;
            }

            var enfermedades = await DiseaseService.GetDiseasesByTypeAsync(tipoDto.DiseaseTypeId);
            var enfermedad = enfermedades?.FirstOrDefault(d => d.Name == args.disease);
            if (enfermedad == null)
            {
                errorMessage = "Enfermedad no encontrada para el tipo seleccionado.";
                return;
            }

            var toUpdate = currentPersonalHistories[args.index];
            toUpdate.DiseaseId = enfermedad.DiseaseId;
            toUpdate.Description = $"{args.diseaseType} - {args.disease}";

            var (success, error) = await PersonalHistoryService.UpdateAsync(toUpdate);

            if (!success)
            {
                errorMessage = $"Error al actualizar antecedente: {error}";
                Logger.LogError("Error al actualizar antecedente: {Error}", error);
                return;
            }

            await LoadHistories();
        }
        catch (Exception ex)
        {
            errorMessage = "Error inesperado al actualizar antecedente.";
            Logger.LogError(ex, "Error en HandleRowUpdated");
        }
    }

    private async Task HandleRowDeleted(int rowIndex)
    {
        try
        {
            errorMessage = string.Empty;

            if (rowIndex < 0 || rowIndex >= currentPersonalHistories.Count)
            {
                errorMessage = "Índice de antecedente no válido.";
                return;
            }

            var toDelete = currentPersonalHistories[rowIndex];
            var (success, error) = await PersonalHistoryService.DeleteAsync(toDelete.PersonalHistoryId);

            if (!success)
            {
                errorMessage = $"Error al eliminar antecedente: {error}";
                Logger.LogError("Error al eliminar antecedente: {Error}", error);
                return;
            }

            await LoadHistories();
        }
        catch (Exception ex)
        {
            errorMessage = "Error inesperado al eliminar antecedente.";
            Logger.LogError(ex, "Error en HandleRowDeleted");
        }
    }

    private string GenerateMedicalRecordNumber()
    {
        return $"HC-{DateTime.Now:yyyyMMdd}-{Guid.NewGuid().ToString()[..4]}";
    }
}