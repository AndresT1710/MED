@page "/persons"
@layout MainLayout
@using SMED.FrontEnd.Components
@using SMED.Shared.Entity
@using SMED.Shared.DTOs
@using SMED.FrontEnd.Services
@inject PersonService PersonaService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject HttpClient Http

<style>
    /* Added embedded CSS for robust modal behavior */
    .person-modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1055;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .person-modal-content {
        background: white;
        border-radius: 0.375rem;
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        max-height: 90vh;
        overflow: hidden;
        display: flex;
        flex-direction: column;
        position: relative;
        z-index: 1056;
    }

    .person-modal-header {
        padding: 1rem;
        border-bottom: 1px solid #dee2e6;
        display: flex;
        align-items: center;
        justify-content: space-between;
        flex-shrink: 0;
    }

    .person-modal-body {
        padding: 1rem;
        overflow-y: auto;
        flex-grow: 1;
    }

    .person-close-btn {
        background: none;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
        padding: 0;
        width: 1.5rem;
        height: 1.5rem;
        display: flex;
        align-items: center;
        justify-content: center;
    }
</style>

<h3 class="mb-4">Gestión de Personas</h3>

<ManagementTable TableTitle="Personas"
                 Columns="PersonColumns"
                 SearchOptions="PersonSearch"
                 DocumentTypes="documentTypeList"
                 SearchCallback="SearchHandler"
                 AddCallback="@EventCallback.Factory.Create(this, AddPerson)"
                 ClearCallback="@EventCallback.Factory.Create(this, ClearSearch)"
                 RenderActions="RenderPersonActions"
                 @ref="table" />

@* Completely rebuilt modal structure with separate backdrop and explicit event handling *@
@if (showCard && selectedPerson != null)
{
    <div class="person-modal-backdrop" @onclick="CloseCard">
        <div class="person-modal-content" style="width: 1100px; max-width: 95vw;" @onclick:stopPropagation="true">
            <div class="person-modal-header">
                <h5 class="modal-title mb-0">Información de la Persona</h5>
                <button type="button" class="person-close-btn" @onclick="CloseCard">&times;</button>
            </div>
            <div class="person-modal-body">
                <PersonaCard person="selectedPerson" />
            </div>
        </div>
    </div>
}

@if (showForm && selectedPerson != null)
{
    <div class="person-modal-backdrop" @onclick="HideForm">
        <div class="person-modal-content" style="width: 800px; max-width: 95vw;" @onclick:stopPropagation="true">
            <div class="person-modal-header">
                <h5 class="modal-title mb-0">@((selectedPerson.Id == 0) ? "Nueva Persona" : "Editar Persona")</h5>
                <button type="button" class="person-close-btn" @onclick="HideForm">&times;</button>
            </div>
            <div class="person-modal-body">
                <PersonFormContent @ref="personFormRef" Person="selectedPerson" OnSaved="OnPersonSaved" OnCancel="HideForm" />
            </div>
        </div>
    </div>
}

@code {
    private EventCallback<string[]> SearchHandler => EventCallback.Factory.Create<string[]>(this, Search);

    private ManagementTable table;
    private PersonFormContent personFormRef;

    private List<string> PersonColumns = new()
    {
        "Primer Nombre", "Segundo Nombre", "Primer Apellido", "Segundo Apellido", "Cédula de Identidad", "Acciones"
    };

    private List<string> PersonSearch = new()
    {
        "Primer Nombre", "Segundo Nombre", "Primer Apellido", "Segundo Apellido", "Cédula de Identidad"
    };

    private PersonDTO selectedPerson;
    private bool showCard = false;
    private bool showForm = false;

    private List<DocumentTypeDTO> documentTypeList = new();
    private List<PersonDTO> personList = new();
    private List<List<string>> PersonData = new();
    private List<List<string>> FilteredData = new();

    protected override async Task OnInitializedAsync()
    {
        documentTypeList = await Http.GetFromJsonAsync<List<DocumentTypeDTO>>("api/Complements/document-types");
        await LoadPersonData();
        await table.LoadRecords(PersonData.Select(d => d.Concat(new[] { d[0] }).ToList()).ToList());
    }

    private async Task LoadPersonData()
    {
        personList = await PersonaService.GetAllPersons();

        PersonData = personList.Select(p => new List<string>
        {
            p.FirstName ?? "",
            p.MiddleName ?? "",
            p.LastName ?? "",
            p.SecondLastName ?? "",
            (p.Document?.DocumentTypeId == 1) ? (p.Document.DocumentNumber ?? "") : "",
            p.BirthDate?.ToString("yyyy-MM-dd") ?? "",
            p.Email ?? "",
            p.Address?.FirstOrDefault()?.MainStreet ?? "",
            p.Address?.FirstOrDefault()?.SecondaryStreet1 ?? "",
            p.Address?.FirstOrDefault()?.SecondaryStreet2 ?? "",
            p.Address?.FirstOrDefault()?.HouseNumber ?? "",
            p.Address?.FirstOrDefault()?.Reference ?? "",
            p.Phone?.Mobile ?? "",
            p.Phone?.Landline ?? "",
            p.MaritalStatus?.Name ?? "",
            p.MedicalInsurance?.FirstOrDefault()?.Name ?? "",
            p.Document?.DocumentNumber ?? "",
            p.Document?.DocumentTypeName ?? "",
            p.Laterality?.NameLaterality ?? "",
            p.Religion?.Name ?? "",
            p.Residence?.CityName ?? "",
            p.Residence?.ProvinceName ?? "",
            p.HealthProfessional?.NameTypeProfessional ?? "",
            p.HealthProfessional?.RegistrationNumber ?? "",
            p.BloodGroup?.Name ?? "",
            p.Professions?.FirstOrDefault()?.Name ?? "",
            p.LaborActivity?.FirstOrDefault()?.Name ?? "",
            p.EducationLevel?.Name ?? "",
            p.Id.ToString()
        }).ToList();
    }

    private async Task Search(string[] data)
    {
        string field = data[0];
        string value = data[1]?.Trim().ToLower() ?? "";

        if (string.IsNullOrEmpty(field) || string.IsNullOrEmpty(value))
        {
            await table.LoadRecords(PersonData.Select(d => d.Concat(new[] { d[0] }).ToList()).ToList());
            return;
        }

        int index = PersonColumns.IndexOf(field);
        if (index < 0) return;

        if (field == "Cédula de Identidad")
        {
            FilteredData = PersonData
                .Where(row => row[index].Equals(value, StringComparison.OrdinalIgnoreCase))
                .Select(r => r.Concat(new[] { r[0] }).ToList())
                .ToList();
        }
        else
        {
            FilteredData = PersonData
                .Where(row => row[index].ToLower().Contains(value))
                .Select(r => r.Concat(new[] { r[0] }).ToList())
                .ToList();
        }

        await table.LoadRecords(FilteredData);
    }

    private Task AddPerson()
    {
        selectedPerson = new PersonDTO();
        ShowForm();
        return Task.CompletedTask;
    }

    private async Task ClearSearch()
    {
        await table.ClearSearch();
        await LoadPersonData();
        await table.LoadRecords(PersonData.Select(d => d.Concat(new[] { d[0] }).ToList()).ToList());
    }

    RenderFragment<List<string>> RenderPersonActions => row => builder =>
    {
        int seq = 0;
        var id = row[28];

        var personToEdit = personList.FirstOrDefault(p => p.Id.ToString() == id);

        builder.OpenElement(seq++, "button");
        builder.AddAttribute(seq++, "class", "btn btn-sm btn-info me-1");
        builder.AddAttribute(seq++, "title", "Ver");
        builder.AddAttribute(seq++, "onclick", EventCallback.Factory.Create(this, () => ViewPerson(id)));
        builder.AddContent(seq++, "Ver");
        builder.CloseElement();

        builder.OpenElement(seq++, "button");
        builder.AddAttribute(seq++, "class", "btn btn-sm btn-warning me-1");
        builder.AddAttribute(seq++, "title", "Editar");
        if (personToEdit != null)
        {
            builder.AddAttribute(seq++, "onclick", EventCallback.Factory.Create(this, () => EditPerson(personToEdit)));
        }
        builder.AddContent(seq++, "Editar");
        builder.CloseElement();

        builder.OpenElement(seq++, "button");
        builder.AddAttribute(seq++, "class", "btn btn-sm btn-danger");
        builder.AddAttribute(seq++, "title", "Eliminar");
        builder.AddAttribute(seq++, "onclick", EventCallback.Factory.Create(this, () => DeletePerson(id)));
        builder.AddContent(seq++, "Eliminar");
        builder.CloseElement();
    };

    private void ViewPerson(string id)
    {
        selectedPerson = personList.FirstOrDefault(p => p.Id.ToString() == id);

        if (selectedPerson == null)
        {
            JS.InvokeVoidAsync("alert", $"No se encontró la persona con ID: {id}");
            return;
        }
        showCard = true;
    }

    private void CloseCard()
    {
        showCard = false;
        selectedPerson = null;
    }

    private void EditPerson(PersonDTO personToEdit)
    {
        selectedPerson = personToEdit;
        showForm = true;
    }

    private async Task DeletePerson(string id)
    {
        if (!int.TryParse(id, out int idInt))
        {
            await JS.InvokeVoidAsync("alert", "ID inválido");
            return;
        }

        var person = personList.FirstOrDefault(p => p.Id == idInt);
        if (person == null)
        {
            await JS.InvokeVoidAsync("alert", $"No se encontró la persona con ID: {id}");
            return;
        }

        bool confirmed = await JS.InvokeAsync<bool>("confirm", $"¿Estás seguro de eliminar a {person.FirstName}?");
        if (confirmed)
        {
            var success = await PersonaService.DeletePerson(idInt);
            if (success)
            {
                personList.Remove(person);
                await LoadPersonData();
                await JS.InvokeVoidAsync("alert", "Persona eliminada exitosamente");
                await table.LoadRecords(PersonData.Select(d => d.Concat(new[] { d[0] }).ToList()).ToList());
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Error al eliminar la persona");
            }
        }
    }

    private void ShowForm()
    {
        showForm = true;
    }

    private async Task HideForm()
    {
        if (personFormRef != null)
        {
            await personFormRef.ClearTemporaryData();
        }
        showForm = false;
        selectedPerson = null;
    }

    private async Task OnPersonSaved(PersonDTO newPerson)
    {
        showForm = false;
        await LoadPersonData();
        await table.LoadRecords(PersonData.Select(d => d.Concat(new[] { d[0] }).ToList()).ToList());
    }
}
