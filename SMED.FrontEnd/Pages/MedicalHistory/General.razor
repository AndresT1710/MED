@page "/medical-history/general"
@using SMED.FrontEnd.Components
@using SMED.FrontEnd.Services
@using SMED.Shared.DTOs
@inject DiseaseService DiseaseService
@inject PersonalHistoryService PersonalHistoryService
@inject IJSRuntime JSRuntime

<TabContainer>
    <h4>Historia Clínica - General</h4>

    <PatientSelector Value="clinicalHistoryId" ValueChanged="OnPatientChanged" />

    @if (clinicalHistoryId > 0)
    {
        <div class="row mt-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <ul class="nav nav-tabs card-header-tabs" role="tablist">
                            <li class="nav-item" role="presentation">
                                <button class="nav-link @(activeTab == "personal" ? "active" : "")"
                                        @onclick='() => activeTab = "personal"'>
                                    Antecedentes Personales
                                </button>
                            </li>
                        </ul>
                    </div>

                    <div class="card-body">
                        @if (activeTab == "personal")
                        {
                            <EditableTable Title="Antecedentes Personales"
                                           ColumnHeaders="@headersPersonales"
                                           Rows="@personalesRows"
                                           OnRowAdded="OnPersonalHistoryRowAdded"
                                           OnRowUpdated="OnPersonalHistoryRowUpdated"
                                           OnRowDeleted="OnPersonalHistoryRowDeleted"
                                           DiseaseTypes="@diseaseTypes"
                                           GetDiseaseNamesByType="GetDiseaseNamesByType" />
                        }
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-info mt-4">
            <i class="bi bi-info-circle me-2"></i>
            Seleccione un paciente con historia clínica para mostrar los antecedentes.
        </div>
    }
</TabContainer>

@code {
    private int clinicalHistoryId = 0;
    private string activeTab = "personal";

    // Antecedentes Personales
    private List<string> headersPersonales = new() { "Tipo de Enfermedad", "Enfermedad" };
    private List<List<string>> personalesRows = new();
    private List<PersonalHistoryDTO> currentPersonalHistories = new();

    // Antecedentes Familiares
    private List<string> headersFamiliares = new() { "Tipo de Enfermedad", "Enfermedad" };
    private List<List<string>> familiaresRows = new();

    // Datos compartidos
    private List<DiseaseTypeDTO> diseaseTypes = new();
    private Dictionary<string, int> enfermedadNombreToId = new();
    private Dictionary<int, string> enfermedadIdToNombre = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Cargar tipos de enfermedades
            diseaseTypes = await DiseaseService.GetAllAsyncDiseaseTypes();

            // Cargar todas las enfermedades para mapeo
            var allDiseases = await DiseaseService.GetAllAsync();
            foreach (var disease in allDiseases)
            {
                enfermedadNombreToId[disease.Name] = disease.DiseaseId;
                enfermedadIdToNombre[disease.DiseaseId] = disease.Name;
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error al inicializar: " + ex.Message);
        }
    }

    private async Task OnPatientChanged(int newId)
    {
        clinicalHistoryId = newId;

        if (clinicalHistoryId > 0)
        {
            await LoadPersonalHistoryAsync();
        }
        else
        {
            personalesRows.Clear();
            currentPersonalHistories.Clear();
            familiaresRows.Clear();
        }

        StateHasChanged();
    }

    private async Task<List<string>> GetDiseaseNamesByType(int diseaseTypeId)
    {
        var diseases = await DiseaseService.GetByTypeIdAsync(diseaseTypeId);
        return diseases.Select(d => d.Name).ToList();
    }


    #region Antecedentes Personales
    private async Task LoadPersonalHistoryAsync()
    {
        personalesRows.Clear();
        currentPersonalHistories.Clear();

        try
        {
            currentPersonalHistories = await PersonalHistoryService.GetByClinicalHistoryIdAsync(clinicalHistoryId);

            foreach (var ph in currentPersonalHistories)
            {
                if (ph.DiseaseId.HasValue)
                {
                    var disease = await DiseaseService.GetByIdAsync(ph.DiseaseId.Value);
                    if (disease != null)
                    {
                        var diseaseType = diseaseTypes.FirstOrDefault(dt => dt.DiseaseTypeId == disease.DiseaseTypeId);
                        string tipo = diseaseType?.Name ?? "Desconocido";
                        string nombre = disease.Name;

                        personalesRows.Add(new List<string> { tipo, nombre });
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error al cargar antecedentes personales: " + ex.Message);
        }
    }

    private async Task OnPersonalHistoryRowAdded((string diseaseType, string disease) args)
    {
        if (clinicalHistoryId <= 0) return;

        try
        {
            var enfermedadNombre = args.disease;
            if (string.IsNullOrWhiteSpace(enfermedadNombre)) return;

            if (!enfermedadNombreToId.TryGetValue(enfermedadNombre, out int enfermedadId))
            {
                // Si no está en el diccionario, buscar la enfermedad
                var allDiseases = await DiseaseService.GetAllAsync();
                var tipoNombre = args.diseaseType;
                var tipoDto = diseaseTypes.FirstOrDefault(dt => dt.Name == tipoNombre);

                if (tipoDto != null)
                {
                    var enfermedadDto = allDiseases.FirstOrDefault(d =>
                        d.Name == enfermedadNombre &&
                        d.DiseaseTypeId == tipoDto.DiseaseTypeId);

                    if (enfermedadDto != null)
                    {
                        enfermedadId = enfermedadDto.DiseaseId;
                        enfermedadNombreToId[enfermedadNombre] = enfermedadId;
                    }
                    else
                    {
                        return; // No se encontró la enfermedad
                    }
                }
                else
                {
                    return; // No se encontró el tipo
                }
            }

            var dto = new PersonalHistoryDTO
                {
                    ClinicalHistoryId = clinicalHistoryId,
                    DiseaseId = enfermedadId,
                    Description = $"{args.diseaseType} - {args.disease}",
                    RegistrationDate = DateTime.Now
                };

            var created = await PersonalHistoryService.CreateAsync(dto);
            if (created != null)
            {
                await LoadPersonalHistoryAsync();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error al agregar antecedente personal: " + ex.Message);
        }
    }

    private async Task OnPersonalHistoryRowUpdated((int rowIndex, string diseaseType, string disease) args)
    {
        if (clinicalHistoryId <= 0 || args.rowIndex < 0 || args.rowIndex >= currentPersonalHistories.Count)
            return;

        try
        {
            var enfermedadNombre = args.disease;
            if (string.IsNullOrWhiteSpace(enfermedadNombre)) return;

            if (!enfermedadNombreToId.TryGetValue(enfermedadNombre, out int enfermedadId))
            {
                // Si no está en el diccionario, buscar la enfermedad
                var allDiseases = await DiseaseService.GetAllAsync();
                var tipoNombre = args.diseaseType;
                var tipoDto = diseaseTypes.FirstOrDefault(dt => dt.Name == tipoNombre);

                if (tipoDto != null)
                {
                    var enfermedadDto = allDiseases.FirstOrDefault(d =>
                        d.Name == enfermedadNombre &&
                        d.DiseaseTypeId == tipoDto.DiseaseTypeId);

                    if (enfermedadDto != null)
                    {
                        enfermedadId = enfermedadDto.DiseaseId;
                        enfermedadNombreToId[enfermedadNombre] = enfermedadId;
                    }
                    else
                    {
                        return; // No se encontró la enfermedad
                    }
                }
                else
                {
                    return; // No se encontró el tipo
                }
            }

            var phToUpdate = currentPersonalHistories[args.rowIndex];
            phToUpdate.DiseaseId = enfermedadId;
            phToUpdate.Description = $"{args.diseaseType} - {args.disease}";

            await PersonalHistoryService.UpdateAsync(phToUpdate);
            await LoadPersonalHistoryAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error al actualizar antecedente personal: " + ex.Message);
        }
    }

    private async Task OnPersonalHistoryRowDeleted(int rowIndex)
    {
        if (rowIndex < 0 || rowIndex >= currentPersonalHistories.Count)
            return;

        try
        {
            var phToDelete = currentPersonalHistories[rowIndex];
            if (await PersonalHistoryService.DeleteAsync(phToDelete.PersonalHistoryId))
            {
                await LoadPersonalHistoryAsync();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error al eliminar antecedente personal: " + ex.Message);
        }
    }
    #endregion

    

    

  
}