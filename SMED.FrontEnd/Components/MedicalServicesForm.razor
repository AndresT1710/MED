@using SMED.FrontEnd.Components
@using SMED.Shared.DTOs
@using SMED.FrontEnd.Services

@inject TypeOfServiceService TypeOfServiceService
@inject HealthProfessionalService HealthProfessionalService
@inject MedicalServiceService MedicalServiceService
@inject IJSRuntime JS

<div class="medical-services-form">
    <div class="d-flex flex-wrap">
        <!-- Columna izquierda -->
        <div class="d-flex flex-column me-3" style="flex: 1 1 48%">
            <ContainerBox2 Title="Fecha de atención"
                            Width="full"
                            @bind-SelectedDate="fechaAtencion" />

            <div class="mb-3">
                <label class="form-label">Tipo de servicio</label>
                <select class="form-select" @bind="servicioSeleccionado">
                    <option value="">Seleccione un tipo de servicio</option>
                    @foreach (var tipo in tipoServicios)
                    {
                            <option value="@tipo.Name">@tipo.Name</option>
                    }
                </select>
            </div>

            <div class="mb-3">
                <label class="form-label">Profesional responsable</label>
                <select class="form-select" @bind="profesionalSeleccionado">
                    <option value="">Seleccione un profesional</option>
                    @foreach (var profesional in profesionales)
                    {
                            <option value="@profesional.HealthProfessionalId">
                            @profesional.FullName - @profesional.NameTypeProfessional
                            </option>
                    }
                </select>
            </div>
        </div>

        <!-- Columna derecha -->
        <div class="d-flex flex-column" style="flex: 1 1 48%">
            <ContainerBox1 Title="Diagnóstico"
                           Width="full"
                           @bind-Content="diagnostico" />

            <ContainerBox1 Title="Observaciones"
                           Width="full"
                           @bind-Content="observaciones" />

            <ContainerBox1 Title="Recomendaciones"
                           Width="full"
                           @bind-Content="recomendaciones" />
        </div>
    </div>

    <div class="d-flex justify-content-end mt-4">
        <button class="btn btn-secondary me-2" @onclick="OnCancel">
            Cancelar
        </button>
        <button class="btn btn-primary" @onclick="GuardarServicio">
            <i class="fas fa-save me-2"></i>
            @(MedicalService?.ServiceId > 0 ? "Actualizar" : "Guardar") Servicio
        </button>
    </div>
</div>

@code {
    [Parameter] public MedicalServiceDTO? MedicalService { get; set; }
    [Parameter] public int CareId { get; set; }
    [Parameter] public EventCallback<MedicalServiceDTO> OnSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private DateTime? fechaAtencion = DateTime.Now;
    private string servicioSeleccionado = "";
    private string profesionalSeleccionado = "";
    private string diagnostico = "";
    private string observaciones = "";
    private string recomendaciones = "";

    // Listas dinámicas
    private List<TypeOfServiceDTO> tipoServicios = new();
    private List<HealthProfessionalDTO> profesionales = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadTypeOfServices();
        await LoadHealthProfessionals();
        LoadExistingData();
    }

    protected override async Task OnParametersSetAsync()
    {
        LoadExistingData();
    }

    private async Task LoadTypeOfServices()
    {
        tipoServicios = await TypeOfServiceService.GetAllAsync();
    }

    private async Task LoadHealthProfessionals()
    {
        profesionales = await HealthProfessionalService.GetAllAsync();
    }

    private void LoadExistingData()
    {
        if (MedicalService != null && MedicalService.ServiceId > 0)
        {
            fechaAtencion = MedicalService.ServiceDate;
            servicioSeleccionado = MedicalService.ServiceType ?? "";
            diagnostico = MedicalService.Diagnosis ?? "";
            observaciones = MedicalService.Observations ?? "";
            recomendaciones = MedicalService.Recommendations ?? "";
        }
        else
        {
            // Limpiar campos para nuevo servicio
            fechaAtencion = DateTime.Now;
            servicioSeleccionado = "";
            profesionalSeleccionado = "";
            diagnostico = "";
            observaciones = "";
            recomendaciones = "";
        }
    }

    private async Task GuardarServicio()
    {
        try
        {
            // Validaciones
            if (!fechaAtencion.HasValue)
            {
                await JS.InvokeVoidAsync("alert", "Debe seleccionar una fecha de atención");
                return;
            }

            if (string.IsNullOrEmpty(servicioSeleccionado))
            {
                await JS.InvokeVoidAsync("alert", "Debe seleccionar un tipo de servicio");
                return;
            }

            var medicalServiceDto = new MedicalServiceDTO
                {
                    ServiceId = MedicalService?.ServiceId ?? 0,
                    CareId = CareId,
                    ServiceDate = fechaAtencion,
                    ServiceType = servicioSeleccionado,
                    Diagnosis = diagnostico,
                    Observations = observaciones,
                    Recommendations = recomendaciones
                };

            if (MedicalService?.ServiceId > 0)
            {
                // Actualizar
                var result = await MedicalServiceService.UpdateAsync(medicalServiceDto);
                if (!result.Success)
                {
                    await JS.InvokeVoidAsync("alert", $"Error al actualizar: {result.Error}");
                    return;
                }
                medicalServiceDto.ServiceId = MedicalService.ServiceId;
            }
            else
            {
                // Crear
                var result = await MedicalServiceService.CreateAsync(medicalServiceDto);
                if (!result.Success)
                {
                    await JS.InvokeVoidAsync("alert", $"Error al crear: {result.Error}");
                    return;
                }
                medicalServiceDto = result.Data;
            }

            await OnSaved.InvokeAsync(medicalServiceDto);
            await JS.InvokeVoidAsync("alert", MedicalService?.ServiceId > 0 ? "Servicio actualizado exitosamente" : "Servicio creado exitosamente");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error inesperado: {ex.Message}");
        }
    }
}
