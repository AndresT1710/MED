@using Microsoft.AspNetCore.Components
@using SMED.Shared.DTOs

<div class="editable-table">
    <div class="editable-table-header">
        <h5 title="@Title">@Title</h5>
        <button class="btn btn-success" @onclick="OpenAddModal">Agregar</button>
    </div>
    <div class="editable-table-scroll">
        <table class="editable-table-content">
            <thead>
                <tr>
                    @foreach (var header in ColumnHeaders)
                    {
                        <th>@header</th>
                    }
                    <th class="action-column">Acciones</th>
                </tr>
            </thead>
            <tbody>
                @if (Rows?.Count > 0)
                {
                    @for (int rowIndex = 0; rowIndex < Rows.Count; rowIndex++)
                    {
                        <tr>
                            @for (int colIndex = 0; colIndex < Rows[rowIndex].Count; colIndex++)
                            {
                                <td>
                                    @if (IsEditingRow(rowIndex))
                                    {
                                        <select class="editable-table-form-select"
                                                value="@Rows[rowIndex][colIndex]"
                                                @onchange="e => HandleSelectChange(rowIndex, colIndex, e.Value?.ToString())">
                                            <option value="">Seleccione una opción</option>
                                            @foreach (var option in GetOptionsForColumn(colIndex, rowIndex))
                                            {
                                                <option value="@option">@option</option>
                                            }
                                        </select>
                                    }
                                    else
                                    {
                                        @Rows[rowIndex][colIndex]
                                    }
                                </td>
                            }
                            <td class="action-column">
                                <button class="btn btn-sm btn-primary me-1" @onclick="() => EditRow(rowIndex)">
                                    @(IsEditingRow(rowIndex) ? "Actualizar" : "Editar")
                                </button>
                                <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDelete(rowIndex)">Eliminar</button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="@(ColumnHeaders.Count + 1)" class="editable-table-empty">
                            No hay datos disponibles
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    @if (showAddModal)
    {
        <div class="editable-table-modal-backdrop"></div>
        <div class="editable-table-modal-container">
            <div class="editable-table-modal-dialog">
                <div class="editable-table-modal-content">
                    <div class="editable-table-modal-header">
                        <h5 class="editable-table-modal-title">@((editingIndex == -1) ? "Agregar Registro" : "Editar Registro")</h5>
                        <button type="button" class="btn-close" @onclick="CloseModal"></button>
                    </div>
                    <div class="editable-table-modal-body">
                        @for (int i = 0; i < ColumnHeaders.Count; i++)
                        {
                            <div class="editable-table-form-group">
                                <label class="editable-table-form-label">@ColumnHeaders[i]</label>
                                <select class="editable-table-form-select"
                                        value="@GetCurrentModalValue(i)"
                                        @onchange="async e => await HandleModalSelectChange(i, e.Value?.ToString())">
                                    <option value="">Seleccione una opción</option>
                                    @foreach (var option in GetModalOptions(i))
                                    {
                                        <option value="@option">@option</option>
                                    }
                                </select>
                            </div>
                        }
                    </div>
                    <div class="editable-table-modal-footer">
                        <button class="btn btn-secondary" @onclick="CloseModal">Cancelar</button>
                        <button class="btn btn-primary" @onclick="SaveRow">Guardar</button>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (showDeleteConfirm)
    {
        <div class="editable-table-modal-backdrop"></div>
        <div class="editable-table-modal-container">
            <div class="editable-table-modal-dialog editable-table-modal-sm">
                <div class="editable-table-modal-content">
                    <div class="editable-table-modal-header">
                        <h5 class="editable-table-modal-title">Confirmar Eliminación</h5>
                        <button type="button" class="btn-close" @onclick="() => showDeleteConfirm = false"></button>
                    </div>
                    <div class="editable-table-modal-body">
                        ¿Está seguro de que desea eliminar este registro?
                    </div>
                    <div class="editable-table-modal-footer">
                        <button class="btn btn-secondary" @onclick="() => showDeleteConfirm = false">Cancelar</button>
                        <button class="btn btn-danger" @onclick="DeleteRow">Eliminar</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string Title { get; set; } = "Editable Table";
    [Parameter] public List<string> ColumnHeaders { get; set; } = new();
    [Parameter] public List<List<string>> Rows { get; set; } = new();
    [Parameter] public Dictionary<string, List<string>> ColumnOptions { get; set; } = new();
    [Parameter] public EventCallback<(int rowIndex, int columnIndex, string selectedValue)> OnCellChanged { get; set; }
    [Parameter] public EventCallback<List<string>> OnRowAdded { get; set; }
    [Parameter] public EventCallback<(int rowIndex, List<string> updatedRow)> OnRowUpdated { get; set; }
    [Parameter] public EventCallback<int> OnRowDeleted { get; set; }
    [Parameter] public List<DiseaseTypeDTO> DiseaseTypes { get; set; } = new();
    [Parameter] public Func<int, Task<List<string>>> GetDiseaseNamesByType { get; set; }

    private bool showAddModal = false;
    private bool showDeleteConfirm = false;
    private int editingIndex = -1;
    private int deleteIndex = -1;
    private List<string> currentModalRow = new();
    private Dictionary<int, List<string>> diseasesByType = new();

    private bool IsEditingRow(int rowIndex) => editingIndex == rowIndex;

    private List<string> GetOptionsForColumn(int columnIndex, int rowIndex)
    {
        if (columnIndex < 0 || columnIndex >= ColumnHeaders.Count)
            return new List<string>();

        // Para columna de enfermedades (índice 1), devolver enfermedades del tipo seleccionado
        if (columnIndex == 1 && rowIndex < Rows.Count && Rows[rowIndex].Count > 0)
        {
            var selectedType = Rows[rowIndex][0];
            var type = DiseaseTypes.FirstOrDefault(dt => dt.Name == selectedType);
            if (type != null && diseasesByType.ContainsKey(type.DiseaseTypeId))
            {
                return diseasesByType[type.DiseaseTypeId];
            }
        }

        var header = ColumnHeaders[columnIndex];
        return ColumnOptions.TryGetValue(header, out var options) ? options : new List<string>();
    }

    private List<string> GetModalOptions(int columnIndex)
    {
        if (columnIndex < 0 || columnIndex >= ColumnHeaders.Count)
            return new List<string>();

        // Para columna de enfermedades (índice 1), devolver enfermedades del tipo seleccionado en el modal
        if (columnIndex == 1 && currentModalRow.Count > 0)
        {
            var selectedType = currentModalRow[0];
            var type = DiseaseTypes.FirstOrDefault(dt => dt.Name == selectedType);
            if (type != null && diseasesByType.ContainsKey(type.DiseaseTypeId))
            {
                return diseasesByType[type.DiseaseTypeId];
            }
        }

        var header = ColumnHeaders[columnIndex];
        return ColumnOptions.TryGetValue(header, out var options) ? options : new List<string>();
    }

    private string GetCurrentModalValue(int columnIndex)
    {
        return columnIndex < currentModalRow.Count ? currentModalRow[columnIndex] : "";
    }

    private async Task HandleSelectChange(int rowIndex, int columnIndex, string? selectedValue)
    {
        if (selectedValue == null) return;

        if (rowIndex >= 0 && rowIndex < Rows.Count && columnIndex >= 0 && columnIndex < Rows[rowIndex].Count)
        {
            Rows[rowIndex][columnIndex] = selectedValue;
            if (OnCellChanged.HasDelegate)
            {
                await OnCellChanged.InvokeAsync((rowIndex, columnIndex, selectedValue));
            }
        }
    }

    private async Task HandleModalSelectChange(int columnIndex, string? selectedValue)
    {
        if (selectedValue == null) return;

        while (currentModalRow.Count <= columnIndex)
        {
            currentModalRow.Add("");
        }

        currentModalRow[columnIndex] = selectedValue;

        // Si cambió el tipo de enfermedad, cargar las enfermedades correspondientes
        if (columnIndex == 0 && GetDiseaseNamesByType != null)
        {
            var type = DiseaseTypes.FirstOrDefault(dt => dt.Name == selectedValue);
            if (type != null && !diseasesByType.ContainsKey(type.DiseaseTypeId))
            {
                var diseases = await GetDiseaseNamesByType(type.DiseaseTypeId);
                diseasesByType[type.DiseaseTypeId] = diseases;
            }

            // Limpiar selección de enfermedad si cambió el tipo
            if (currentModalRow.Count > 1)
            {
                currentModalRow[1] = "";
            }

            StateHasChanged();
        }

        if (OnCellChanged.HasDelegate)
        {
            await OnCellChanged.InvokeAsync((editingIndex, columnIndex, selectedValue));
        }
    }

    private void EditRow(int index)
    {
        if (index < 0 || index >= Rows.Count) return;

        editingIndex = index;
        currentModalRow = new List<string>(Rows[index]);
        showAddModal = true;
    }

    private void OpenAddModal()
    {
        editingIndex = -1;
        currentModalRow = ColumnHeaders.Select(_ => "").ToList();
        showAddModal = true;
    }

    private void ConfirmDelete(int index)
    {
        if (index < 0 || index >= Rows.Count) return;
        deleteIndex = index;
        showDeleteConfirm = true;
    }

    private async Task DeleteRow()
    {
        if (deleteIndex >= 0 && deleteIndex < Rows.Count)
        {
            if (OnRowDeleted.HasDelegate)
            {
                await OnRowDeleted.InvokeAsync(deleteIndex);
            }
            Rows.RemoveAt(deleteIndex);
        }
        showDeleteConfirm = false;
    }

    private async Task SaveRow()
    {
        if (currentModalRow.Count != ColumnHeaders.Count || currentModalRow.Any(string.IsNullOrWhiteSpace))
        {
            return;
        }

        if (editingIndex >= 0)
        {
            Rows[editingIndex] = new List<string>(currentModalRow);
            if (OnRowUpdated.HasDelegate)
            {
                await OnRowUpdated.InvokeAsync((editingIndex, new List<string>(currentModalRow)));
            }
        }
        else
        {
            Rows.Add(new List<string>(currentModalRow));
            if (OnRowAdded.HasDelegate)
            {
                await OnRowAdded.InvokeAsync(new List<string>(currentModalRow));
            }
        }

        CloseModal();
    }

    private void CloseModal()
    {
        showAddModal = false;
        editingIndex = -1;
        currentModalRow.Clear();
    }
}