@using System.Linq.Expressions
@typeparam T

<div class="check-container">
    <label class="check-label">
        <input type="checkbox"
               class="check-input"
               @onclick="InterceptClick"
               @ref="CheckboxRef" />
        <span class="check-title">@Title</span>
    </label>
</div>

@if (ShowConfirmModal)
{
    <div class="modal-backdrop" @onclick="CloseModal">
        <div class="modal-content" @onclick:stopPropagation>
            <p>¿Estás seguro de desmarcar este apartado?</p>
            <div class="modal-actions">
                <button class="btn-confirm" @onclick="ConfirmUncheck">Sí</button>
                <button class="btn-cancel" @onclick="CancelUncheck">No</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string Title { get; set; } = "Título del Check";

    [Parameter] public T Value { get; set; }
    [Parameter] public EventCallback<T> ValueChanged { get; set; }
    [Parameter] public Expression<Func<T>> ValueExpression { get; set; }

    private ElementReference CheckboxRef;
    private bool ShowConfirmModal = false;

    // ✅ Agregar esta variable para controlar la sincronización
    private bool _isUpdatingCheckbox = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender || !_isUpdatingCheckbox)
        {
            await SyncCheckboxWithValue();
        }
        _isUpdatingCheckbox = false;
    }

    // ✅ Nuevo método para sincronizar cuando cambie el valor desde el padre
    protected override async Task OnParametersSetAsync()
    {
        await SyncCheckboxWithValue();
    }

    // ✅ Método para sincronizar el checkbox con el valor actual
    private async Task SyncCheckboxWithValue()
    {
        if (CheckboxRef.Id != null) // Verificar que el elemento existe
        {
            await SetCheckbox(IsChecked());
        }
    }

    private async Task InterceptClick(MouseEventArgs e)
    {
        if (IsChecked())
        {
            ShowConfirmModal = true;
            StateHasChanged();
            // Mantener el checkbox marcado mientras se muestra el modal
            await SetCheckbox(true);
        }
        else
        {
            await UpdateCheckboxState(true);
        }
    }

    private async Task ConfirmUncheck()
    {
        ShowConfirmModal = false;
        await UpdateCheckboxState(false);
    }

    private async Task CancelUncheck()
    {
        ShowConfirmModal = false;
        await SetCheckbox(true);
    }

    private async Task CloseModal()
    {
        await CancelUncheck();
    }

    private async Task SetCheckbox(bool value)
    {
        try
        {
            _isUpdatingCheckbox = true;
            await JS.InvokeVoidAsync("setCheckboxState", CheckboxRef, value);
        }
        catch (Exception)
        {
            // Ignorar errores de JS si el elemento no existe aún
        }
    }

    private async Task UpdateCheckboxState(bool newValue)
    {
        if (typeof(T) == typeof(bool))
        {
            await ValueChanged.InvokeAsync((T)(object)newValue);
        }
        else if (typeof(T) == typeof(bool?))
        {
            await ValueChanged.InvokeAsync((T)(object)(bool?)newValue);
        }

        await SetCheckbox(newValue);
    }

    private bool IsChecked()
    {
        if (Value == null) return false;

        if (typeof(T) == typeof(bool))
        {
            return (bool)(object)Value;
        }
        else if (typeof(T) == typeof(bool?))
        {
            var nullableBool = (bool?)(object)Value;
            return nullableBool.HasValue && nullableBool.Value;
        }

        return false;
    }

    [Inject] private IJSRuntime JS { get; set; }
}