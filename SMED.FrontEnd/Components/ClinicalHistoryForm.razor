@using SMED.Shared.DTOs
@inject HttpClient Http
@inject IJSRuntime JS
@inject ClinicalHistoryService ClinicalHistoryService
@using System.Text.Json;
@using System.Text.Json.Serialization;

<EditForm Model="History" OnValidSubmit="HandleSave">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row mb-4">
        <div class="col-md-8">
            <label class="form-label fw-bold">Paciente *</label>
            @if (PreselectedPerson != null)
            {
                <div class="card border-success">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-8">
                                <h5 class="card-title text-success mb-1">
                                    @PreselectedPerson.FirstName @PreselectedPerson.MiddleName @PreselectedPerson.LastName @PreselectedPerson.SecondLastName
                                </h5>
                                <p class="card-text mb-1">
                                    <strong>Cédula:</strong> @(PreselectedPerson.Document?.DocumentNumber ?? "Sin cédula")
                                </p>
                                @if (PreselectedPerson.BirthDate.HasValue)
                                {
                                    <p class="card-text mb-1">
                                        <strong>Fecha de Nacimiento:</strong> @PreselectedPerson.BirthDate.Value.ToString("dd/MM/yyyy")
                                        <small class="text-muted">(@CalculateAge(PreselectedPerson.BirthDate.Value) años)</small>
                                    </p>
                                }
                                @if (!string.IsNullOrWhiteSpace(PreselectedPerson.Email))
                                {
                                    <p class="card-text mb-0">
                                        <strong>Email:</strong> @PreselectedPerson.Email
                                    </p>
                                }
                            </div>
                            <div class="col-md-4 text-end">
                                <span class="badge bg-success fs-6">Paciente Seleccionado</span>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <PersonSearchComponent @bind-SelectedPerson="selectedPerson"
                                       OnPersonSelected="OnPersonSelected"
                                       OnPersonCleared="OnPersonCleared" />
            }

            <!-- ALERTA MEJORADA PARA HISTORIA EXISTENTE -->
            @if (showExistingHistoryAlert && existingHistoryInfo != null)
            {
                <div class="alert alert-warning mt-3" role="alert">
                    <div class="d-flex align-items-center">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <div class="flex-grow-1">
                            <strong>¡Atención!</strong> Este paciente ya tiene una historia clínica activa.
                            <br />
                            <small>
                                <strong>Número:</strong> @existingHistoryInfo.HistoryNumber |
                                <strong>Fecha:</strong> @existingHistoryInfo.CreationDate?.ToString("dd/MM/yyyy")
                            </small>
                        </div>
                        <button type="button" class="btn btn-sm btn-outline-primary" @onclick="ViewExistingHistory">
                            <i class="fas fa-eye me-1"></i> Ver Historia
                        </button>
                    </div>
                </div>
            }
        </div>

        <div class="col-md-4">
            <label for="historyNumber" class="form-label fw-bold">Número de Historia *</label>
            <div class="input-group">
                <span class="input-group-text bg-primary text-white">
                    <i class="fas fa-file-medical"></i>
                </span>
                <input id="historyNumber" class="form-control fw-bold" @bind="History.HistoryNumber"
                       readonly="@(IsEditMode)"
                       placeholder="Se genera automáticamente" />
            </div>
            <small class="form-text text-muted">
                @if (IsEditMode)
                {
                    <span>Número de historia no se puede modificar en edición</span>
                }
                else
                {
                    <span>Formato: UTA-HC-{año}{cédula} - Se genera automáticamente</span>
                }
            </small>
            <ValidationMessage For="@(() => History.HistoryNumber)" />
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-6">
            <label for="date" class="form-label fw-bold">Fecha de Creación *</label>
            <InputDate id="date" class="form-control" @bind-Value="History.CreationDate" />
            <ValidationMessage For="@(() => History.CreationDate)" />
        </div>
        <div class="col-md-6">
            <label class="form-label fw-bold">Estado de la Historia</label>
            <div class="form-check form-switch mt-2">
                <InputCheckbox id="isActive" class="form-check-input"
                               @bind-Value="_isActive" />
                <label class="form-check-label fw-bold" for="isActive">
                    <span class="badge @(_isActive ? "bg-success" : "bg-secondary")">
                        @(_isActive ? "Activa" : "Inactiva")
                    </span>
                </label>
            </div>
        </div>
    </div>

    <div class="mb-4">
        <label for="generalObservations" class="form-label fw-bold">Observaciones Generales</label>
        <InputTextArea id="generalObservations" class="form-control" @bind-Value="History.GeneralObservations"
                       rows="4" placeholder="Ingrese observaciones generales sobre la historia clínica..." />
    </div>

    <div class="text-end border-top pt-3">
        <button type="button" class="btn btn-outline-secondary me-2" @onclick="HandleCancel" disabled="@isSaving">
            <i class="fas fa-times"></i> Cancelar
        </button>
        <button type="submit" class="btn btn-primary"
                disabled="@(isSaving || !IsFormValid() || (showExistingHistoryAlert && !IsEditMode))">
            @if (isSaving)
            {
                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                <span>Guardando...</span>
            }
            else
            {
                <i class="fas fa-save me-2"></i>
                <span>@(IsEditMode ? "Actualizar" : "Guardar") Historia Clínica</span>
            }
        </button>
    </div>
</EditForm>

@code {
    [Parameter] public ClinicalHistoryDTO History { get; set; } = new();
    [Parameter] public PersonDTO PreselectedPerson { get; set; }
    [Parameter] public EventCallback<ClinicalHistoryDTO> OnSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public EventCallback<ClinicalHistoryDTO> OnViewExistingHistory { get; set; }

    private PersonDTO selectedPerson;
    private bool isSaving = false;
    private bool showExistingHistoryAlert = false;
    private ClinicalHistoryDTO? existingHistoryInfo = null;

    private bool IsEditMode => History?.ClinicalHistoryId > 0;

    protected override async Task OnInitializedAsync()
    {
        History.Patient ??= new PatientDTO();
        if (PreselectedPerson != null)
        {
            await SetupPreselectedPerson();
        }
        else if (IsEditMode && History.Patient?.Person != null)
        {
            selectedPerson = History.Patient.Person;
        }
    }

    private async Task SetupPreselectedPerson()
    {
        History.Patient.PersonId = PreselectedPerson.Id;
        History.Patient.Person = PreselectedPerson;

        // Verificar si ya tiene historia clínica (solo si no estamos editando)
        if (!IsEditMode)
        {
            await CheckForExistingHistory(PreselectedPerson.Id);
        }

        if (string.IsNullOrWhiteSpace(History.HistoryNumber) && !IsEditMode && !showExistingHistoryAlert)
        {
            History.HistoryNumber = GenerateHistoryNumber(PreselectedPerson.Document?.DocumentNumber);
        }

        StateHasChanged();
    }

    private async Task OnPersonSelected(PersonDTO person)
    {
        selectedPerson = person;
        History.Patient.PersonId = person.Id;
        History.Patient.Person = person;

        // Verificar si ya tiene historia clínica (solo si no estamos editando)
        if (!IsEditMode)
        {
            await CheckForExistingHistory(person.Id);

            // Solo regenerar el número de historia si no tiene historia existente
            if (!showExistingHistoryAlert)
            {
                History.HistoryNumber = GenerateHistoryNumber(person.Document?.DocumentNumber);
            }
        }

        StateHasChanged();
    }

    private async Task CheckForExistingHistory(int personId)
    {
        try
        {
            var (hasHistory, message, existingHistory) = await ClinicalHistoryService.CheckPatientHistoryAsync(personId);

            showExistingHistoryAlert = hasHistory;
            existingHistoryInfo = existingHistory;

            if (hasHistory)
            {
                // Limpiar el número de historia si ya existe una
                History.HistoryNumber = string.Empty;
                await JS.InvokeVoidAsync("console.log", "Historia existente encontrada", existingHistory);
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", $"Error al verificar historia existente: {ex.Message}");
        }
    }

    private async Task ViewExistingHistory()
    {
        if (existingHistoryInfo != null && OnViewExistingHistory.HasDelegate)
        {
            await OnViewExistingHistory.InvokeAsync(existingHistoryInfo);
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "No se puede mostrar la historia existente en este momento.");
        }
    }

    private void OnPersonCleared()
    {
        if (!IsEditMode)
        {
            selectedPerson = null;
            History.Patient.PersonId = 0;
            History.Patient.Person = null;
            History.HistoryNumber = string.Empty;
            showExistingHistoryAlert = false;
            existingHistoryInfo = null;
            StateHasChanged();
        }
    }

    private string GenerateHistoryNumber(string documentNumber)
    {
        if (string.IsNullOrWhiteSpace(documentNumber) || documentNumber.Length < 2)
        {
            return string.Empty;
        }

        var currentYear = DateTime.Now.Year;
        var yearSuffix = currentYear.ToString().Substring(2, 2);
        var documentSuffix = documentNumber.Substring(documentNumber.Length - 2, 2);
        return $"UTA-HC-{yearSuffix}{documentSuffix}";
    }

    private int CalculateAge(DateTime birthDate)
    {
        var today = DateTime.Today;
        var age = today.Year - birthDate.Year;
        if (birthDate.Date > today.AddYears(-age)) age--;
        return age;
    }

    private bool IsFormValid()
    {
        return (PreselectedPerson != null || selectedPerson != null || (IsEditMode && History.Patient?.PersonId > 0)) &&
               !string.IsNullOrWhiteSpace(History.HistoryNumber) &&
               History.CreationDate.HasValue;
    }

    private async Task HandleSave()
    {
        isSaving = true;
        try
        {
            // Validar que hay un paciente seleccionado
            if (History.Patient?.PersonId == null || History.Patient.PersonId == 0)
            {
                await JS.InvokeVoidAsync("alert", "Debe seleccionar un paciente válido.");
                return;
            }

            // Validación adicional para creación: verificar que no tenga historia existente
            if (!IsEditMode && showExistingHistoryAlert)
            {
                await JS.InvokeVoidAsync("alert", "No se puede crear una nueva historia clínica. Este paciente ya tiene una historia activa.");
                return;
            }

            if (IsEditMode)
            {
                // Actualizar historia existente
                var updateDto = new BasicClinicalHistroyDTO
                    {
                        ClinicalHistoryId = History.ClinicalHistoryId,
                        HistoryNumber = History.HistoryNumber,
                        CreationDate = History.CreationDate,
                        IsActive = History.IsActive,
                        GeneralObservations = History.GeneralObservations,
                        Patient = new PatientDTO
                        {
                            PersonId = History.Patient.PersonId
                        }
                    };

                var updatedHistory = await ClinicalHistoryService.Update(updateDto);
                await OnSaved.InvokeAsync(updatedHistory);
            }
            else
            {
                // Crear nueva historia
                if (string.IsNullOrWhiteSpace(History.HistoryNumber))
                {
                    var documentNumber = History.Patient.Person?.Document?.DocumentNumber;
                    if (!string.IsNullOrWhiteSpace(documentNumber))
                    {
                        History.HistoryNumber = GenerateHistoryNumber(documentNumber);
                    }
                    else
                    {
                        await JS.InvokeVoidAsync("alert", "No se puede generar el número de historia sin la cédula del paciente.");
                        return;
                    }
                }

                var createDto = new ClinicalHistoryCreateDTO
                    {
                        HistoryNumber = History.HistoryNumber,
                        CreationDate = History.CreationDate,
                        IsActive = History.IsActive,
                        GeneralObservations = History.GeneralObservations,
                        Patient = new PatientDTO
                        {
                            PersonId = History.Patient.PersonId
                        }
                    };

                var createdHistory = await ClinicalHistoryService.Add(createDto);
                await OnSaved.InvokeAsync(createdHistory);
            }
        }
        catch (InvalidOperationException ex) when (ex.Message.Contains("ya tiene una historia clínica"))
        {
            await JS.InvokeVoidAsync("alert", ex.Message);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", $"Error al guardar: {ex.Message}");
            await JS.InvokeVoidAsync("alert", $"Error inesperado: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task HandleCancel()
    {
        await OnCancel.InvokeAsync();
    }

    private bool _isActive
    {
        get => History.IsActive.GetValueOrDefault(true);
        set => History.IsActive = value;
    }
}
