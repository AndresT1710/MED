@page "/medical-history/gynecological"
@using SMED.FrontEnd.Components
@using SMED.FrontEnd.Services
@using SMED.Shared.DTOs

@inject GynecologicalHistoryService GynecologicalHistoryService
@inject ILogger<Gynecological> Logger

<TabContainer>
    <h4>Historia Clínica - Ginecología</h4>

    <PatientSelector @bind-Value="clinicalHistoryId"
                     OnPatientSelected="HandlePatientSelected" />

    @if (clinicalHistoryId > 0)
    {
        <div class="containerbox1-grid">
            <ContainerBox1 Title="Desarrollo Ginecológico"
                           Width="full"
                           @bind-Content="gynecologicalDevelopmentContent"
                           @bind-Content:after="OnGynecologicalDevelopmentChanged" />
        </div>

        <div class="containerbox2-grid">
            <ContainerBox2 Title="Menarquia"
                           Width="half"
                           @bind-SelectedDate="menarcheDate"
                           @bind-SelectedDate:after="OnMenarcheDateChanged" />

            <ContainerBox2 Title="Pubarquia"
                           Width="half"
                           @bind-SelectedDate="pubarcheDate"
                           @bind-SelectedDate:after="OnPubarcheDateChanged" />
        </div>

        <div class="containerbox1-grid">
            <ContainerBox1 Title="Ciclos Menstruales"
                           Width="full"
                           @bind-Content="menstrualCyclesContent"
                           @bind-Content:after="OnMenstrualCyclesChanged" />
        </div>

        <div class="containerbox2-grid">
            <ContainerBox2 Title="Última Menstruación"
                           Width="half"
                           @bind-SelectedDate="lastMenstruationDate"
                           @bind-SelectedDate:after="OnLastMenstruationDateChanged" />
        </div>

        <div class="containerbox1-grid">
            <ContainerBox1 Title="Métodos Anticonceptivos"
                           Width="full"
                           @bind-Content="contraceptiveMethodsContent"
                           @bind-Content:after="OnContraceptiveMethodsChanged" />
        </div>

        <!-- Removed central save button and related UI elements -->
    }
    else
    {
        <p class="text-muted">Seleccione un paciente con historia clínica para mostrar los antecedentes ginecológicos.</p>
    }
</TabContainer>

@code {
    private int clinicalHistoryId = 0;
    private string medicalRecordNumber = string.Empty;
    private GynecologicalHistoryDTO gynecological = new();
    private bool isLoading = false;

    // Variables para ContainerBox1
    private string gynecologicalDevelopmentContent = "";
    private string menstrualCyclesContent = "";
    private string contraceptiveMethodsContent = "";

    // Variables para ContainerBox2 (fechas)
    private DateTime? menarcheDate = null;
    private DateTime? pubarcheDate = null;
    private DateTime? lastMenstruationDate = null;

    private async Task HandlePatientSelected((int ClinicalHistoryId, string MedicalRecordNumber, int PersonId) patient)
    {
        clinicalHistoryId = patient.ClinicalHistoryId;
        medicalRecordNumber = patient.MedicalRecordNumber;

        if (clinicalHistoryId > 0)
        {
            await LoadGynecologicalHistory();
        }
    }

    private async Task LoadGynecologicalHistory()
    {
        isLoading = true;

        try
        {
            var result = await GynecologicalHistoryService.GetByClinicalHistoryIdAsync(clinicalHistoryId);
            if (result != null)
            {
                gynecological = result;

                // Cargar datos en ContainerBox
                gynecologicalDevelopmentContent = gynecological.GynecologicalDevelopment ?? "";
                menstrualCyclesContent = gynecological.MenstrualCycles ?? "";
                contraceptiveMethodsContent = gynecological.ContraceptiveMethods ?? "";

                // Convertir DateOnly a DateTime para los ContainerBox2
                menarcheDate = gynecological.Menarche?.ToDateTime(TimeOnly.MinValue);
                pubarcheDate = gynecological.Pubarche?.ToDateTime(TimeOnly.MinValue);
                lastMenstruationDate = gynecological.LastMenstruation?.ToDateTime(TimeOnly.MinValue);
            }
            else
            {
                // Crear nuevo registro si no existe
                gynecological = new GynecologicalHistoryDTO
                {
                    ClinicalHistoryId = clinicalHistoryId,
                    MedicalRecordNumber = medicalRecordNumber
                };

                // Limpiar ContainerBox
                gynecologicalDevelopmentContent = "";
                menstrualCyclesContent = "";
                contraceptiveMethodsContent = "";
                menarcheDate = null;
                pubarcheDate = null;
                lastMenstruationDate = null;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar historia ginecológica");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OnGynecologicalDevelopmentChanged()
    {
        gynecological.GynecologicalDevelopment = string.IsNullOrWhiteSpace(gynecologicalDevelopmentContent) ? null : gynecologicalDevelopmentContent;
        await SaveGynecologicalHistory();
    }

    private async Task OnMenstrualCyclesChanged()
    {
        gynecological.MenstrualCycles = string.IsNullOrWhiteSpace(menstrualCyclesContent) ? null : menstrualCyclesContent;
        await SaveGynecologicalHistory();
    }

    private async Task OnContraceptiveMethodsChanged()
    {
        gynecological.ContraceptiveMethods = string.IsNullOrWhiteSpace(contraceptiveMethodsContent) ? null : contraceptiveMethodsContent;
        await SaveGynecologicalHistory();
    }

    private async Task OnMenarcheDateChanged()
    {
        gynecological.Menarche = menarcheDate.HasValue ? DateOnly.FromDateTime(menarcheDate.Value) : null;
        await SaveGynecologicalHistory();
    }

    private async Task OnPubarcheDateChanged()
    {
        gynecological.Pubarche = pubarcheDate.HasValue ? DateOnly.FromDateTime(pubarcheDate.Value) : null;
        await SaveGynecologicalHistory();
    }

    private async Task OnLastMenstruationDateChanged()
    {
        gynecological.LastMenstruation = lastMenstruationDate.HasValue ? DateOnly.FromDateTime(lastMenstruationDate.Value) : null;
        await SaveGynecologicalHistory();
    }

    private async Task SaveGynecologicalHistory()
    {
        if (isLoading || clinicalHistoryId <= 0) return;

        try
        {
            // Asegurar que los datos básicos estén establecidos
            gynecological.ClinicalHistoryId = clinicalHistoryId;
            gynecological.MedicalRecordNumber = medicalRecordNumber;

            if (gynecological.GynecologicalHistoryId == 0)
            {
                // Crear nuevo registro
                var (createSuccess, createdRecord, createError) = await GynecologicalHistoryService.CreateAsync(gynecological);
                if (createSuccess && createdRecord != null)
                {
                    gynecological = createdRecord;
                }
            }
            else
            {
                // Actualizar registro existente
                await GynecologicalHistoryService.UpdateAsync(gynecological);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al guardar datos ginecológicos automáticamente");
        }
    }
}
