@page "/medical-history/general"
@using SMED.FrontEnd.Components
@using SMED.FrontEnd.Services
@using SMED.Shared.DTOs
@inject PersonalHistoryService PersonalHistoryService
@inject DiseaseService DiseaseService
@inject SurgeryService SurgeryService
@inject SurgeryHistoryService SurgeryHistoryService
@inject ILogger<General> Logger

<TabContainer>
    <h4>Historia Clínica - General</h4>

    <PatientSelector @bind-Value="clinicalHistoryId"
                     OnPatientSelected="HandlePatientSelected" />

    @if (clinicalHistoryId > 0)
    {
        <!-- SECCIÓN: ANTECEDENTES PERSONALES -->
        <div class="editable-table-wrapper">
            <EditableTable Title="Antecedentes Personales"
                           ColumnHeaders="@headersPersonales"
                           Rows="@personalesData.Select(d => d.Values).ToList()"
                           RowIds="@personalesData.Select(d => d.Id).ToList()"
                           OnAddRequested="PrepareForAdd"
                           OnEditRequested="PrepareForEdit"
                           OnDeleteRequested="HandleRowDeleted"
                           OnSaveRequested="SaveChanges"
                           IsValidForm="() => !string.IsNullOrEmpty(selectedDisease)"
                           EmptyMessage="@(isLoading ? "Cargando..." : "No hay datos disponibles")">

                <EditModalContent>
                    <div class="form-group mb-3">
                        <label>ID del Registro</label>
                        <input class="form-control" value="@GetCurrentEditingId()" disabled />
                    </div>
                    <div class="form-group mb-3">
                        <label>Tipo de Enfermedad</label>
                        <select class="form-select" @onchange="OnDiseaseTypeChanged">
                            <option value="">Seleccione un tipo</option>
                            @foreach (var type in diseaseTypes)
                            {
                                <option value="@type.DiseaseTypeId" selected="@(selectedDiseaseType == type.DiseaseTypeId)">
                                    @type.Name
                                </option>
                            }
                        </select>
                    </div>
                    <div class="form-group mb-3">
                        <label>Enfermedad</label>
                        <select class="form-select" @bind="selectedDisease" disabled="@(!canSelectDisease)">
                            <option value="">@(canSelectDisease ? "Seleccione una enfermedad" : "Seleccione primero el tipo")</option>
                            @foreach (var disease in availableDiseases)
                            {
                                <option value="@disease">@disease</option>
                            }
                        </select>
                        @if (isLoadingDiseases)
                        {
                            <div class="text-muted mt-1">Cargando enfermedades...</div>
                        }
                    </div>
                </EditModalContent>
            </EditableTable>
        </div>

        <!-- SECCIÓN: ANTECEDENTES QUIRÚRGICOS -->
        <div class="editable-table-wrapper mt-4">
            <EditableTable Title="Antecedentes Quirúrgicos"
                           ColumnHeaders="@headersQuirurgicos"
                           Rows="@quirurgicosData.Select(d => d.Values).ToList()"
                           RowIds="@quirurgicosData.Select(d => d.Id).ToList()"
                           OnAddRequested="PrepareForAddSurgery"
                           OnEditRequested="PrepareForEditSurgery"
                           OnDeleteRequested="HandleSurgeryRowDeleted"
                           OnSaveRequested="SaveSurgeryChanges"
                           IsValidForm="() => !string.IsNullOrEmpty(selectedSurgery) && surgeryDate != default"
                           EmptyMessage="@(isLoadingSurgeries ? "Cargando..." : "No hay datos disponibles")">

                <EditModalContent>
                    <div class="form-group mb-3">
                        <label>ID del Registro</label>
                        <input class="form-control" value="@GetCurrentEditingSurgeryId()" disabled />
                    </div>
                    <div class="form-group mb-3">
                        <label>Cirugía</label>
                        <select class="form-select" @bind="selectedSurgery">
                            <option value="">Seleccione una cirugía</option>
                            @foreach (var surgery in availableSurgeries)
                            {
                                <option value="@surgery">@surgery</option>
                            }
                        </select>
                        @if (isLoadingSurgeries)
                        {
                            <div class="text-muted mt-1">Cargando cirugías...</div>
                        }
                    </div>
                    <div class="form-group mb-3">
                        <label>Fecha de Cirugía</label>
                        <input type="date" class="form-control" @bind="surgeryDate" />
                    </div>
                    <div class="form-group mb-3">
                        <label>Secuelas</label>
                        <textarea class="form-control" @bind="surgeryDescription" rows="2"></textarea>
                    </div>
                </EditModalContent>
            </EditableTable>
        </div>
    }
    else
    {
        <p class="text-muted">Seleccione un paciente con historia clínica para mostrar los antecedentes.</p>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">
            @errorMessage
            <button type="button" class="btn-close float-end" @onclick="ClearErrorMessage"></button>
        </div>
    }
</TabContainer>

@code {
    private int clinicalHistoryId = 0;
    private string medicalRecordNumber = string.Empty;
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    // ==========================================
    // SECCIÓN: ANTECEDENTES PERSONALES
    // ==========================================
    private readonly List<string> headersPersonales = new() { "Tipo de Enfermedad", "Enfermedad" };
    private List<PersonalRow> personalesData = new();
    private List<PersonalHistoryDTO> currentPersonalHistories = new();
    private List<DiseaseTypeDTO> diseaseTypes = new();
    private List<string> availableDiseases = new();

    private int selectedDiseaseType = 0;
    private string selectedDisease = "";
    private int editingId = -1;
    private bool isLoadingDiseases = false;
    private bool canSelectDisease => selectedDiseaseType > 0 && !isLoadingDiseases;

    private class PersonalRow
    {
        public int Id { get; set; }
        public List<string> Values { get; set; } = new();
    }

    // ==========================================
    // SECCIÓN: ANTECEDENTES QUIRÚRGICOS
    // ==========================================
    private readonly List<string> headersQuirurgicos = new() { "Cirugía", "Fecha", "Secuelas" };
    private List<SurgeryRow> quirurgicosData = new();
    private List<SurgeryHistoryDTO> currentSurgeryHistories = new();
    private List<SurgeryDTO> surgeries = new();
    private List<string> availableSurgeries = new();

    private string selectedSurgery = "";
    private DateTime surgeryDate = DateTime.Now;
    private string surgeryDescription = "";
    private int editingSurgeryId = -1;
    private bool isLoadingSurgeries = false;

    private class SurgeryRow
    {
        public int Id { get; set; }
        public List<string> Values { get; set; } = new();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            diseaseTypes = await DiseaseService.GetAllAsyncDiseaseTypes() ?? new();

            // Cargar cirugías disponibles
            surgeries = await SurgeryService.GetAllAsync() ?? new();
            availableSurgeries = surgeries.Select(s => s.Name).ToList();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar datos iniciales");
            errorMessage = "Error al cargar los datos iniciales.";
        }
        finally
        {
            isLoading = false;
        }
    }

    // ==========================================
    // MÉTODOS: ANTECEDENTES PERSONALES
    // ==========================================
    private async Task LoadHistories()
    {
        errorMessage = string.Empty;
        isLoading = true;

        try
        {
            var result = await PersonalHistoryService.GetByClinicalHistoryIdAsync(clinicalHistoryId);
            currentPersonalHistories = result ?? new();
            personalesData = new();

            foreach (var ph in currentPersonalHistories)
            {
                personalesData.Add(new PersonalRow
                    {
                        Id = ph.PersonalHistoryId,
                        Values = new()
                    {
                        ph.DiseaseTypeName ?? "Desconocido",
                        ph.DiseaseName ?? "No especificada"
                    }
                    });
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar historias personales");
            errorMessage = "Error al cargar los antecedentes personales.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task PrepareForEdit(int id)
    {
        errorMessage = string.Empty;

        try
        {
            var dto = currentPersonalHistories.FirstOrDefault(p => p.PersonalHistoryId == id);
            if (dto == null)
            {
                errorMessage = $"No se encontró el antecedente con ID {id}";
                return;
            }

            editingId = id;
            selectedDisease = dto.DiseaseName ?? "";
            selectedDiseaseType = 0;
            availableDiseases = new();

            if (dto.DiseaseId.HasValue)
            {
                var disease = await DiseaseService.GetByIdAsync(dto.DiseaseId.Value);
                if (disease != null)
                {
                    selectedDiseaseType = disease.DiseaseTypeId;
                    await LoadDiseasesByType(selectedDiseaseType);
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al preparar edición");
            errorMessage = "Error al preparar el formulario de edición.";
        }
    }

    private async Task LoadDiseasesByType(int typeId)
    {
        isLoadingDiseases = true;
        try
        {
            var diseases = await DiseaseService.GetDiseasesByTypeAsync(typeId);
            availableDiseases = diseases?.Select(d => d.Name).ToList() ?? new();
        }
        finally
        {
            isLoadingDiseases = false;
        }
    }

    private async Task HandleRowDeleted(int id)
    {
        errorMessage = string.Empty;

        try
        {
            var (success, error) = await PersonalHistoryService.DeleteAsync(id);
            if (!success)
            {
                errorMessage = $"Error al eliminar: {error}";
                return;
            }

            await LoadHistories();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al eliminar antecedente");
            errorMessage = "Error al eliminar el antecedente.";
        }
    }

    private async Task SaveChanges()
    {
        errorMessage = string.Empty;

        try
        {
            if (string.IsNullOrWhiteSpace(selectedDisease))
            {
                errorMessage = "Debe seleccionar una enfermedad.";
                return;
            }

            var diseaseList = await DiseaseService.GetDiseasesByTypeAsync(selectedDiseaseType);
            var enfermedad = diseaseList?.FirstOrDefault(d => d.Name == selectedDisease);
            if (enfermedad == null)
            {
                errorMessage = "Enfermedad no encontrada.";
                return;
            }

            if (editingId == -1)
            {
                var nuevo = new PersonalHistoryDTO
                    {
                        ClinicalHistoryId = clinicalHistoryId,
                        DiseaseId = enfermedad.DiseaseId,
                        Description = $"{selectedDiseaseType} - {selectedDisease}",
                        RegistrationDate = DateTime.Now,
                        MedicalRecordNumber = medicalRecordNumber
                    };

                var (success, _, error) = await PersonalHistoryService.CreateAsync(nuevo);
                if (!success)
                {
                    errorMessage = $"Error al crear antecedente: {error}";
                    return;
                }
            }
            else
            {
                var dto = currentPersonalHistories.FirstOrDefault(p => p.PersonalHistoryId == editingId);
                if (dto == null)
                {
                    errorMessage = "Registro no encontrado para editar.";
                    return;
                }

                dto.DiseaseId = enfermedad.DiseaseId;
                dto.Description = $"{selectedDiseaseType} - {selectedDisease}";

                var (success, error) = await PersonalHistoryService.UpdateAsync(dto);
                if (!success)
                {
                    errorMessage = $"Error al actualizar antecedente: {error}";
                    return;
                }
            }

            await LoadHistories();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al guardar cambios");
            errorMessage = "Error inesperado al guardar cambios.";
        }
    }

    private async Task OnDiseaseTypeChanged(ChangeEventArgs e)
    {
        errorMessage = string.Empty;

        if (int.TryParse(e.Value?.ToString(), out var typeId))
        {
            selectedDiseaseType = typeId;
            selectedDisease = "";
            await LoadDiseasesByType(typeId);
        }
    }

    private void PrepareForAdd()
    {
        editingId = -1;
        selectedDiseaseType = 0;
        selectedDisease = "";
        availableDiseases = new();
        errorMessage = string.Empty;
    }

    // ==========================================
    // MÉTODOS: ANTECEDENTES QUIRÚRGICOS
    // ==========================================
    private async Task LoadSurgeryHistories()
    {
        errorMessage = string.Empty;
        isLoadingSurgeries = true;

        try
        {
            var result = await SurgeryHistoryService.GetByClinicalHistoryIdAsync(clinicalHistoryId);
            currentSurgeryHistories = result ?? new();
            quirurgicosData = new();

            foreach (var sh in currentSurgeryHistories)
            {
                quirurgicosData.Add(new SurgeryRow
                    {
                        Id = sh.SurgeryHistoryId,
                        Values = new()
                {
                    GetSurgeryName(sh.SurgeryId ?? 0), // CORRECCIÓN LÍNEA 413
                    sh.SurgeryDate?.ToShortDateString() ?? "Sin fecha",
                    sh.Description ?? "Sin descripción"
                }
                    });
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar historias quirúrgicas");
            errorMessage = "Error al cargar los antecedentes quirúrgicos.";
        }
        finally
        {
            isLoadingSurgeries = false;
        }
    }

    private string GetSurgeryName(int surgeryId)
    {
        if (surgeryId == 0) return "Sin especificar";
        return surgeries.FirstOrDefault(s => s.SurgeryId == surgeryId)?.Name ?? "Desconocida";
    }

    private async Task PrepareForEditSurgery(int id)
    {
        errorMessage = string.Empty;

        try
        {
            var dto = currentSurgeryHistories.FirstOrDefault(s => s.SurgeryHistoryId == id);
            if (dto == null)
            {
                errorMessage = $"No se encontró el antecedente quirúrgico con ID {id}";
                return;
            }

            editingSurgeryId = id;
            selectedSurgery = GetSurgeryName(dto.SurgeryId ?? 0); // CORRECCIÓN LÍNEA 451
            surgeryDate = dto.SurgeryDate ?? DateTime.Now;
            surgeryDescription = dto.Description ?? "";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al preparar edición de antecedente quirúrgico");
            errorMessage = "Error al preparar el formulario de edición.";
        }
    }

    private async Task HandleSurgeryRowDeleted(int id)
    {
        errorMessage = string.Empty;

        try
        {
            var (success, error) = await SurgeryHistoryService.DeleteAsync(id);
            if (!success)
            {
                errorMessage = $"Error al eliminar: {error}";
                return;
            }

            await LoadSurgeryHistories();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al eliminar antecedente quirúrgico");
            errorMessage = "Error al eliminar el antecedente quirúrgico.";
        }
    }

    private async Task SaveSurgeryChanges()
    {
        errorMessage = string.Empty;

        try
        {
            if (string.IsNullOrWhiteSpace(selectedSurgery))
            {
                errorMessage = "Debe seleccionar una cirugía.";
                return;
            }

            if (surgeryDate == default)
            {
                errorMessage = "Debe seleccionar una fecha válida.";
                return;
            }

            var cirugia = surgeries.FirstOrDefault(s => s.Name == selectedSurgery);
            if (cirugia == null)
            {
                errorMessage = "Cirugía no encontrada.";
                return;
            }

            if (editingSurgeryId == -1)
            {
                var nuevo = new SurgeryHistoryDTO
                    {
                        ClinicalHistoryId = clinicalHistoryId,
                        SurgeryId = cirugia.SurgeryId,
                        Description = string.IsNullOrWhiteSpace(surgeryDescription) ?
                                         $"Cirugía: {selectedSurgery}" : surgeryDescription,
                        SurgeryDate = surgeryDate,
                        RegistrationDate = DateTime.Now,
                    // ⭐ CORRECCIÓN: Usar el número de historia médica del paciente
                        HistoryNumber = medicalRecordNumber
                    };

                var (success, _, error) = await SurgeryHistoryService.CreateAsync(nuevo);
                if (!success)
                {
                    errorMessage = $"Error al crear antecedente quirúrgico: {error}";
                    return;
                }
            }
            else
            {
                var dto = currentSurgeryHistories.FirstOrDefault(s => s.SurgeryHistoryId == editingSurgeryId);
                if (dto == null)
                {
                    errorMessage = "Registro no encontrado para editar.";
                    return;
                }

                dto.SurgeryId = cirugia.SurgeryId;
                dto.Description = string.IsNullOrWhiteSpace(surgeryDescription) ?
                                 $"Cirugía: {selectedSurgery}" : surgeryDescription;
                dto.SurgeryDate = surgeryDate;

                var (success, error) = await SurgeryHistoryService.UpdateAsync(dto);
                if (!success)
                {
                    errorMessage = $"Error al actualizar antecedente quirúrgico: {error}";
                    return;
                }
            }

            // ⭐ IMPORTANTE: Recargar los datos después de guardar
            await LoadSurgeryHistories();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al guardar cambios de antecedente quirúrgico");
            errorMessage = "Error inesperado al guardar cambios.";
        }
    }

    private void PrepareForAddSurgery()
    {
        editingSurgeryId = -1;
        selectedSurgery = "";
        surgeryDate = DateTime.Now;
        surgeryDescription = "";
        errorMessage = string.Empty;
    }

    private string GetCurrentEditingSurgeryId() => editingSurgeryId == -1 ? "Nuevo" : editingSurgeryId.ToString();

    // ==========================================
    // MÉTODOS COMUNES
    // ==========================================
    private async Task HandlePatientSelected((int ClinicalHistoryId, string MedicalRecordNumber) patient)
    {
        clinicalHistoryId = patient.ClinicalHistoryId;
        medicalRecordNumber = patient.MedicalRecordNumber;

        if (clinicalHistoryId > 0)
        {
            await LoadHistories();
            await LoadSurgeryHistories();
        }
    }

    private string GetCurrentEditingId() => editingId == -1 ? "Nuevo" : editingId.ToString();

    private void ClearErrorMessage() => errorMessage = string.Empty;
}