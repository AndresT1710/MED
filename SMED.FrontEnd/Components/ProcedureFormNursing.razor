@using SMED.Shared.DTOs
@using SMED.FrontEnd.Services
@inject TypeOfProceduresService TypeOfProceduresService
@inject ProceduresService ProceduresService
@inject HealthProfessionalService HealthProfessionalService
@inject LocationService LocationService
@inject AuthorizationService AuthorizationService
@inject MedicalProcedureService MedicalProcedureService
@inject IJSRuntime JS

<div class="procedure-form">
    <div class="row g-3">
        <!-- Agregando selección de departamento -->
        <!-- Removed department selection section -->

        <div class="col-md-6">
            <label class="form-label fw-bold">Fecha del Procedimiento *</label>
            <input type="datetime-local"
                   class="form-control @(showValidationErrors && Procedure.ProcedureDate == default ? "is-invalid" : "")"
                   @bind="Procedure.ProcedureDate" />
            @if (showValidationErrors && Procedure.ProcedureDate == default)
            {
                <div class="invalid-feedback">
                    Debe seleccionar una fecha
                </div>
            }
        </div>

        <div class="col-md-6">
            <label class="form-label fw-bold">Tipo de Procedimiento *</label>
            <select class="form-select @(showValidationErrors && selectedTypeOfProcedureId <= 0 ? "is-invalid" : "")"
                    @bind:get="selectedTypeOfProcedureId"
                    @bind:set="OnTypeOfProcedureChangedAsync">
                <option value="0">Seleccione un tipo</option>
                @foreach (var type in typesOfProcedures)
                {
                    <option value="@type.Id">@type.Name</option>
                }
            </select>
            @if (showValidationErrors && selectedTypeOfProcedureId <= 0)
            {
                <div class="invalid-feedback">
                    Debe seleccionar un tipo de procedimiento
                </div>
            }
        </div>

        <div class="col-md-6">
            <label class="form-label fw-bold">Procedimiento Específico *</label>
            <select class="form-select @(showValidationErrors && Procedure.SpecificProcedureId <= 0 ? "is-invalid" : "")"
                    @bind="Procedure.SpecificProcedureId"
                    disabled="@(selectedTypeOfProcedureId <= 0)">
                <option value="0">Seleccione un procedimiento</option>
                @foreach (var procedure in filteredProcedures)
                {
                    <option value="@procedure.Id">@procedure.Description</option>
                }
            </select>
            @if (showValidationErrors && Procedure.SpecificProcedureId <= 0)
            {
                <div class="invalid-feedback">
                    Debe seleccionar un procedimiento específico
                </div>
            }
        </div>

        <!-- Médico tratante condicional según departamento -->
        <!-- Updated alert message for nursing department -->
        <div class="col-md-12">
            <div class="alert alert-info">
                <i class="fas fa-info-circle me-2"></i>
                <strong>Enfermería:</strong> Este procedimiento será registrado automáticamente en el departamento de enfermería y asignado al profesional logueado.
            </div>
        </div>

        <div class="col-md-12">
            <label class="form-label fw-bold">Observaciones</label>
            <textarea class="form-control"
                      @bind="Procedure.Observations"
                      rows="3"
                      placeholder="Observaciones adicionales sobre el procedimiento..."></textarea>
        </div>
    </div>

    <div class="d-flex justify-content-end gap-2 mt-4">
        <button type="button" class="btn btn-secondary" @onclick="OnCancel">
            <i class="fas fa-times me-2"></i>Cancelar
        </button>
        <button type="button" class="btn btn-primary" @onclick="SaveProcedure" disabled="@isSaving">
            @if (isSaving)
            {
                <span class="spinner-border spinner-border-sm me-2"></span>
            }
            <i class="fas fa-save me-2"></i>@(Procedure.ProcedureId > 0 ? "Actualizar" : "Guardar")
        </button>
    </div>
</div>

@code {
    [Parameter] public MedicalProcedureDTO Procedure { get; set; } = new();
    [Parameter] public EventCallback<MedicalProcedureDTO> OnSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private List<TypeOfProceduresDTO> typesOfProcedures = new();
    private List<ProceduresDTO> procedures = new();
    private List<ProceduresDTO> filteredProcedures = new();
    private List<HealthProfessionalDTO> healthProfessionals = new();
    private List<LocationDTO> locations = new();

    private int selectedTypeOfProcedureId = 0;
    private int? selectedLocationId;
    private bool showValidationErrors = false;
    private bool isSaving = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();

        if (Procedure.ProcedureId > 0)
        {
            selectedLocationId = Procedure.LocationId;
            selectedTypeOfProcedureId = Procedure.TypeOfProcedureId ?? 0;
            await OnTypeOfProcedureChangedAsync(selectedTypeOfProcedureId);
        }
        else
        {
            var nursingLocation = locations.FirstOrDefault(l => l.Name.Contains("Enfermería", StringComparison.OrdinalIgnoreCase));
            if (nursingLocation != null)
            {
                selectedLocationId = nursingLocation.Id;
                Procedure.LocationId = nursingLocation.Id;
            }

            Procedure.ProcedureDate = DateTime.Now;
            Procedure.Status = "Realizado"; // Set status to "Realizado" by default
        }
    }

    private async Task LoadData()
    {
        try
        {
            var typesTask = TypeOfProceduresService.GetAllAsync();
            var proceduresTask = ProceduresService.GetAllAsync();
            var professionalsTask = HealthProfessionalService.GetAllHealthProfessionalsAsync();
            var locationsTask = LocationService.GetAllAsync();

            await Task.WhenAll(typesTask, proceduresTask, professionalsTask, locationsTask);

            typesOfProcedures = typesTask.Result ?? new();
            procedures = proceduresTask.Result ?? new();
            healthProfessionals = professionalsTask.Result ?? new();
            locations = locationsTask.Result ?? new();

            await JS.InvokeVoidAsync("console.log", "[v0] Loaded data:", new
            {
                typesCount = typesOfProcedures.Count,
                proceduresCount = procedures.Count,
                professionalsCount = healthProfessionals.Count,
                locationsCount = locations.Count
            });
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", "[v0] Error loading data:", ex.Message);
        }
    }

    private async Task OnTypeOfProcedureChangedAsync(int value)
    {
        selectedTypeOfProcedureId = value;
        filteredProcedures = procedures.Where(p => p.TypeOfProcedureId == selectedTypeOfProcedureId).ToList();
        Procedure.SpecificProcedureId = 0;

        await JS.InvokeVoidAsync("console.log", "[v0] Filtered procedures:", filteredProcedures.Count);
        StateHasChanged();
    }

    private async Task OnDepartmentChangedAsync(int? value)
    {
        selectedLocationId = value;
        await JS.InvokeVoidAsync("console.log", "[v0] Department changed:", value);
        StateHasChanged();
    }

    private bool IsGeneralMedicineLocation()
    {
        var location = locations.FirstOrDefault(l => l.Id == selectedLocationId);
        return location?.Name.Contains("Medicina General", StringComparison.OrdinalIgnoreCase) == true ||
               location?.Name.Contains("Atención Médica", StringComparison.OrdinalIgnoreCase) == true;
    }

    private bool IsNursingLocation()
    {
        var location = locations.FirstOrDefault(l => l.Id == selectedLocationId);
        return location?.Name.Contains("Enfermería", StringComparison.OrdinalIgnoreCase) == true;
    }

    private async Task SaveProcedure()
    {
        showValidationErrors = true;

        await JS.InvokeVoidAsync("console.log", "[v0] Validation check:", new
        {
            ProcedureDate = Procedure.ProcedureDate,
            ProcedureDateValid = Procedure.ProcedureDate != default,
            SelectedTypeOfProcedureId = selectedTypeOfProcedureId,
            TypeValid = selectedTypeOfProcedureId > 0,
            SpecificProcedureId = Procedure.SpecificProcedureId,
            SpecificProcedureValid = Procedure.SpecificProcedureId > 0,
            PatientId = Procedure.PatientId,
            PatientIdValid = Procedure.PatientId > 0
        });

        if (!IsValid())
        {
            await JS.InvokeVoidAsync("console.error", "[v0] Validation failed");

            var errorMessages = new List<string>();
            if (Procedure.ProcedureDate == default)
                errorMessages.Add("- Debe seleccionar una fecha para el procedimiento");
            if (selectedTypeOfProcedureId <= 0)
                errorMessages.Add("- Debe seleccionar un tipo de procedimiento");
            if (Procedure.SpecificProcedureId <= 0)
                errorMessages.Add("- Debe seleccionar un procedimiento específico");
            if (Procedure.PatientId <= 0)
                errorMessages.Add("- ID de paciente inválido");

            await JS.InvokeVoidAsync("alert", "Por favor complete los siguientes campos:\n" + string.Join("\n", errorMessages));
            return;
        }

        if (Procedure.PatientId <= 0)
        {
            await JS.InvokeVoidAsync("console.error", "[v0] Invalid PatientId:", Procedure.PatientId);
            await JS.InvokeVoidAsync("alert", "Error: ID de paciente inválido. Por favor, seleccione un paciente válido.");
            return;
        }

        isSaving = true;
        try
        {
            var nursingLocation = locations.FirstOrDefault(l => l.Name.Contains("Enfermería", StringComparison.OrdinalIgnoreCase));
            if (nursingLocation != null)
            {
                Procedure.LocationId = nursingLocation.Id;
                selectedLocationId = nursingLocation.Id;
            }

            await JS.InvokeVoidAsync("console.log", "[v0] PatientId from Procedure:", Procedure.PatientId);
            await JS.InvokeVoidAsync("console.log", "[v0] CareId from Procedure:", Procedure.CareId);

            var currentUser = await AuthorizationService.GetCurrentUserAsync();
            await JS.InvokeVoidAsync("console.log", "[v0] Current user:", currentUser?.Name);

            if (currentUser != null)
            {
                var currentProfessional = healthProfessionals.FirstOrDefault(hp => hp.HealthProfessionalId == currentUser.PersonId);

                if (currentProfessional == null && !string.IsNullOrEmpty(currentUser.RegistrationNumber))
                {
                    currentProfessional = healthProfessionals.FirstOrDefault(hp => hp.RegistrationNumber == currentUser.RegistrationNumber);
                }

                await JS.InvokeVoidAsync("console.log", "[v0] Current professional found:", currentProfessional?.FullName);

                if (currentProfessional != null)
                {
                    Procedure.HealthProfessionalId = currentProfessional.HealthProfessionalId;
                    Procedure.TreatingPhysicianId = currentProfessional.HealthProfessionalId;
                    Procedure.Status = "Realizado";
                    await JS.InvokeVoidAsync("console.log", "[v0] Nursing procedure - TreatingPhysician assigned, Status: Realizado");
                }
                else
                {
                    await JS.InvokeVoidAsync("console.error", "[v0] No se encontró el profesional actual en la lista");
                    Procedure.HealthProfessionalId = currentUser.PersonId ?? 0;
                    Procedure.TreatingPhysicianId = currentUser.PersonId;
                    Procedure.Status = "Realizado";
                }
            }
            else
            {
                await JS.InvokeVoidAsync("console.error", "[v0] No se pudo obtener el usuario actual");
            }

            await JS.InvokeVoidAsync("console.log", "[v0] Procedure to save:", new
            {
                Procedure.PatientId,
                Procedure.CareId,
                Procedure.SpecificProcedureId,
                Procedure.HealthProfessionalId,
                Procedure.TreatingPhysicianId,
                Procedure.LocationId,
                Procedure.Status,
                Procedure.ProcedureDate
            });

            await OnSaved.InvokeAsync(Procedure);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", "[v0] Error preparing procedure:", ex.Message);
            await JS.InvokeVoidAsync("alert", $"Error al preparar el procedimiento: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private bool IsValid()
    {
        return Procedure.ProcedureDate != default &&
               selectedTypeOfProcedureId > 0 &&
               Procedure.SpecificProcedureId > 0 &&
               Procedure.PatientId > 0;
    }
}
