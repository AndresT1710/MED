@using SMED.FrontEnd.Services
@using SMED.Shared.DTOs
@inject PersonService PersonService

<div class="patient-selector-container">
    <div class="patient-selector-filters">
        <select class="patient-selector-dropdown" @bind="SearchBy">
            <option disabled value="">Buscar por...</option>
            <option value="cedula">Cédula</option>
            <option value="nombre">Nombre</option>
            <option value="historia">Historia Clínica</option>
        </select>

        <input class="patient-selector-input" placeholder="Ingrese término"
               style="min-width: 200px;" @bind="SearchTerm" />

        <button class="patient-selector-button" @onclick="SearchPatient"
                disabled="@(!IsFormValid)">
            Buscar
        </button>

        <button class="patient-selector-button patient-selector-clear-button" @onclick="ClearSearch">
            Limpiar
        </button>
    </div>

    @if (FoundPatient is not null)
    {
        <div class="patient-selector-alert alert alert-info">
            <h5>Datos del Paciente</h5>
            <p><strong>Nombre:</strong> @FoundPatient.Person.FirstName @FoundPatient.Person.LastName</p>
            <p><strong>Cédula:</strong> @FoundPatient.Person.Document?.DocumentNumber</p>
            <p><strong>Fecha Nacimiento:</strong> @FoundPatient.Person.BirthDate?.ToString("dd/MM/yyyy")</p>
            <p><strong>Email:</strong> @FoundPatient.Person.Email</p>
            <p><strong>N° Historia Clínica:</strong> @FoundPatient.Person.ClinicalHistory?.HistoryNumber</p>
        </div>
    }
    else if (HasSearched)
    {
        <div class="patient-selector-alert alert alert-warning">No se encontró ningún paciente con esos datos.</div>
    }
</div>

@code {
    [Parameter]
    public int Value { get; set; }

    [Parameter]
    public EventCallback<int> ValueChanged { get; set; }

    [Parameter]
    public EventCallback<(int ClinicalHistoryId, string MedicalRecordNumber, int PersonId)> OnPatientSelected { get; set; }


    private string SearchBy { get; set; } = "";
    private string SearchTerm { get; set; } = "";
    private PatientDTO? FoundPatient { get; set; }
    private bool HasSearched = false;

    private async Task SearchPatient()
    {
        HasSearched = false;
        FoundPatient = null;

        var patients = await PersonService.GetPatientsWithHistoryAsync();
        var term = SearchTerm.Trim().ToLower();

        FoundPatient = SearchBy switch
        {
            "cedula" => patients.FirstOrDefault(p =>
                p.Person.Document?.DocumentNumber?.ToLower() == term),

            "nombre" => patients.FirstOrDefault(p =>
                $"{p.Person.FirstName} {p.Person.LastName}".ToLower().Contains(term)),

            "historia" => patients.FirstOrDefault(p =>
                p.Person.ClinicalHistory?.HistoryNumber?.ToLower() == term),

            _ => null
        };

        if (FoundPatient != null && FoundPatient.Person.ClinicalHistory != null)
        {
            var historyId = FoundPatient.Person.ClinicalHistory.ClinicalHistoryId;
            await SetClinicalHistoryIdAsync(historyId);

            // ✅ Llamada al evento opcional
            if (OnPatientSelected.HasDelegate)
            {
                await OnPatientSelected.InvokeAsync((
                    historyId,
                    FoundPatient.Person.ClinicalHistory.HistoryNumber,
					FoundPatient.Person.Id
                ));
            }
        }
        else
        {
            await SetClinicalHistoryIdAsync(0);
        }

        HasSearched = true;
    }

    private void ClearSearch()
    {
        SearchBy = "";
        SearchTerm = "";
        FoundPatient = null;
        HasSearched = false;
        _ = SetClinicalHistoryIdAsync(0);
        StateHasChanged();
    }

    private bool IsFormValid => !string.IsNullOrEmpty(SearchBy) && !string.IsNullOrWhiteSpace(SearchTerm);

    private async Task SetClinicalHistoryIdAsync(int id)
    {
        if (Value != id)
        {
            Value = id;
            await ValueChanged.InvokeAsync(Value);
        }
    }
}
