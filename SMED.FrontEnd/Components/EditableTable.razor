@using SMED.Shared.DTOs
@using Microsoft.AspNetCore.Components

<div class="editable-table">
    <div class="editable-table-header">
        <h5>@Title</h5>
        <button class="btn btn-success" @onclick="OpenAddModal">Agregar</button>
    </div>

    <div class="editable-table-scroll">
        <table class="editable-table-content">
            <thead>
                <tr>
                    @foreach (var header in ColumnHeaders)
                    {
                        <th>@header</th>
                    }
                    <th class="action-column">Acciones</th>
                </tr>
            </thead>
            <tbody>
                @if (Rows?.Count > 0)
                {
                    @for (int i = 0; i < Rows.Count; i++)
                    {
                        <tr>
                            @foreach (var cell in Rows[i])
                            {
                                <td>@cell</td>
                            }
                            <td class="action-column">
                                <button class="btn btn-sm btn-primary me-1" @onclick="() => EditRow(i)">Editar</button>
                                <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDelete(i)">Eliminar</button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="@ColumnHeaders.Count + 1" class="editable-table-empty">
                            No hay datos disponibles
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    @if (showAddModal)
    {
        <div class="editable-table-modal-backdrop" @onclick="CloseModal"></div>
        <div class="editable-table-modal-container">
            <div class="editable-table-modal-dialog" @onclick:stopPropagation="true">
                <div class="editable-table-modal-content">
                    <div class="editable-table-modal-header">
                        <h5>@(editingIndex == -1 ? "Agregar Registro" : "Editar Registro")</h5>
                        <button class="btn-close" @onclick="CloseModal"></button>
                    </div>
                    <div class="editable-table-modal-body">
                        <div class="form-group mb-3">
                            <label>Tipo de Enfermedad</label>
                            <select class="form-select" @onchange="OnDiseaseTypeChanged">
                                <option value="">Seleccione un tipo</option>
                                @foreach (var type in DiseaseTypes)
                                {
                                    <option value="@type.DiseaseTypeId" selected="@((selectedDiseaseType == type.DiseaseTypeId).ToString().ToLower())">
                                        @type.Name
                                    </option>
                                }
                            </select>
                        </div>
                        <div class="form-group mb-3">
                            <label>Enfermedad</label>
                            <select class="form-select" @bind="selectedDisease" disabled="@(!canSelectDisease)">
                                <option value="">@(canSelectDisease ? "Seleccione una enfermedad" : "Seleccione primero el tipo")</option>
                                @foreach (var disease in availableDiseases)
                                {
                                    <option value="@disease">@disease</option>
                                }
                            </select>
                            @if (isLoadingDiseases)
                            {
                                <div class="text-muted mt-1">Cargando enfermedades...</div>
                            }
                        </div>
                    </div>
                    <div class="editable-table-modal-footer">
                        <button class="btn btn-secondary" @onclick="CloseModal">Cancelar</button>
                        <button class="btn btn-primary" @onclick="SaveRow" disabled="@string.IsNullOrEmpty(selectedDisease)">Guardar</button>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (showDeleteConfirm)
    {
        <div class="editable-table-modal-backdrop" @onclick="() => showDeleteConfirm = false"></div>
        <div class="editable-table-modal-container">
            <div class="editable-table-modal-dialog editable-table-modal-sm" @onclick:stopPropagation="true">
                <div class="editable-table-modal-content">
                    <div class="editable-table-modal-header">
                        <h5>Confirmar Eliminación</h5>
                        <button class="btn-close" @onclick="() => showDeleteConfirm = false"></button>
                    </div>
                    <div class="editable-table-modal-body">
                        ¿Está seguro que desea eliminar este registro?
                    </div>
                    <div class="editable-table-modal-footer">
                        <button class="btn btn-secondary" @onclick="() => showDeleteConfirm = false">Cancelar</button>
                        <button class="btn btn-danger" @onclick="DeleteRow">Eliminar</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string Title { get; set; } = "";
    [Parameter] public List<string> ColumnHeaders { get; set; } = new();
    [Parameter] public List<List<string>> Rows { get; set; } = new();
    [Parameter] public List<DiseaseTypeDTO> DiseaseTypes { get; set; } = new();
    [Parameter] public Func<int, Task<List<string>>>? GetDiseaseNamesByType { get; set; }

    [Parameter] public EventCallback<(string diseaseType, string disease)> OnRowAdded { get; set; }
    [Parameter] public EventCallback<(int index, string diseaseType, string disease)> OnRowUpdated { get; set; }
    [Parameter] public EventCallback<int> OnRowDeleted { get; set; }

    private int editingIndex = -1;
    private int deleteIndex = -1;
    private bool showAddModal = false;
    private bool showDeleteConfirm = false;

    private int selectedDiseaseType = 0;
    private string selectedDisease = "";
    private string selectedDiseaseTypeName = "";

    private List<string> availableDiseases = new();
    private bool isLoadingDiseases = false;
    private bool canSelectDisease => selectedDiseaseType > 0;

    private async Task OnDiseaseTypeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var typeId))
        {
            selectedDiseaseType = typeId;
            selectedDisease = "";
            availableDiseases.Clear();
            isLoadingDiseases = true;

            var type = DiseaseTypes.FirstOrDefault(t => t.DiseaseTypeId == typeId);
            selectedDiseaseTypeName = type?.Name ?? "";

            if (GetDiseaseNamesByType != null)
            {
                try
                {
                    var diseases = await GetDiseaseNamesByType(typeId);
                    availableDiseases = diseases ?? new();
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error al obtener enfermedades: {ex.Message}");
                }
            }

            isLoadingDiseases = false;
            StateHasChanged();
        }
    }

    private void OpenAddModal()
    {
        editingIndex = -1;
        selectedDiseaseType = 0;
        selectedDisease = "";
        selectedDiseaseTypeName = "";
        availableDiseases = new();
        showAddModal = true;
    }

    private async Task SaveRow()
    {
        if (selectedDiseaseType <= 0 || string.IsNullOrEmpty(selectedDisease))
            return;

        var type = DiseaseTypes.FirstOrDefault(t => t.DiseaseTypeId == selectedDiseaseType);
        if (type == null) return;

        if (editingIndex == -1)
        {
            if (OnRowAdded.HasDelegate)
                await OnRowAdded.InvokeAsync((type.Name, selectedDisease));
        }
        else
        {
            if (OnRowUpdated.HasDelegate)
                await OnRowUpdated.InvokeAsync((editingIndex, type.Name, selectedDisease));
        }

        CloseModal();
    }

    private void EditRow(int index)
    {
        if (index < 0 || index >= Rows.Count) return;

        editingIndex = index;

        var diseaseTypeName = Rows[index][0];
        var diseaseName = Rows[index][1];

        var type = DiseaseTypes.FirstOrDefault(t => t.Name == diseaseTypeName);
        if (type != null)
        {
            selectedDiseaseType = type.DiseaseTypeId;
            selectedDiseaseTypeName = type.Name;
            selectedDisease = diseaseName;
            _ = LoadDiseasesForType(type.DiseaseTypeId);
        }

        showAddModal = true;
    }

    private async Task LoadDiseasesForType(int typeId)
    {
        if (GetDiseaseNamesByType == null) return;
        isLoadingDiseases = true;
        try
        {
            availableDiseases = await GetDiseaseNamesByType(typeId);
        }
        catch
        {
            availableDiseases = new();
        }
        isLoadingDiseases = false;
        StateHasChanged();
    }

    private void ConfirmDelete(int index)
    {
        deleteIndex = index;
        showDeleteConfirm = true;
    }

    private async Task DeleteRow()
    {
        if (OnRowDeleted.HasDelegate)
        {
            await OnRowDeleted.InvokeAsync(deleteIndex);
        }
        showDeleteConfirm = false;
    }

    private void CloseModal()
    {
        showAddModal = false;
        editingIndex = -1;
        selectedDiseaseType = 0;
        selectedDisease = "";
        selectedDiseaseTypeName = "";
        availableDiseases = new();
    }
}
