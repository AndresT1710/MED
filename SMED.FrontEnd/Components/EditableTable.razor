@using Microsoft.AspNetCore.Components
@using SMED.Shared.DTOs

<div class="editable-table">
    <div class="editable-table-header">
        <h5 title="@Title">@Title</h5>
        <button class="btn btn-success" @onclick="OpenAddModal">Agregar</button>
    </div>
    <div class="editable-table-scroll">
        <table class="editable-table-content">
            <thead>
                <tr>
                    @foreach (var header in ColumnHeaders)
                    {
                        <th>@header</th>
                    }
                    <th class="action-column">Acciones</th>
                </tr>
            </thead>
            <tbody>
                @if (Rows?.Count > 0)
                {
                    @for (int rowIndex = 0; rowIndex < Rows.Count; rowIndex++)
                    {
                        <tr>
                            @for (int colIndex = 0; colIndex < Rows[rowIndex].Count; colIndex++)
                            {
                                <td>@Rows[rowIndex][colIndex]</td>
                            }
                            <td class="action-column">
                                <button class="btn btn-sm btn-primary me-1" @onclick="() => EditRow(rowIndex)">Editar</button>
                                <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDelete(rowIndex)">Eliminar</button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="@(ColumnHeaders.Count + 1)" class="editable-table-empty">
                            No hay datos disponibles
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    @if (showAddModal)
    {
        <div class="editable-table-modal-backdrop" @onclick="CloseModal"></div>
        <div class="editable-table-modal-container">
            <div class="editable-table-modal-dialog" @onclick:stopPropagation="true">
                <div class="editable-table-modal-content">
                    <div class="editable-table-modal-header">
                        <h5 class="editable-table-modal-title">@((editingIndex == -1) ? "Agregar Registro" : "Editar Registro")</h5>
                        <button type="button" class="btn-close" @onclick="CloseModal"></button>
                    </div>
                    <div class="editable-table-modal-body">
                        <div class="editable-table-form-group">
                            <label class="editable-table-form-label">Tipo de Enfermedad</label>
                            <select class="editable-table-form-select" @onchange="DiseaseTypeChanged">
                                <option value="">Seleccione un tipo de enfermedad</option>
                                @foreach (var type in DiseaseTypes)
                                {
                                    <option value="@type.DiseaseTypeId">@type.Name</option>
                                }
                            </select>

                        </div>
                        
                        <div class="editable-table-form-group">
                            <label class="editable-table-form-label">Enfermedad</label>
                            <select class="editable-table-form-select" @bind="selectedDisease" disabled="@(selectedDiseaseType == 0)">
                                <option value="">@(selectedDiseaseType == 0 ? "Primero seleccione un tipo" : "Seleccione una enfermedad")</option>
                                @if (selectedDiseaseType > 0 && availableDiseases != null)
                                {
                                    @foreach (var disease in availableDiseases)
                                    {
                                        <option value="@disease">@disease</option>
                                    }
                                }
                            </select>
                            @if (isLoadingDiseases)
                            {
                                <div class="mt-2">Cargando enfermedades...</div>
                            }
                        </div>
                    </div>
                    <div class="editable-table-modal-footer">
                        <button class="btn btn-secondary" @onclick="CloseModal">Cancelar</button>
                        <button class="btn btn-primary" @onclick="SaveRow" disabled="@(string.IsNullOrEmpty(selectedDisease))">Guardar</button>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (showDeleteConfirm)
    {
        <div class="editable-table-modal-backdrop" @onclick="() => showDeleteConfirm = false"></div>
        <div class="editable-table-modal-container">
            <div class="editable-table-modal-dialog editable-table-modal-sm" @onclick:stopPropagation="true">
                <div class="editable-table-modal-content">
                    <div class="editable-table-modal-header">
                        <h5 class="editable-table-modal-title">Confirmar Eliminación</h5>
                        <button type="button" class="btn-close" @onclick="() => showDeleteConfirm = false"></button>
                    </div>
                    <div class="editable-table-modal-body">
                        ¿Está seguro de que desea eliminar este registro?
                    </div>
                    <div class="editable-table-modal-footer">
                        <button class="btn btn-secondary" @onclick="() => showDeleteConfirm = false">Cancelar</button>
                        <button class="btn btn-danger" @onclick="DeleteRow">Eliminar</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string Title { get; set; } = "Editable Table";
    [Parameter] public List<string> ColumnHeaders { get; set; } = new();
    [Parameter] public List<List<string>> Rows { get; set; } = new();
    [Parameter] public EventCallback<(int rowIndex, int columnIndex, string selectedValue)> OnCellChanged { get; set; }
    [Parameter] public EventCallback<(string diseaseType, string disease)> OnRowAdded { get; set; }
    [Parameter] public EventCallback<(int rowIndex, string diseaseType, string disease)> OnRowUpdated { get; set; }
    [Parameter] public EventCallback<int> OnRowDeleted { get; set; }
    [Parameter] public List<DiseaseTypeDTO> DiseaseTypes { get; set; } = new();
    [Parameter] public Func<int, Task<List<string>>>? GetDiseaseNamesByType { get; set; }

    private bool showAddModal = false;
    private bool showDeleteConfirm = false;
    private int editingIndex = -1;
    private int deleteIndex = -1;
    private bool isLoadingDiseases = false;
    
    // Variables para el modal
    private int selectedDiseaseType = 0;
    private string selectedDisease = "";
    private string selectedDiseaseTypeName = "";
    private List<string> availableDiseases = new();

    private async Task DiseaseTypeChanged(ChangeEventArgs e)
    {


        if (int.TryParse(e.Value?.ToString(), out int typeId) && typeId > 0)
        {
            selectedDiseaseType = typeId;
            selectedDisease = ""; // Limpiar selección anterior
            
            Console.WriteLine($"Llamando GetDiseaseNamesByType con id: {typeId}");

            var type = DiseaseTypes.FirstOrDefault(t => t.DiseaseTypeId == typeId);
            if (type != null)
            {
                selectedDiseaseTypeName = type.Name;
            }
            
            isLoadingDiseases = true;
            StateHasChanged();
            
            try
            {
                if (GetDiseaseNamesByType != null)
                {
                    var diseases = await GetDiseaseNamesByType(selectedDiseaseType);
                    if (diseases != null)
                    {
                        availableDiseases.AddRange(diseases);

                        // 🟢 Aquí agregas la línea para ver qué enfermedades se obtuvieron
                        Console.WriteLine($"Enfermedades encontradas: {string.Join(", ", availableDiseases)}");
                    }
                }

                else
                {
                    availableDiseases = new List<string>();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al cargar enfermedades: {ex.Message}");
                availableDiseases = new List<string>();
            }
            finally
            {
                isLoadingDiseases = false;
                StateHasChanged();
            }
        }
        else
        {
            selectedDiseaseType = 0;
            selectedDisease = "";
            selectedDiseaseTypeName = "";
            availableDiseases = new List<string>();
        }
    }

    private void EditRow(int index)
    {
        if (index < 0 || index >= Rows.Count) return;

        editingIndex = index;
        
        // Obtener valores de la fila seleccionada
        var diseaseTypeName = Rows[index][0];
        var diseaseName = Rows[index][1];
        
        // Buscar el tipo de enfermedad por nombre
        var type = DiseaseTypes.FirstOrDefault(t => t.Name == diseaseTypeName);
        if (type != null)
        {
            selectedDiseaseType = type.DiseaseTypeId;
            selectedDiseaseTypeName = type.Name;
            
            // Cargar enfermedades para este tipo
            _ = LoadDiseasesForType(selectedDiseaseType);
            
            // Establecer la enfermedad seleccionada
            selectedDisease = diseaseName;
        }
        
        showAddModal = true;
    }

    private async Task LoadDiseasesForType(int typeId)
    {
        if (typeId <= 0 || GetDiseaseNamesByType == null) return;
        
        isLoadingDiseases = true;
        StateHasChanged();
        
        try
        {
            availableDiseases = await GetDiseaseNamesByType(typeId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar enfermedades: {ex.Message}");
            availableDiseases = new List<string>();
        }
        finally
        {
            isLoadingDiseases = false;
            StateHasChanged();
        }
    }

    private void OpenAddModal()
    {
        editingIndex = -1;
        selectedDiseaseType = 0;
        selectedDisease = "";
        selectedDiseaseTypeName = "";
        availableDiseases = new List<string>();
        showAddModal = true;
    }

    private void ConfirmDelete(int index)
    {
        if (index < 0 || index >= Rows.Count) return;
        deleteIndex = index;
        showDeleteConfirm = true;
    }

    private async Task DeleteRow()
    {
        if (deleteIndex >= 0 && deleteIndex < Rows.Count)
        {
            if (OnRowDeleted.HasDelegate)
            {
                await OnRowDeleted.InvokeAsync(deleteIndex);
            }
        }
        showDeleteConfirm = false;
    }

    private async Task SaveRow()
    {
        if (selectedDiseaseType <= 0 || string.IsNullOrEmpty(selectedDisease))
        {
            return;
        }

        var type = DiseaseTypes.FirstOrDefault(t => t.DiseaseTypeId == selectedDiseaseType);
        if (type == null) return;

        if (editingIndex >= 0)
        {
            if (OnRowUpdated.HasDelegate)
            {
                await OnRowUpdated.InvokeAsync((editingIndex, type.Name, selectedDisease));
            }
        }
        else
        {
            if (OnRowAdded.HasDelegate)
            {
                await OnRowAdded.InvokeAsync((type.Name, selectedDisease));
            }
        }

        CloseModal();
    }

    private void CloseModal()
    {
        showAddModal = false;
        editingIndex = -1;
        selectedDiseaseType = 0;
        selectedDisease = "";
        selectedDiseaseTypeName = "";
        availableDiseases = new List<string>();
        isLoadingDiseases = false;
    }
}