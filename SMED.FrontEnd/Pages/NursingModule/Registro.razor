@page "/nursing-module/registro"
@layout MainLayout
@using SMED.FrontEnd.Components
@using SMED.Shared.Entity
@using SMED.Shared.DTOs
@using SMED.FrontEnd.Services
@inject MedicalCareService MedicalCareService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject HttpClient Http

<TabContainerE OnSave="GuardarDatos">

    <h3 class="mb-4">Gestión de Atenciones Médicas</h3>

    <div class="search-container mb-4">
        <div class="search-options">
            <div class="form-check form-check-inline">
                <input class="form-check-input" type="radio" name="searchType" id="searchByCareId"
                       checked="@(!searchByPatientId)" @onchange="() => { searchByPatientId = false; searchTerm = string.Empty; }">
                <label class="form-check-label" for="searchByCareId">ID Atención</label>
            </div>
            <div class="form-check form-check-inline">
                <input class="form-check-input" type="radio" name="searchType" id="searchByPatientId"
                       checked="@(searchByPatientId)" @onchange="() => { searchByPatientId = true; searchTerm = string.Empty; }">
                <label class="form-check-label" for="searchByPatientId">ID Paciente</label>
            </div>
        </div>

        <div class="input-group">
            <input type="text" class="form-control"
                   @bind="searchTerm"
                   placeholder="@(searchByPatientId ? "Ingrese ID del paciente" : "Ingrese ID de atención")"
                   @onkeypress="@(async (e) => { if (e.Key == "Enter") await HandleSearch(); })" />

            <button class="btn btn-primary" @onclick="HandleSearch">
                <i class="fas fa-search"></i> Buscar
            </button>

            <button class="btn btn-secondary" @onclick="ClearSearch">
                <i class="fas fa-times"></i> Limpiar
            </button>
        </div>
    </div>

    @if (showNoMedicalCareAlert)
    {
        <div class="alert alert-warning alert-dismissible fade show" role="alert">
            <strong>@searchMessage</strong>
            <button type="button" class="btn btn-primary ml-3" @onclick="CreateNewMedicalCare">
                <i class="fas fa-plus"></i> Crear Nueva Atención
            </button>
            <button type="button" class="btn-close" @onclick="() => showNoMedicalCareAlert = false" aria-label="Close"></button>
        </div>
    }

    <ManagementTableR TableTitle="Atenciones Médicas"
                      Columns="MedicalCareColumns"
                      DocumentTypes="documentTypeList"
                      RenderActions="RenderMedicalCareActions"
                      AddCallback="AddMedicalCare"
                      @ref="table" />

    @if (showDetail && selectedMedicalCare != null)
    {
        <div class="modal fade show d-flex align-items-center justify-content-center"
             tabindex="-1"
             style="background-color: rgba(0,0,0,0.5); position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; z-index: 1050;"
             role="dialog">
            <div style="width: 90vw; height: 90vh; display: flex; justify-content: center; align-items: center;">
                <div class="modal-content"
                     style="width: 100%; height: 100%; display: flex; flex-direction: column; max-width: 1100px;">
                    <div class="modal-header">
                        <h5 class="modal-title">Detalle de Atención Médica</h5>
                        <button type="button" class="btn-close" @onclick="() => showDetail = false"></button>
                    </div>
                    <div class="modal-body" style="overflow-y: auto; flex-grow: 1;">
                        <MedicalCareDetail MedicalCare="selectedMedicalCare" />
                    </div>
                </div>
            </div>
        </div>
    }

    @if (showForm)
    {
        <div class="modal-backdrop fade show"></div>
        <div class="modal d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog modal-lg modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@(selectedMedicalCare?.CareId == 0 ? "Nueva Atención Médica" : "Editar Atención Médica")</h5>
                        <button type="button" class="btn-close" @onclick="HideForm" aria-label="Cerrar"></button>
                    </div>
                    <div class="modal-body">
                        <MedicalCareForm MedicalCare="selectedMedicalCare"
                                         OnSaved="OnMedicalCareSaved"
                                         OnCancel="HideForm" />
                    </div>
                </div>
            </div>
        </div>
    }
</TabContainerE>

@code {
    private ManagementTableR table;
    private MedicalCareDTO selectedMedicalCare;
    private bool showDetail = false;
    private bool showForm = false;
    private List<DocumentTypeDTO> documentTypeList = new();
    private List<MedicalCareDTO> medicalCareList = new();
    private List<List<string>> MedicalCareData = new();

    //Search
    private string searchTerm = string.Empty;
    private bool searchByPatientId = false;
    private string searchMessage = string.Empty;
    private bool showNoMedicalCareAlert = false;

    private List<string> MedicalCareColumns = new()
    {
        "ID", "Paciente", "Área", "Profesional", "Acciones"
    };

    protected override async Task OnInitializedAsync()
    {
        documentTypeList = await Http.GetFromJsonAsync<List<DocumentTypeDTO>>("api/Complements/document-types");
        await LoadMedicalCareData();
    }

    private async Task LoadMedicalCareData(string searchTerm = null)
    {
        List<MedicalCareDTO> results = new();

        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            var allMedicalCares = await MedicalCareService.GetAllAsync();
            results = allMedicalCares ?? new List<MedicalCareDTO>();
            showNoMedicalCareAlert = false;
        }
        else
        {
            // Implementar búsqueda según el tipo seleccionado
            var allMedicalCares = await MedicalCareService.GetAllAsync();
            if (allMedicalCares != null)
            {
                if (searchByPatientId && int.TryParse(searchTerm, out int patientId))
                {
                    results = allMedicalCares.Where(mc => mc.PatientId == patientId).ToList();
                }
                else if (!searchByPatientId && int.TryParse(searchTerm, out int careId))
                {
                    results = allMedicalCares.Where(mc => mc.CareId == careId).ToList();
                }
            }

            if (!results.Any())
            {
                searchMessage = searchByPatientId
                    ? $"No se encontraron atenciones médicas para el paciente ID {searchTerm}"
                    : $"No se encontró atención médica con ID {searchTerm}";
                showNoMedicalCareAlert = true;
            }
            else
            {
                showNoMedicalCareAlert = false;
            }
        }

        medicalCareList = results;
        MedicalCareData = results.Select(mc => new List<string>
        {
            mc.CareId.ToString(),
            mc.NamePatient ?? "N/A",
            mc.Area ?? "N/A",
            mc.NameHealthProfessional ?? "N/A",
            mc.CareId.ToString()
        }).ToList();

        if (table != null)
        {
            await table.LoadRecords(MedicalCareData);
        }
    }

    private EventCallback<string[]> SearchHandler => EventCallback.Factory.Create<string[]>(this, Search);

    private async Task Search(string[] data)
    {
        string field = data[0];
        string value = data[1]?.Trim() ?? "";

        if (string.IsNullOrEmpty(field) || string.IsNullOrEmpty(value))
        {
            await LoadMedicalCareData();
            return;
        }

        // Búsqueda en frontend para los campos disponibles
        int index = MedicalCareColumns.IndexOf(field);
        if (index < 0) return;

        var filteredData = MedicalCareData
            .Where(row => row[index].Contains(value, StringComparison.OrdinalIgnoreCase))
            .ToList();

        if (table != null)
        {
            await table.LoadRecords(filteredData);
        }
    }

    private async Task HandleSearch()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            await LoadMedicalCareData();
            return;
        }

        await LoadMedicalCareData(searchTerm);
    }

    private void CreateNewMedicalCare()
    {
        selectedMedicalCare = new MedicalCareDTO
            {
                CareId = 0
            };
        showForm = true;
    }

    private Task AddMedicalCare()
    {
        selectedMedicalCare = new MedicalCareDTO
            {
                CareId = 0
            };
        ShowForm();
        return Task.CompletedTask;
    }

    private async Task ClearSearch()
    {
        searchTerm = string.Empty;
        await LoadMedicalCareData();
    }

    RenderFragment<List<string>> RenderMedicalCareActions => row => builder =>
    {
        int seq = 0;
        var id = row[0]; // El ID está en la primera columna

        builder.OpenElement(seq++, "button");
        builder.AddAttribute(seq++, "class", "btn btn-sm btn-info me-1");
        builder.AddAttribute(seq++, "title", "Ver");
        builder.AddAttribute(seq++, "onclick", EventCallback.Factory.Create(this, () => ViewMedicalCare(id)));
        builder.AddContent(seq++, "Ver");
        builder.CloseElement();

        builder.OpenElement(seq++, "button");
        builder.AddAttribute(seq++, "class", "btn btn-sm btn-warning me-1");
        builder.AddAttribute(seq++, "title", "Editar");
        builder.AddAttribute(seq++, "onclick", EventCallback.Factory.Create(this, () => EditMedicalCare(id)));
        builder.AddContent(seq++, "Editar");
        builder.CloseElement();

        builder.OpenElement(seq++, "button");
        builder.AddAttribute(seq++, "class", "btn btn-sm btn-danger");
        builder.AddAttribute(seq++, "title", "Eliminar");
        builder.AddAttribute(seq++, "onclick", EventCallback.Factory.Create(this, () => DeleteMedicalCare(id)));
        builder.AddContent(seq++, "Eliminar");
        builder.CloseElement();
    };

    private void ViewMedicalCare(string id)
    {
        if (int.TryParse(id, out int idInt))
        {
            selectedMedicalCare = medicalCareList.FirstOrDefault(mc => mc.CareId == idInt);
            if (selectedMedicalCare != null)
            {
                showDetail = true;
            }
        }
    }

    private void EditMedicalCare(string id)
    {
        if (int.TryParse(id, out int idInt))
        {
            selectedMedicalCare = medicalCareList.FirstOrDefault(mc => mc.CareId == idInt) ?? new MedicalCareDTO();
            showForm = true;
        }
    }

    private async Task DeleteMedicalCare(string id)
    {
        if (!int.TryParse(id, out int idInt))
        {
            await JS.InvokeVoidAsync("alert", "ID inválido");
            return;
        }

        var medicalCareToDelete = medicalCareList.FirstOrDefault(mc => mc.CareId == idInt);
        if (medicalCareToDelete == null)
        {
            await JS.InvokeVoidAsync("alert", "Atención médica no encontrada");
            return;
        }

        bool confirmed = await JS.InvokeAsync<bool>("confirm",
            $"¿Estás seguro de eliminar la atención médica ID {medicalCareToDelete.CareId}?");

        if (confirmed)
        {
            var result = await MedicalCareService.DeleteAsync(idInt);
            if (result.Success)
            {
                await LoadMedicalCareData();
                await JS.InvokeVoidAsync("alert", "Atención médica eliminada exitosamente");
            }
            else
            {
                await JS.InvokeVoidAsync("alert", $"Error al eliminar la atención médica: {result.Error}");
            }
        }
    }

    private void ShowForm()
    {
        showForm = true;
    }

    private void HideForm()
    {
        showForm = false;
        selectedMedicalCare = null;
        searchMessage = string.Empty;
    }

    private async Task OnMedicalCareSaved(MedicalCareDTO savedMedicalCare)
    {
        showForm = false;
        await LoadMedicalCareData();

        var message = savedMedicalCare.CareId == 0
            ? "Atención médica creada exitosamente"
            : "Atención médica actualizada exitosamente";

        await JS.InvokeVoidAsync("alert", message);
    }

    void GuardarDatos()
    {
        // Lógica para guardar los datos
    }
}
