@using SMED.Shared.DTOs
@using SMED.FrontEnd.Services
@inject HealthProfessionalService HealthProfessionalService
@inject IJSRuntime JS

<div class="professional-search-container">
    <div class="input-group mb-3">
        <span class="input-group-text">
            <i class="fas fa-search"></i>
        </span>
        <input type="text" class="form-control"
               @bind="searchTerm"
               @oninput="OnSearchInput"
               placeholder="Buscar por nombre, tipo profesional o número de cédula (mín. 3 caracteres)..."
               autocomplete="off" />
        <button class="btn btn-outline-secondary" type="button" @onclick="ClearSearch">
            <i class="fas fa-times"></i>
        </button>
    </div>

    @if (isSearching)
    {
        <div class="text-center p-3">
            <div class="spinner-border spinner-border-sm" role="status">
                <span class="visually-hidden">Buscando...</span>
            </div>
            <span class="ms-2">Buscando profesionales...</span>
        </div>
    }

    @if (searchResults.Any() && !string.IsNullOrWhiteSpace(searchTerm))
    {
        <div class="search-results border rounded p-2 mb-3" style="max-height: 300px; overflow-y: auto;">
            <small class="text-muted">Profesionales encontrados (@searchResults.Count):</small>
            @foreach (var professional in searchResults)
            {
                <div class="professional-item p-2 border-bottom cursor-pointer hover-bg-light"
                     @onclick="() => SelectProfessional(professional)"
                     style="cursor: pointer;">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <strong>@professional.FullName</strong>
                            <br />
                            <small class="text-muted">
                                Tipo: @professional.NameTypeProfessional
                                @if (!string.IsNullOrWhiteSpace(professional.RegistrationNumber))
                                {
                                    <span> | Registro: @professional.RegistrationNumber</span>
                                }
                                @if (!string.IsNullOrWhiteSpace(professional.DocumentNumber))
                                {
                                    <span> | Cédula: @professional.DocumentNumber</span>
                                }
                            </small>
                        </div>
                        <button class="btn btn-sm btn-outline-primary" type="button">
                            <i class="fas fa-check"></i> Seleccionar
                        </button>
                    </div>
                </div>
            }
        </div>
    }

    @if (SelectedProfessional != null)
    {
        <div class="alert alert-success">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <strong>Profesional seleccionado:</strong>
                    @SelectedProfessional.FullName
                    <br />
                    <small>
                        Tipo: @SelectedProfessional.NameTypeProfessional
                        @if (!string.IsNullOrWhiteSpace(SelectedProfessional.RegistrationNumber))
                        {
                            <span> | Registro: @SelectedProfessional.RegistrationNumber</span>
                        }
                        @if (!string.IsNullOrWhiteSpace(SelectedProfessional.DocumentNumber))
                        {
                            <span> | Cédula: @SelectedProfessional.DocumentNumber</span>
                        }
                    </small>
                </div>
                <button class="btn btn-sm btn-outline-danger" @onclick="ClearSelection">
                    <i class="fas fa-times"></i> Cambiar
                </button>
            </div>
        </div>
    }

    @if (!searchResults.Any() && !string.IsNullOrWhiteSpace(searchTerm) && searchTerm.Length >= 3 && !isSearching)
    {
        <div class="alert alert-warning">
            <i class="fas fa-exclamation-triangle"></i>
            No se encontraron profesionales con el término de búsqueda "<strong>@searchTerm</strong>"
        </div>
    }
</div>

<style>
    .hover-bg-light:hover {
        background-color: #f8f9fa !important;
    }

    .professional-item:hover {
        background-color: #e3f2fd !important;
    }
</style>

@code {
    [Parameter] public HealthProfessionalDTO? SelectedProfessional { get; set; }
    [Parameter] public EventCallback<HealthProfessionalDTO> SelectedProfessionalChanged { get; set; }
    [Parameter] public EventCallback<HealthProfessionalDTO> OnProfessionalSelected { get; set; }
    [Parameter] public EventCallback OnProfessionalCleared { get; set; }

    private string searchTerm = string.Empty;
    private List<HealthProfessionalDTO> searchResults = new();
    private bool isSearching = false;
    private Timer? searchTimer;

    private async Task OnSearchInput(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;

        // Cancelar búsqueda anterior
        searchTimer?.Dispose();

        if (string.IsNullOrWhiteSpace(searchTerm) || searchTerm.Length < 3)
        {
            searchResults.Clear();
            StateHasChanged();
            return;
        }

        // Crear nuevo timer para búsqueda con delay
        searchTimer = new Timer(async _ => await PerformSearch(), null, 500, Timeout.Infinite);
    }

    private async Task PerformSearch()
    {
        if (string.IsNullOrWhiteSpace(searchTerm) || searchTerm.Length < 3)
            return;

        await InvokeAsync(async () =>
        {
            isSearching = true;
            StateHasChanged();

            try
            {
                // ✅ SIMPLIFICADO: El backend ahora maneja toda la búsqueda
                searchResults = await HealthProfessionalService.SearchHealthProfessionalsAsync(searchTerm);
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("console.error", $"Error searching professionals: {ex.Message}");
                searchResults.Clear();
            }
            finally
            {
                isSearching = false;
                StateHasChanged();
            }
        });
    }

    private async Task SelectProfessional(HealthProfessionalDTO professional)
    {
        SelectedProfessional = professional;
        await SelectedProfessionalChanged.InvokeAsync(professional);
        await OnProfessionalSelected.InvokeAsync(professional);

        // Limpiar búsqueda
        searchTerm = string.Empty;
        searchResults.Clear();
        StateHasChanged();
    }

    private async Task ClearSelection()
    {
        SelectedProfessional = null;
        await SelectedProfessionalChanged.InvokeAsync(null);
        await OnProfessionalCleared.InvokeAsync();
        searchTerm = string.Empty;
        searchResults.Clear();
        StateHasChanged();
    }

    private void ClearSearch()
    {
        searchTerm = string.Empty;
        searchResults.Clear();
        StateHasChanged();
    }

    public void Dispose()
    {
        searchTimer?.Dispose();
    }
}
