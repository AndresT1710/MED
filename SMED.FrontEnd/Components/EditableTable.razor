@* Componente genérico para tablas editables *@
@* Mantiene la funcionalidad pero de forma genérica *@

<div class="editable-table">
    <div class="editable-table-header">
        <h5>@Title</h5>
        @if (ShowAddButton)
        {
            <button class="btn btn-success" @onclick="OpenAddModal">Agregar</button>
        }
    </div>

    <div class="editable-table-scroll">
        <table class="editable-table-content">
            <thead>
                <tr>
                    @foreach (var header in ColumnHeaders)
                    {
                        <th>@header</th>
                    }
                    @if (ShowActions)
                    {
                        <th class="action-column">Acciones</th>
                    }
                </tr>
            </thead>
            <tbody>
                @if (Rows?.Count > 0)
                {
                    @for (int i = 0; i < Rows.Count; i++)
                    {
                        <tr>
                            @foreach (var cell in Rows[i])
                            {
                                <td>@cell</td>
                            }
                            @if (ShowActions)
                            {
                                <td class="action-column">
                                    @if (ShowEditButton)
                                    {
                                        <button class="btn btn-sm btn-primary me-1" @onclick="() => EditRow(i)">Editar</button>
                                    }
                                    @if (ShowDeleteButton)
                                    {
                                        <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDelete(i)">Eliminar</button>
                                    }
                                </td>
                            }
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="@(ColumnHeaders.Count + (ShowActions ? 1 : 0))" class="editable-table-empty">
                            @EmptyMessage
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    @* Modal de Agregar/Editar *@
    @if (showAddModal)
    {
        <div class="editable-table-modal-backdrop" @onclick="CloseModal"></div>
        <div class="editable-table-modal-container">
            <div class="editable-table-modal-dialog" @onclick:stopPropagation="true">
                <div class="editable-table-modal-content">
                    <div class="editable-table-modal-header">
                        <h5>@(editingIndex == -1 ? "Agregar Registro" : "Editar Registro")</h5>
                        <button class="btn-close" @onclick="CloseModal"></button>
                    </div>
                    <div class="editable-table-modal-body">
                        @EditModalContent
                    </div>
                    <div class="editable-table-modal-footer">
                        <button class="btn btn-secondary" @onclick="CloseModal">Cancelar</button>
                        <button class="btn btn-primary" @onclick="SaveRow" disabled="@(!IsValidForm())">Guardar</button>
                    </div>
                </div>
            </div>
        </div>
    }

    @* Modal de Confirmación de Eliminación *@
    @if (showDeleteConfirm)
    {
        <div class="editable-table-modal-backdrop" @onclick="() => showDeleteConfirm = false"></div>
        <div class="editable-table-modal-container">
            <div class="editable-table-modal-dialog editable-table-modal-sm" @onclick:stopPropagation="true">
                <div class="editable-table-modal-content">
                    <div class="editable-table-modal-header">
                        <h5>Confirmar Eliminación</h5>
                        <button class="btn-close" @onclick="() => showDeleteConfirm = false"></button>
                    </div>
                    <div class="editable-table-modal-body">
                        @DeleteConfirmationMessage
                    </div>
                    <div class="editable-table-modal-footer">
                        <button class="btn btn-secondary" @onclick="() => showDeleteConfirm = false">Cancelar</button>
                        <button class="btn btn-danger" @onclick="DeleteRow">Eliminar</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    // Parámetros básicos de configuración
    [Parameter] public string Title { get; set; } = "Tabla Editable";
    [Parameter] public List<string> ColumnHeaders { get; set; } = new();
    [Parameter] public List<List<string>> Rows { get; set; } = new();
    [Parameter] public string EmptyMessage { get; set; } = "No hay datos disponibles";
    [Parameter] public string DeleteConfirmationMessage { get; set; } = "¿Está seguro que desea eliminar este registro?";

    // Parámetros para controlar qué botones mostrar
    [Parameter] public bool ShowAddButton { get; set; } = true;
    [Parameter] public bool ShowEditButton { get; set; } = true;
    [Parameter] public bool ShowDeleteButton { get; set; } = true;
    [Parameter] public bool ShowActions { get; set; } = true;

    // Contenido personalizado para el modal de edición
    [Parameter] public RenderFragment EditModalContent { get; set; }

    // Eventos para comunicación con el padre
    [Parameter] public EventCallback<int> OnEditRequested { get; set; }
    [Parameter] public EventCallback<int> OnDeleteRequested { get; set; }
    [Parameter] public EventCallback OnAddRequested { get; set; }
    [Parameter] public EventCallback OnSaveRequested { get; set; }
    [Parameter] public Func<bool> IsValidForm { get; set; } = () => true;

    // Estado interno del componente
    private int editingIndex = -1;
    private bool showAddModal = false;
    private bool showDeleteConfirm = false;

    private void OpenAddModal()
    {
        editingIndex = -1;
        showAddModal = true;
        OnAddRequested.InvokeAsync();
    }

    private void EditRow(int index)
    {
        editingIndex = index;
        showAddModal = true;
        OnEditRequested.InvokeAsync(index);
    }

    private void ConfirmDelete(int index)
    {
        editingIndex = index;
        showDeleteConfirm = true;
    }

    private async Task DeleteRow()
    {
        showDeleteConfirm = false;
        await OnDeleteRequested.InvokeAsync(editingIndex);
    }

    private async Task SaveRow()
    {
        if (IsValidForm())
        {
            await OnSaveRequested.InvokeAsync();
            CloseModal();
        }
    }

    private void CloseModal()
    {
        showAddModal = false;
        editingIndex = -1;
    }
}