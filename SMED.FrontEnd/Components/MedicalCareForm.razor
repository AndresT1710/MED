@using SMED.FrontEnd.Components
@using SMED.Shared.DTOs
@using SMED.FrontEnd.Services
@inject MedicalCareService MedicalCareService
@inject TypeOfServiceService TypeOfServiceService
@inject HealthProfessionalService HealthProfessionalService
@inject VitalSignsService VitalSignsService
@inject MedicalServiceService MedicalServiceService
@inject TypeOfProceduresService TypeOfProceduresService
@inject ProceduresService ProceduresService
@inject MedicalProcedureService MedicalProcedureService
@inject PlaceOfAttentionService PlaceService
@inject ReasonForConsultationService ReasonForConsultationService
@inject ReviewSystemDevicesService ReviewSystemDevicesService
@inject SystemsDevicesService SystemsDevicesService
@inject IJSRuntime JS

<div class="medical-care-form">
    <!-- Tabs Navigation -->
    <ul class="nav nav-tabs" id="medicalCareTabs" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link @(activeTab == "patient" ? "active" : "")"
            @onclick="@(() => SetActiveTab("patient"))"
            type="button" role="tab">
                <i class="fas fa-user me-2"></i>Selección de Paciente
                @if (IsPatientTabComplete())
                {
                    <span class="badge bg-success ms-1">✓</span>
                }
                else
                {
                    <span class="badge bg-danger ms-1">*</span>
                }
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link @(activeTab == "systems" ? "active" : "")"
            @onclick="@(() => SetActiveTab("systems"))"
            type="button" role="tab"
            disabled="@(!IsPatientTabComplete() || currentMedicalCareId == 0)">
                <i class="fas fa-lungs me-2"></i>Aparatos y Sistemas
                @if (systemsList.Any())
                {
                    <span class="badge bg-info ms-1">@systemsList.Count</span>
                }
                <small class="text-muted ms-1">(Opcional)</small>
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link @(activeTab == "physical-exam" ? "active" : "")"
            @onclick="@(() => SetActiveTab("physical-exam"))"
            type="button" role="tab"
            disabled="@(!IsPatientTabComplete() || currentMedicalCareId == 0)">
                <i class="fas fa-stethoscope me-2"></i>Examen Físico
                <small class="text-muted ms-1">(Opcional)</small>
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link @(activeTab == "additional-data" ? "active" : "")"
            @onclick="@(() => SetActiveTab("additional-data"))"
            type="button" role="tab"
            disabled="@(!IsPatientTabComplete() || currentMedicalCareId == 0)">
                <i class="fas fa-clipboard-list me-2"></i>Datos Adicionales
                <small class="text-muted ms-1">(Opcional)</small>
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link @(activeTab == "procedures" ? "active" : "")"
            @onclick="@(() => SetActiveTab("procedures"))"
            type="button" role="tab"
            disabled="@(!IsPatientTabComplete() || currentMedicalCareId == 0)">
                <i class="fas fa-procedures me-2"></i>Procedimientos
                @if (procedimientosList.Any())
                {
                    <span class="badge bg-info ms-1">@procedimientosList.Count</span>
                }
                <small class="text-muted ms-1">(Opcional)</small>
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link @(activeTab == "diagnosis" ? "active" : "")"
            @onclick="@(() => SetActiveTab("diagnosis"))"
            type="button" role="tab"
            disabled="@(!IsPatientTabComplete() || currentMedicalCareId == 0)">
                <i class="fas fa-diagnoses me-2"></i>Diagnóstico
                <small class="text-muted ms-1">(Opcional)</small>
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link @(activeTab == "treatment" ? "active" : "")"
            @onclick="@(() => SetActiveTab("treatment"))"
            type="button" role="tab"
            disabled="@(!IsPatientTabComplete() || currentMedicalCareId == 0)">
                <i class="fas fa-pills me-2"></i>Enfermedad/Tratamiento
                <small class="text-muted ms-1">(Opcional)</small>
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link @(activeTab == "referral" ? "active" : "")"
            @onclick="@(() => SetActiveTab("referral"))"
            type="button" role="tab"
            disabled="@(!IsPatientTabComplete() || currentMedicalCareId == 0)">
                <i class="fas fa-share me-2"></i>Derivación
                <small class="text-muted ms-1">(Opcional)</small>
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link @(activeTab == "evolution" ? "active" : "")"
            @onclick="@(() => SetActiveTab("evolution"))"
            type="button" role="tab"
            disabled="@(!IsPatientTabComplete() || currentMedicalCareId == 0)">
                <i class="fas fa-chart-line me-2"></i>Evolución
                <small class="text-muted ms-1">(Opcional)</small>
            </button>
        </li>
    </ul>

    <!-- Tab Content -->
    <div class="tab-content mt-3">
        <!-- Patient Selection Tab -->
        <div class="tab-pane @(activeTab == "patient" ? "show active" : "")" role="tabpanel">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-user me-2"></i>Selección de Paciente
                        <span class="badge bg-danger ms-2">Obligatorio</span>
                        <!-- Badge para mostrar el área fija -->
                        <span class="badge bg-success ms-2">
                            <i class="fas fa-hospital me-1"></i>Área: Medicina General
                        </span>
                    </h5>
                </div>
                <div class="card-body">
                    @if (!isEditMode)
                    {
                        <div class="mb-3">
                            <label class="form-label fw-bold">Paciente *</label>
                            <PatientSelector @bind-Value="clinicalHistoryId"
                            OnPatientSelected="HandlePatientSelected" />
                            @if (showValidationErrors && selectedPatientId <= 0)
                            {
                                <div class="text-danger mt-1">
                                    <small><i class="fas fa-exclamation-triangle me-1"></i>Debe seleccionar un paciente</small>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle me-2"></i>
                            Editando atención médica existente. Paciente: @selectedHistoryNumber
                        </div>
                    }

                    @if (selectedPatientId > 0)
                    {
                        <div class="alert alert-success mt-3">
                            <i class="fas fa-check-circle me-2"></i>
                            Paciente seleccionado correctamente. Historia Clínica: @selectedHistoryNumber
                        </div>

                        <!-- Información del área fija -->
                        <div class="alert alert-info mb-3">
                            <div class="d-flex align-items-center">
                                <i class="fas fa-info-circle me-2"></i>
                                <div>
                                    <strong>Área de Atención:</strong> Medicina General
                                    <br>
                                    <small class="text-muted">Esta atención médica se registrará automáticamente en el área de Medicina General.</small>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label fw-bold">Lugar de Atención *</label>
                                <select class="form-select @(showValidationErrors && string.IsNullOrEmpty(lugarSeleccionada) ? "is-invalid" : "")"
                                @bind="lugarSeleccionada">
                                    <option value="">Seleccione el lugar de Atención</option>
                                    @foreach (var lugar in lugaresAtencion)
                                    {
                                        <option value="@lugar.Id">@lugar.Name</option>
                                    }
                                </select>
                                @if (showValidationErrors && string.IsNullOrEmpty(lugarSeleccionada))
                                {
                                    <div class="invalid-feedback">
                                        Debe seleccionar un lugar de atención
                                    </div>
                                }
                            </div>
                        </div>

                        <!-- Motivo de Consulta -->
                        <div class="mb-3">
                            <label class="form-label fw-bold">Motivo de la Consulta *</label>
                            <textarea class="form-control @(showValidationErrors && string.IsNullOrWhiteSpace(motivoConsulta) ? "is-invalid" : "")"
                            @bind="motivoConsulta"
                            rows="3"
                            placeholder="Describa el motivo principal de la consulta médica..."
                            maxlength="500"></textarea>
                            @if (showValidationErrors && string.IsNullOrWhiteSpace(motivoConsulta))
                            {
                                <div class="invalid-feedback">
                                    Debe ingresar el motivo de la consulta
                                </div>
                            }
                        </div>

                        <div class="mb-3">
                            <label class="form-label fw-bold">Profesional responsable *</label>
                            <select class="form-select @(showValidationErrors && string.IsNullOrEmpty(profesionalSeleccionado) ? "is-invalid" : "")"
                            @bind="profesionalSeleccionado">
                                <option value="">Seleccione un profesional</option>
                                @foreach (var profesional in profesionales)
                                {
                                    <option value="@profesional.HealthProfessionalId">
                                        @profesional.FullName - @profesional.NameTypeProfessional
                                    </option>
                                }
                            </select>
                            @if (showValidationErrors && string.IsNullOrEmpty(profesionalSeleccionado))
                            {
                                <div class="invalid-feedback">
                                    Debe seleccionar un profesional responsable
                                </div>
                            }
                        </div>

                        @if (!IsPatientTabComplete())
                        {
                            <div class="alert alert-warning">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                Complete todos los campos obligatorios para continuar a las siguientes pestañas.
                            </div>
                        }

                        <div class="d-flex justify-content-between mt-3">
                            <div>
                                <button class="btn btn-outline-secondary" @onclick="ValidateAndShowErrors">
                                    <i class="fas fa-check me-2"></i>Validar Información
                                </button>
                            </div>
                            <div>
                                @if (IsPatientTabComplete())
                                {
                                    <button class="btn btn-success me-2" @onclick="GuardarDatosPaciente" disabled="@isSaving">
                                        @if (isSaving)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2"></span>
                                        }
                                        <i class="fas fa-save me-2"></i>@(currentMedicalCareId > 0 ? "Actualizar" : "Guardar") Datos Básicos
                                    </button>
                                    @if (currentMedicalCareId > 0)
                                    {
                                        <button class="btn btn-primary" @onclick="@(() => SetActiveTab("systems"))">
                                            Continuar <i class="fas fa-arrow-right ms-2"></i>
                                        </button>
                                    }
                                }
                                else
                                {
                                    <button class="btn btn-secondary" disabled>
                                        Complete la información obligatoria
                                    </button>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Aparatos y Sistemas Tab -->
        <div class="tab-pane @(activeTab == "systems" ? "show active" : "")" role="tabpanel">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-lungs me-2"></i>Aparatos y Sistemas
                        <span class="badge bg-info ms-2">Opcional</span>
                    </h5>
                    <small class="text-muted">Evaluación de aparatos y sistemas</small>
                </div>
                <div class="card-body">
                    @if (currentMedicalCareId > 0)
                    {
                        <EditableTable Title="Revisión de Aparatos y Sistemas"
                        ColumnHeaders="@systemsHeaders"
                        Rows="@systemsRows"
                        RowIds="@systemsIds"
                        EmptyMessage="No se han registrado revisiones de aparatos y sistemas"
                        DeleteConfirmationMessage="¿Está seguro que desea eliminar esta revisión de aparato/sistema?"
                        OnAddRequested="@OnAddSystemRequested"
                        OnEditRequested="@OnEditSystemRequested"
                        OnDeleteRequested="@OnDeleteSystemRequested"
                        OnSaveRequested="@OnSaveSystemRequested"
                        IsValidForm="@IsSystemFormValid">
                            <EditModalContent>
                                <div class="row g-3">
                                    <div class="col-12">
                                        <label class="form-label fw-bold">Tipo de Aparato/Sistema <span class="text-danger">*</span></label>
                                        <select class="form-select @(systemErrors.ContainsKey("SystemsDevicesId") ? "is-invalid" : "")"
                                        @bind="currentSystem.SystemsDevicesId">
                                            <option value="0">Seleccione un aparato o sistema</option>
                                            @foreach (var system in availableSystems)
                                            {
                                                <option value="@system.Id">@system.Name</option>
                                            }
                                        </select>
                                        @if (systemErrors.ContainsKey("SystemsDevicesId"))
                                        {
                                            <div class="invalid-feedback">@systemErrors["SystemsDevicesId"]</div>
                                        }
                                    </div>
                                    <div class="col-12">
                                        <label class="form-label fw-bold">Estado <span class="text-danger">*</span></label>
                                        <textarea class="form-control @(systemErrors.ContainsKey("State") ? "is-invalid" : "")"
                                        @bind="currentSystem.State"
                                        rows="3"
                                        maxlength="500"
                                        placeholder="Describa el estado actual del aparato o sistema..."
                                        style="resize: vertical; max-height: 150px;"></textarea>
                                        @if (systemErrors.ContainsKey("State"))
                                        {
                                            <div class="invalid-feedback">@systemErrors["State"]</div>
                                        }
                                        <small class="form-text text-muted">Máximo 500 caracteres</small>
                                    </div>
                                    <div class="col-12">
                                        <label class="form-label fw-bold">Observaciones</label>
                                        <textarea class="form-control"
                                        @bind="currentSystem.Observations"
                                        rows="4"
                                        maxlength="1000"
                                        placeholder="Observaciones adicionales (opcional)..."
                                        style="resize: vertical; max-height: 200px;"></textarea>
                                        <small class="form-text text-muted">Máximo 1000 caracteres</small>
                                    </div>
                                </div>
                            </EditModalContent>
                        </EditableTable>

                        <div class="d-flex justify-content-between mt-4">
                            <button class="btn btn-secondary" @onclick="@(() => SetActiveTab("patient"))">
                                <i class="fas fa-arrow-left me-2"></i>Volver
                            </button>
                            <button class="btn btn-primary" @onclick="@(() => SetActiveTab("physical-exam"))">
                                Continuar <i class="fas fa-arrow-right ms-2"></i>
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            Debe guardar primero los datos básicos del paciente para acceder a esta sección.
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Examen Físico Tab -->
        <div class="tab-pane @(activeTab == "physical-exam" ? "show active" : "")" role="tabpanel">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-stethoscope me-2"></i>Examen Físico
                        <span class="badge bg-info ms-2">Opcional</span>
                    </h5>
                    <small class="text-muted">Evaluación física del paciente</small>
                </div>
                <div class="card-body">
                    @if (currentMedicalCareId > 0)
                    {
                        <div class="alert alert-info mb-4">
                            <div class="d-flex align-items-center">
                                <i class="fas fa-info-circle me-2"></i>
                                <div>
                                    <strong>Examen Físico</strong>
                                    <p class="mb-0">Aquí se registrará el examen físico completo del paciente.</p>
                                </div>
                            </div>
                        </div>

                        <div class="d-flex justify-content-between mt-4">
                            <button class="btn btn-secondary" @onclick="@(() => SetActiveTab("systems"))">
                                <i class="fas fa-arrow-left me-2"></i>Volver
                            </button>
                            <button class="btn btn-primary" @onclick="@(() => SetActiveTab("additional-data"))">
                                Continuar <i class="fas fa-arrow-right ms-2"></i>
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            Debe guardar primero los datos básicos del paciente para acceder a esta sección.
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Datos Adicionales Tab -->
        <div class="tab-pane @(activeTab == "additional-data" ? "show active" : "")" role="tabpanel">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-clipboard-list me-2"></i>Datos Adicionales
                        <span class="badge bg-info ms-2">Opcional</span>
                    </h5>
                    <small class="text-muted">Información complementaria</small>
                </div>
                <div class="card-body">
                    @if (currentMedicalCareId > 0)
                    {
                        <div class="alert alert-info mb-4">
                            <div class="d-flex align-items-center">
                                <i class="fas fa-info-circle me-2"></i>
                                <div>
                                    <strong>Datos Adicionales</strong>
                                    <p class="mb-0">Aquí se registrarán datos adicionales relevantes para la atención médica.</p>
                                </div>
                            </div>
                        </div>

                        <div class="d-flex justify-content-between mt-4">
                            <button class="btn btn-secondary" @onclick="@(() => SetActiveTab("physical-exam"))">
                                <i class="fas fa-arrow-left me-2"></i>Volver
                            </button>
                            <button class="btn btn-primary" @onclick="@(() => SetActiveTab("procedures"))">
                                Continuar <i class="fas fa-arrow-right ms-2"></i>
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            Debe guardar primero los datos básicos del paciente para acceder a esta sección.
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Procedures Tab -->
        <div class="tab-pane @(activeTab == "procedures" ? "show active" : "")" role="tabpanel">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-procedures me-2"></i>Procedimientos Médicos
                        <span class="badge bg-info ms-2">Opcional</span>
                    </h5>
                    @if (currentMedicalCareId > 0)
                    {
                        <button class="btn btn-sm btn-primary" @onclick="AgregarProcedimiento">
                            <i class="fas fa-plus me-1"></i>Agregar Procedimiento
                        </button>
                    }
                </div>
                <div class="card-body">
                    @if (currentMedicalCareId > 0)
                    {
                        @if (procedimientosList.Any())
                        {
                            <div class="table-responsive">
                                <table class="table table-sm table-hover">
                                    <thead class="table-light">
                                        <tr>
                                            <th>Fecha</th>
                                            <th>Tipo</th>
                                            <th>Procedimiento</th>
                                            <th>Observaciones</th>
                                            <th width="120">Acciones</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var procedimiento in procedimientosList)
                                        {
                                            <tr>
                                                <td>@procedimiento.ProcedureDate.ToString("dd/MM/yyyy")</td>
                                                <td>@procedimiento.TypeOfProcedureName</td>
                                                <td>@procedimiento.SpecificProcedureName</td>
                                                <td>@(string.IsNullOrEmpty(procedimiento.Observations) ? "N/A" : (procedimiento.Observations.Length > 50 ? procedimiento.Observations.Substring(0, 50) + "..." : procedimiento.Observations))</td>
                                                <td>
                                                    <button class="btn btn-sm btn-warning me-1" @onclick="() => EditarProcedimiento(procedimiento)" title="Editar">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-danger" @onclick="() => EliminarProcedimiento(procedimiento)" title="Eliminar">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-4">
                                <i class="fas fa-procedures fa-3x text-muted mb-3"></i>
                                <p class="text-muted">No hay procedimientos agregados</p>
                                <button class="btn btn-primary" @onclick="AgregarProcedimiento">
                                    <i class="fas fa-plus me-2"></i>Agregar Primer Procedimiento
                                </button>
                            </div>
                        }

                        <div class="d-flex justify-content-between mt-4">
                            <button class="btn btn-secondary" @onclick="@(() => SetActiveTab("additional-data"))">
                                <i class="fas fa-arrow-left me-2"></i>Volver
                            </button>
                            <button class="btn btn-primary" @onclick="@(() => SetActiveTab("diagnosis"))">
                                Continuar <i class="fas fa-arrow-right ms-2"></i>
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            Debe guardar primero los datos básicos del paciente para acceder a esta sección.
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Diagnóstico Tab -->
        <div class="tab-pane @(activeTab == "diagnosis" ? "show active" : "")" role="tabpanel">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-diagnoses me-2"></i>Diagnóstico
                        <span class="badge bg-info ms-2">Opcional</span>
                    </h5>
                    <small class="text-muted">Diagnóstico médico</small>
                </div>
                <div class="card-body">
                    @if (currentMedicalCareId > 0)
                    {
                        <div class="alert alert-info mb-4">
                            <div class="d-flex align-items-center">
                                <i class="fas fa-info-circle me-2"></i>
                                <div>
                                    <strong>Diagnóstico</strong>
                                    <p class="mb-0">Aquí se registrará el diagnóstico médico del paciente.</p>
                                </div>
                            </div>
                        </div>

                        <div class="d-flex justify-content-between mt-4">
                            <button class="btn btn-secondary" @onclick="@(() => SetActiveTab("procedures"))">
                                <i class="fas fa-arrow-left me-2"></i>Volver
                            </button>
                            <button class="btn btn-primary" @onclick="@(() => SetActiveTab("treatment"))">
                                Continuar <i class="fas fa-arrow-right ms-2"></i>
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            Debe guardar primero los datos básicos del paciente para acceder a esta sección.
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Enfermedad/Tratamiento Tab -->
        <div class="tab-pane @(activeTab == "treatment" ? "show active" : "")" role="tabpanel">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-pills me-2"></i>Enfermedad/Tratamiento
                        <span class="badge bg-info ms-2">Opcional</span>
                    </h5>
                    <small class="text-muted">Plan de tratamiento</small>
                </div>
                <div class="card-body">
                    @if (currentMedicalCareId > 0)
                    {
                        <div class="alert alert-info mb-4">
                            <div class="d-flex align-items-center">
                                <i class="fas fa-info-circle me-2"></i>
                                <div>
                                    <strong>Enfermedad/Tratamiento</strong>
                                    <p class="mb-0">Aquí se registrará la enfermedad diagnosticada y el plan de tratamiento.</p>
                                </div>
                            </div>
                        </div>

                        <div class="d-flex justify-content-between mt-4">
                            <button class="btn btn-secondary" @onclick="@(() => SetActiveTab("diagnosis"))">
                                <i class="fas fa-arrow-left me-2"></i>Volver
                            </button>
                            <button class="btn btn-primary" @onclick="@(() => SetActiveTab("referral"))">
                                Continuar <i class="fas fa-arrow-right ms-2"></i>
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            Debe guardar primero los datos básicos del paciente para acceder a esta sección.
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Derivación Tab -->
        <div class="tab-pane @(activeTab == "referral" ? "show active" : "")" role="tabpanel">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-share me-2"></i>Derivación
                        <span class="badge bg-info ms-2">Opcional</span>
                    </h5>
                    <small class="text-muted">Derivación a especialistas</small>
                </div>
                <div class="card-body">
                    @if (currentMedicalCareId > 0)
                    {
                        <div class="alert alert-info mb-4">
                            <div class="d-flex align-items-center">
                                <i class="fas fa-info-circle me-2"></i>
                                <div>
                                    <strong>Derivación</strong>
                                    <p class="mb-0">Aquí se registrarán las derivaciones a especialistas o servicios específicos.</p>
                                </div>
                            </div>
                        </div>

                        <div class="d-flex justify-content-between mt-4">
                            <button class="btn btn-secondary" @onclick="@(() => SetActiveTab("treatment"))">
                                <i class="fas fa-arrow-left me-2"></i>Volver
                            </button>
                            <button class="btn btn-primary" @onclick="@(() => SetActiveTab("evolution"))">
                                Continuar <i class="fas fa-arrow-right ms-2"></i>
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            Debe guardar primero los datos básicos del paciente para acceder a esta sección.
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Evolución Tab -->
        <div class="tab-pane @(activeTab == "evolution" ? "show active" : "")" role="tabpanel">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-chart-line me-2"></i>Evolución
                        <span class="badge bg-info ms-2">Opcional</span>
                    </h5>
                    <small class="text-muted">Evolución del paciente</small>
                </div>
                <div class="card-body">
                    @if (currentMedicalCareId > 0)
                    {
                        <div class="alert alert-info mb-4">
                            <div class="d-flex align-items-center">
                                <i class="fas fa-info-circle me-2"></i>
                                <div>
                                    <strong>Evolución</strong>
                                    <p class="mb-0">Aquí se registrará la evolución y seguimiento del paciente.</p>
                                </div>
                            </div>
                        </div>

                        <div class="d-flex justify-content-between mt-4">
                            <button class="btn btn-secondary" @onclick="@(() => SetActiveTab("referral"))">
                                <i class="fas fa-arrow-left me-2"></i>Volver
                            </button>
                            <button class="btn btn-success" @onclick="FinalizarAtencionMedica" disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                <i class="fas fa-check me-2"></i>Finalizar Atención Médica
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            Debe guardar primero los datos básicos del paciente para acceder a esta sección.
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal para Procedimiento -->
@if (showProcedureModal)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal d-block" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-procedures me-2"></i>
                        @(currentProcedure?.ProcedureId > 0 ? "Editar" : "Agregar") Procedimiento
                    </h5>
                    <button type="button" class="btn-close" @onclick="CerrarModalProcedimiento"></button>
                </div>
                <div class="modal-body">
                    <ProcedureForm Procedure="currentProcedure" OnSaved="OnProcedureSaved" OnCancel="CerrarModalProcedimiento" />
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public MedicalCareDTO? MedicalCare { get; set; }
    [Parameter] public EventCallback<MedicalCareDTO> OnSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private string activeTab = "patient";
    private int clinicalHistoryId = 0;
    private int selectedPatientId = 0;
    private string selectedHistoryNumber = "";
    private string areaSeleccionada = "Medicina General";
    private string profesionalSeleccionado = "";
    private string motivoConsulta = "";
    private bool isEditMode = false;
    private string lugarSeleccionada = "";
    private bool showValidationErrors = false;
    private bool isSaving = false;

    // ID de la atención médica actual (clave para permitir guardar en otras pestañas)
    private int currentMedicalCareId = 0;

    // Listas dinámicas
    private List<TypeOfServiceDTO> tipoServicios = new();
    private List<HealthProfessionalDTO> profesionales = new();
    private List<TypeOfProceduresDTO> tiposProcedimientos = new();
    private List<ProceduresDTO> todosProcedimientos = new();
    private List<PlaceOfAttentionDTO> lugaresAtencion = new();

    // Listas de procedimientos
    private List<MedicalProcedureDTO> procedimientosList = new();

    // Para edición
    private VitalSignsDTO? existingVitalSigns;
    private ReasonForConsultationDTO? existingReasonForConsultation;

    // Modales
    private bool showProcedureModal = false;
    private MedicalProcedureDTO? currentProcedure;

    // Variables para Aparatos y Sistemas
    private List<SystemsDevicesDTO> availableSystems = new();
    private List<ReviewSystemDevicesDTO> systemsList = new();
    private ReviewSystemDevicesDTO currentSystem = new();
    private List<string> systemsHeaders = new() { "Tipo de Aparato/Sistema", "Estado", "Observaciones" };
    private List<List<string>> systemsRows = new();
    private List<int> systemsIds = new();
    private Dictionary<string, string> systemErrors = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadTypeOfServices();
        areaSeleccionada = "Medicina General";
        await LoadHealthProfessionals();
        await LoadTypeOfProcedures();
        await LoadProcedures();
        await LoadLugaresAtencion();
        await LoadSystemsData();

        // Si es modo edición, cargar los datos existentes
        if (MedicalCare != null && MedicalCare.CareId > 0)
        {
            isEditMode = true;
            currentMedicalCareId = MedicalCare.CareId;
            await LoadExistingData();
        }
    }

    private bool IsPatientTabComplete()
    {
        return selectedPatientId > 0 &&
               !string.IsNullOrEmpty(lugarSeleccionada) &&
               !string.IsNullOrEmpty(profesionalSeleccionado) &&
               !string.IsNullOrWhiteSpace(motivoConsulta);
    }

    private void ValidateAndShowErrors()
    {
        showValidationErrors = true;
        StateHasChanged();
    }

    private async Task SetActiveTab(string tab)
    {
        if (tab != "patient" && !IsPatientTabComplete())
        {
            showValidationErrors = true;
            await JS.InvokeVoidAsync("alert", "Debe completar toda la información obligatoria en la pestaña de Selección de Paciente antes de continuar.");
            return;
        }

        if (tab != "patient" && currentMedicalCareId == 0)
        {
            await JS.InvokeVoidAsync("alert", "Debe guardar primero los datos básicos del paciente antes de continuar.");
            return;
        }

        activeTab = tab;
        StateHasChanged();
    }

    private async Task LoadExistingData()
    {
        if (MedicalCare == null) return;

        selectedPatientId = MedicalCare.PatientId;
        areaSeleccionada = "Medicina General";
        profesionalSeleccionado = MedicalCare.HealthProfessionalId.ToString();
        lugarSeleccionada = MedicalCare.LocationId.ToString() ?? "";
        selectedHistoryNumber = MedicalCare.NamePatient ?? "";

        var existingReasons = await ReasonForConsultationService.GetByCareIdAsync(MedicalCare.CareId);
        existingReasonForConsultation = existingReasons?.FirstOrDefault();
        if (existingReasonForConsultation != null)
        {
            motivoConsulta = existingReasonForConsultation.Description ?? "";
        }

        var existingProcedures = await MedicalProcedureService.GetAllAsync();
        procedimientosList = existingProcedures?.Where(p => p.CareId == MedicalCare.CareId).ToList() ?? new List<MedicalProcedureDTO>();

        // Cargar sistemas existentes
        systemsList = await ReviewSystemDevicesService.GetByMedicalCareIdAsync(MedicalCare.CareId);
        await RefreshSystemsTable();

        StateHasChanged();
    }

    private async Task LoadLugaresAtencion()
    {
        lugaresAtencion = await PlaceService.GetAllPlacesAsync();
    }

    private async Task LoadTypeOfServices()
    {
        tipoServicios = await TypeOfServiceService.GetAllAsync();
    }

    private async Task LoadHealthProfessionals()
    {
        profesionales = await HealthProfessionalService.GetAllAsync();
    }

    private async Task LoadTypeOfProcedures()
    {
        tiposProcedimientos = await TypeOfProceduresService.GetAllAsync();
    }

    private async Task LoadProcedures()
    {
        todosProcedimientos = await ProceduresService.GetAllAsync();
    }

    private Task HandlePatientSelected((int ClinicalHistoryId, string MedicalRecordNumber, int PersonId) paciente)
    {
        clinicalHistoryId = paciente.ClinicalHistoryId;
        selectedPatientId = paciente.PersonId;
        selectedHistoryNumber = paciente.MedicalRecordNumber;
        if (selectedPatientId > 0)
        {
            showValidationErrors = false;
        }
        StateHasChanged();
        return Task.CompletedTask;
    }

    // NUEVO MÉTODO: Guardar solo los datos básicos del paciente
    private async Task GuardarDatosPaciente()
    {
        isSaving = true;
        try
        {
            if (!IsPatientTabComplete())
            {
                showValidationErrors = true;
                await JS.InvokeVoidAsync("alert", "Debe completar toda la información obligatoria antes de guardar.");
                return;
            }

            MedicalCareDTO medicalCareResult;

            if (isEditMode && MedicalCare != null && MedicalCare.CareId > 0)
            {
                // Actualizar atención médica existente
                MedicalCare.Area = areaSeleccionada;
                MedicalCare.HealthProfessionalId = int.Parse(profesionalSeleccionado);
                MedicalCare.LocationId = int.Parse(lugarSeleccionada);

                var updateResult = await MedicalCareService.UpdateAsync(MedicalCare);
                if (!updateResult.Success)
                {
                    await JS.InvokeVoidAsync("alert", $"Error al actualizar la atención médica: {updateResult.Error}");
                    return;
                }
                medicalCareResult = MedicalCare;
                currentMedicalCareId = MedicalCare.CareId;
            }
            else
            {
                // Crear nueva atención médica
                var medicalCareDto = new MedicalCareDTO
                {
                    PatientId = selectedPatientId,
                    HealthProfessionalId = int.Parse(profesionalSeleccionado),
                    LocationId = int.Parse(lugarSeleccionada),
                    Area = areaSeleccionada,
                    CareDate = DateTime.Now
                };

                var result = await MedicalCareService.CreateAsync(medicalCareDto);
                if (!result.Success)
                {
                    await JS.InvokeVoidAsync("alert", $"Error al crear la atención médica: {result.Error}");
                    return;
                }
                medicalCareResult = result.Data;
                currentMedicalCareId = medicalCareResult.CareId;

                // Cambiar a modo edición después de crear
                isEditMode = true;
                MedicalCare = medicalCareResult;
            }

            // Guardar motivo de consulta
            if (!string.IsNullOrWhiteSpace(motivoConsulta))
            {
                var reasonDto = new ReasonForConsultationDTO
                {
                    Id = existingReasonForConsultation?.Id ?? 0,
                    Description = motivoConsulta.Trim(),
                    MedicalCareId = currentMedicalCareId
                };

                if (existingReasonForConsultation != null && existingReasonForConsultation.Id > 0)
                {
                    await ReasonForConsultationService.UpdateAsync(reasonDto);
                }
                else
                {
                    var reasonResult = await ReasonForConsultationService.CreateAsync(reasonDto);
                    if (reasonResult.Success)
                    {
                        existingReasonForConsultation = reasonResult.Data;
                    }
                }
            }

            await JS.InvokeVoidAsync("alert", "Datos básicos guardados exitosamente. Ahora puede continuar con las demás secciones.");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error inesperado: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    // MÉTODO MODIFICADO: Solo finalizar (ya no guarda todo)
    private async Task FinalizarAtencionMedica()
    {
        isSaving = true;
        try
        {
            if (currentMedicalCareId == 0)
            {
                await JS.InvokeVoidAsync("alert", "No hay una atención médica válida para finalizar.");
                return;
            }

            // Aquí podrías agregar lógica adicional de finalización si es necesaria
            // Por ejemplo, cambiar el estado de la atención médica a "Finalizada"

            await OnSaved.InvokeAsync(MedicalCare ?? new MedicalCareDTO { CareId = currentMedicalCareId });
            await JS.InvokeVoidAsync("alert", "Atención médica finalizada exitosamente.");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error inesperado: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    // Métodos para procedimientos
    private async Task AgregarProcedimiento()
    {
        if (currentMedicalCareId == 0)
        {
            await JS.InvokeVoidAsync("alert", "Debe guardar primero los datos básicos del paciente.");
            return;
        }

        currentProcedure = new MedicalProcedureDTO
        {
            ProcedureId = 0,
            PatientId = selectedPatientId,
            CareId = currentMedicalCareId,
            ProcedureDate = DateTime.Now,
            HealthProfessionalId = int.Parse(profesionalSeleccionado)
        };
        showProcedureModal = true;
        StateHasChanged();
    }

    private async Task EditarProcedimiento(MedicalProcedureDTO procedimiento)
    {
        currentProcedure = new MedicalProcedureDTO
        {
            ProcedureId = procedimiento.ProcedureId,
            PatientId = procedimiento.PatientId,
            HealthProfessionalId = procedimiento.HealthProfessionalId,
            CareId = procedimiento.CareId,
            ProcedureDate = procedimiento.ProcedureDate,
            SpecificProcedureId = procedimiento.SpecificProcedureId,
            TypeOfProcedureId = procedimiento.TypeOfProcedureId,
            TreatingPhysicianId = procedimiento.TreatingPhysicianId,
            Observations = procedimiento.Observations,
            TypeOfProcedureName = procedimiento.TypeOfProcedureName,
            SpecificProcedureName = procedimiento.SpecificProcedureName
        };
        showProcedureModal = true;
        StateHasChanged();
    }

    private async Task EliminarProcedimiento(MedicalProcedureDTO procedimiento)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm",
            $"¿Está seguro de eliminar el procedimiento {procedimiento.SpecificProcedureName}?");

        if (confirmed)
        {
            procedimientosList.Remove(procedimiento);
            StateHasChanged();
        }
    }

    private void OnProcedureSaved(MedicalProcedureDTO procedimiento)
    {
        var existing = procedimientosList.FirstOrDefault(p => p.ProcedureId == procedimiento.ProcedureId);
        if (existing != null)
        {
            var index = procedimientosList.IndexOf(existing);
            procedimientosList[index] = procedimiento;
        }
        else
        {
            procedimientosList.Add(procedimiento);
        }
        CerrarModalProcedimiento();
        StateHasChanged();
    }

    private void CerrarModalProcedimiento()
    {
        showProcedureModal = false;
        currentProcedure = null;
        StateHasChanged();
    }

    // Métodos para Aparatos y Sistemas
    private async Task LoadSystemsData()
    {
        availableSystems = await SystemsDevicesService.GetAllAsync();
    }

    private async Task RefreshSystemsTable()
    {
        systemsRows.Clear();
        systemsIds.Clear();

        foreach (var system in systemsList)
        {
            var systemName = await SystemsDevicesService.GetSystemNameByIdAsync(system.SystemsDevicesId);
            var state = !string.IsNullOrEmpty(system.State)
                ? (system.State.Length > 50 ? system.State.Substring(0, 50) + "..." : system.State)
                : "No especificado";
            var observations = !string.IsNullOrEmpty(system.Observations)
                ? (system.Observations.Length > 50 ? system.Observations.Substring(0, 50) + "..." : system.Observations)
                : "Sin observaciones";

            systemsRows.Add(new List<string> { systemName, state, observations });
            systemsIds.Add(system.Id);
        }

        StateHasChanged();
    }

    private async Task OnAddSystemRequested()
    {
        currentSystem = new ReviewSystemDevicesDTO
        {
            Id = 0,
            MedicalCareId = currentMedicalCareId,
            SystemsDevicesId = 0,
            State = "",
            Observations = ""
        };
        systemErrors.Clear();
    }

    private async Task OnEditSystemRequested(int id)
    {
        var existing = systemsList.FirstOrDefault(s => s.Id == id);
        if (existing != null)
        {
            currentSystem = new ReviewSystemDevicesDTO
            {
                Id = existing.Id,
                MedicalCareId = existing.MedicalCareId,
                SystemsDevicesId = existing.SystemsDevicesId,
                State = existing.State ?? "",
                Observations = existing.Observations ?? ""
            };
        }
        systemErrors.Clear();
    }

    private async Task OnDeleteSystemRequested(int id)
    {
        var result = await ReviewSystemDevicesService.DeleteAsync(id);
        if (result.Success)
        {
            var toRemove = systemsList.FirstOrDefault(s => s.Id == id);
            if (toRemove != null)
            {
                systemsList.Remove(toRemove);
                await RefreshSystemsTable();
            }
            await JS.InvokeVoidAsync("alert", "Revisión eliminada exitosamente.");
        }
        else
        {
            await JS.InvokeVoidAsync("alert", $"Error al eliminar: {result.Error}");
        }
    }

    private async Task OnSaveSystemRequested()
    {
        if (!ValidateSystemForm()) return;

        // Asegurar que tenemos el MedicalCareId correcto
        currentSystem.MedicalCareId = currentMedicalCareId;

        if (currentSystem.Id == 0)
        {
            // Crear nuevo
            var result = await ReviewSystemDevicesService.CreateAsync(currentSystem);
            if (result.Success && result.Data != null)
            {
                systemsList.Add(result.Data);
                await RefreshSystemsTable();
                await JS.InvokeVoidAsync("alert", "Revisión agregada exitosamente.");
            }
            else
            {
                await JS.InvokeVoidAsync("alert", $"Error al crear: {result.Error}");
            }
        }
        else
        {
            // Actualizar existente
            var result = await ReviewSystemDevicesService.UpdateAsync(currentSystem);
            if (result.Success && result.Data != null)
            {
                var index = systemsList.FindIndex(s => s.Id == currentSystem.Id);
                if (index >= 0)
                {
                    systemsList[index] = result.Data;
                    await RefreshSystemsTable();
                }
                await JS.InvokeVoidAsync("alert", "Revisión actualizada exitosamente.");
            }
            else
            {
                await JS.InvokeVoidAsync("alert", $"Error al actualizar: {result.Error}");
            }
        }
    }

    private bool ValidateSystemForm()
    {
        systemErrors.Clear();
        bool isValid = true;

        if (currentSystem.SystemsDevicesId <= 0)
        {
            systemErrors["SystemsDevicesId"] = "Debe seleccionar un tipo de aparato o sistema.";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(currentSystem.State))
        {
            systemErrors["State"] = "El estado es obligatorio.";
            isValid = false;
        }

        // Verificar duplicados (excluyendo el registro actual si está editando)
        var duplicateExists = systemsList.Any(s =>
            s.SystemsDevicesId == currentSystem.SystemsDevicesId &&
            s.Id != currentSystem.Id);

        if (duplicateExists)
        {
            systemErrors["SystemsDevicesId"] = "Ya existe una revisión para este aparato o sistema.";
            isValid = false;
        }

        return isValid;
    }

    private bool IsSystemFormValid()
    {
        return currentSystem.SystemsDevicesId > 0 && !string.IsNullOrWhiteSpace(currentSystem.State);
    }
}
