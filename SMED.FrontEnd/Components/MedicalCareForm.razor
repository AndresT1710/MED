@using SMED.FrontEnd.Components
@using SMED.Shared.DTOs
@using SMED.FrontEnd.Services

@inject MedicalCareService MedicalCareService
@inject TypeOfServiceService TypeOfServiceService
@inject HealthProfessionalService HealthProfessionalService
@inject VitalSignsService VitalSignsService
@inject MedicalServiceService MedicalServiceService
@inject IJSRuntime JS

<div class="medical-care-form">
    <!-- Tabs Navigation -->
    <ul class="nav nav-tabs" id="medicalCareTabs" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link @(activeTab == "patient" ? "active" : "")"
                    @onclick="@(() => SetActiveTab("patient"))"
                    type="button" role="tab">
                <i class="fas fa-user me-2"></i>Selección de Paciente
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link @(activeTab == "vitals" ? "active" : "")"
                    @onclick="@(() => SetActiveTab("vitals"))"
                    type="button" role="tab"
                    disabled="@(selectedPatientId <= 0)">
                <i class="fas fa-heartbeat me-2"></i>Signos Vitales
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link @(activeTab == "services" ? "active" : "")"
                    @onclick="@(() => SetActiveTab("services"))"
                    type="button" role="tab"
                    disabled="@(selectedPatientId <= 0)">
                <i class="fas fa-stethoscope me-2"></i>Servicios
            </button>
        </li>
    </ul>

    <!-- Tab Content -->
    <div class="tab-content mt-3">
        <!-- Patient Selection Tab -->
        <div class="tab-pane @(activeTab == "patient" ? "show active" : "")" role="tabpanel">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Selección de Paciente</h5>
                </div>
                <div class="card-body">
                    @if (!isEditMode)
                    {
                        <PatientSelector @bind-Value="clinicalHistoryId"
                                         OnPatientSelected="HandlePatientSelected" />
                    }
                    else
                    {
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle me-2"></i>
                            Editando atención médica existente. Paciente: @selectedHistoryNumber
                        </div>
                    }

                    @if (selectedPatientId > 0)
                    {
                        <div class="alert alert-success mt-3">
                            <i class="fas fa-check-circle me-2"></i>
                            Paciente seleccionado correctamente. Historia Clínica: @selectedHistoryNumber
                        </div>

                        <div class="d-flex justify-content-end mt-3">
                            <button class="btn btn-primary" @onclick="@(() => SetActiveTab("vitals"))">
                                Continuar a Signos Vitales <i class="fas fa-arrow-right ms-2"></i>
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Vital Signs Tab -->
        <div class="tab-pane @(activeTab == "vitals" ? "show active" : "")" role="tabpanel">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Signos Vitales</h5>
                </div>
                <div class="card-body">
                    @if (selectedPatientId > 0)
                    {
                        <div class="containerbox1-grid">
                            <ContainerBox1 Title="Peso" Width="half" @bind-Content="peso" />
                            <ContainerBox1 Title="Talla" Width="half" @bind-Content="talla" />
                            <ContainerBox1 Title="IMC" Width="half" @bind-Content="imc" />
                            <ContainerBox1 Title="Perímetro Abdominal" Width="half" @bind-Content="perimetroAbdominal" />
                            <ContainerBox1 Title="Presión Arterial" Width="half" @bind-Content="presionArterial" />
                            <ContainerBox1 Title="Temperatura" Width="half" @bind-Content="temperatura" />
                            <ContainerBox1 Title="Presión Arterial Media" Width="half" @bind-Content="pam" />
                            <ContainerBox1 Title="Frecuencia Cardíaca" Width="half" @bind-Content="frecuenciaCardiaca" />
                            <ContainerBox1 Title="Saturación Oxígeno" Width="half" @bind-Content="saturacionOxigeno" />
                            <ContainerBox1 Title="Frecuencia Respiratoria" Width="half" @bind-Content="frecuenciaRespiratoria" />
                            <ContainerBox1 Title="Glucosa Capilar" Width="half" @bind-Content="glucosaCapilar" />
                            <ContainerBox1 Title="Hemoglobina" Width="half" @bind-Content="hemoglobina" />
                        </div>

                        <div class="d-flex justify-content-between mt-4">
                            <button class="btn btn-secondary" @onclick="@(() => SetActiveTab("patient"))">
                                <i class="fas fa-arrow-left me-2"></i>Volver
                            </button>
                            <button class="btn btn-primary" @onclick="@(() => SetActiveTab("services"))">
                                Continuar a Servicios <i class="fas fa-arrow-right ms-2"></i>
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Services Tab -->
        <div class="tab-pane @(activeTab == "services" ? "show active" : "")" role="tabpanel">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Servicios</h5>
                </div>
                <div class="card-body">
                    @if (selectedPatientId > 0)
                    {
                        <div class="d-flex flex-wrap">
                            <!-- Columna izquierda -->
                            <div class="d-flex flex-column me-3" style="flex: 1 1 48%">
                                <ContainerBox2 Title="Fecha de atención"
                                               Width="full"
                                               @bind-SelectedDate="fechaAtencion" />

                                <div class="mb-3">
                                    <label class="form-label">Tipo de servicio</label>
                                    <select class="form-select" @bind="servicioSeleccionado">
                                        <option value="">Seleccione un tipo de servicio</option>
                                        @foreach (var tipo in tipoServicios)
                                        {
                                            <option value="@tipo.Id">@tipo.Name</option>
                                        }
                                    </select>
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Área</label>
                                    <select class="form-select" @bind="areaSeleccionada">
                                        <option value="">Seleccione un área</option>
                                        <option value="Enfermería">Enfermería</option>
                                        <option value="Psicología">Psicología</option>
                                        <option value="Ginecología">Ginecología</option>
                                    </select>
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Profesional responsable</label>
                                    <select class="form-select" @bind="profesionalSeleccionado">
                                        <option value="">Seleccione un profesional</option>
                                        @foreach (var profesional in profesionales)
                                        {
                                            <option value="@profesional.HealthProfessionalId">
                                                @profesional.FullName - @profesional.NameTypeProfessional
                                            </option>
                                        }
                                    </select>
                                </div>
                            </div>

                            <!-- Columna derecha -->
                            <div class="d-flex flex-column" style="flex: 1 1 48%">
                                <ContainerBox1 Title="Diagnóstico"
                                               Width="full"
                                               @bind-Content="diagnostico" />

                                <ContainerBox1 Title="Observaciones"
                                               Width="full"
                                               @bind-Content="observaciones" />

                                <ContainerBox1 Title="Recomendaciones"
                                               Width="full"
                                               @bind-Content="recomendaciones" />
                            </div>
                        </div>

                        <div class="d-flex justify-content-between mt-4">
                            <button class="btn btn-secondary" @onclick="@(() => SetActiveTab("vitals"))">
                                <i class="fas fa-arrow-left me-2"></i>Volver
                            </button>
                            <div>
                                <button class="btn btn-success me-2" @onclick="GuardarAtencionMedica">
                                    <i class="fas fa-save me-2"></i>@(isEditMode ? "Actualizar" : "Guardar") Atención Médica
                                </button>
                                <button class="btn btn-secondary" @onclick="OnCancel">
                                    Cancelar
                                </button>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public MedicalCareDTO? MedicalCare { get; set; }
    [Parameter] public EventCallback<MedicalCareDTO> OnSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private string activeTab = "patient";
    private int clinicalHistoryId = 0;
    private int selectedPatientId = 0;
    private string selectedHistoryNumber = "";
    private string areaSeleccionada = "";
    private bool isEditMode = false;

    // Signos vitales
    private string peso = "";
    private string talla = "";
    private string imc = "";
    private string perimetroAbdominal = "";
    private string presionArterial = "";
    private string temperatura = "";
    private string pam = "";
    private string frecuenciaCardiaca = "";
    private string saturacionOxigeno = "";
    private string frecuenciaRespiratoria = "";
    private string glucosaCapilar = "";
    private string hemoglobina = "";

    // Servicios
    private DateTime? fechaAtencion = DateTime.Now;
    private string servicioSeleccionado = "";
    private string profesionalSeleccionado = "";
    private string diagnostico = "";
    private string observaciones = "";
    private string recomendaciones = "";

    // Listas dinámicas
    private List<TypeOfServiceDTO> tipoServicios = new();
    private List<HealthProfessionalDTO> profesionales = new();

    // Para edición
    private VitalSignsDTO? existingVitalSigns;
    private MedicalServiceDTO? existingMedicalService;

    protected override async Task OnInitializedAsync()
    {
        await LoadTypeOfServices();
        await LoadHealthProfessionals();

        // Si es modo edición, cargar los datos existentes
        if (MedicalCare != null && MedicalCare.CareId > 0)
        {
            isEditMode = true;
            await LoadExistingData();
        }
    }

    private async Task LoadExistingData()
    {
        if (MedicalCare == null) return;

        // Cargar datos básicos de la atención médica
        selectedPatientId = MedicalCare.PatientId;
        areaSeleccionada = MedicalCare.Area ?? "";
        profesionalSeleccionado = MedicalCare.HealthProfessionalId.ToString();

        // Cargar signos vitales existentes
        var allVitalSigns = await VitalSignsService.GetAllAsync();
        existingVitalSigns = allVitalSigns?.FirstOrDefault(vs => vs.MedicalCareId == MedicalCare.CareId);

        if (existingVitalSigns != null)
        {
            peso = existingVitalSigns.Weight?.ToString() ?? "";
            talla = existingVitalSigns.Height?.ToString() ?? "";
            imc = existingVitalSigns.Icm?.ToString() ?? "";
            perimetroAbdominal = existingVitalSigns.AbdominalCircumference?.ToString() ?? "";
            presionArterial = existingVitalSigns.BloodPressure ?? "";
            temperatura = existingVitalSigns.Temperature?.ToString() ?? "";
            pam = existingVitalSigns.MeanArterialPressure?.ToString() ?? "";
            frecuenciaCardiaca = existingVitalSigns.HeartRate?.ToString() ?? "";
            saturacionOxigeno = existingVitalSigns.OxygenSaturation?.ToString() ?? "";
            frecuenciaRespiratoria = existingVitalSigns.RespiratoryRate?.ToString() ?? "";
            glucosaCapilar = existingVitalSigns.BloodGlucose?.ToString() ?? "";
            hemoglobina = existingVitalSigns.Hemoglobin?.ToString() ?? "";
        }

        // Cargar servicios médicos existentes
        var existingServices = await MedicalServiceService.GetByCareIdAsync(MedicalCare.CareId);
        existingMedicalService = existingServices?.FirstOrDefault();

        if (existingMedicalService != null)
        {
            fechaAtencion = existingMedicalService.ServiceDate;
            servicioSeleccionado = existingMedicalService.ServiceType ?? "";
            diagnostico = existingMedicalService.Diagnosis ?? "";
            observaciones = existingMedicalService.Observations ?? "";
            recomendaciones = existingMedicalService.Recommendations ?? "";
        }

        StateHasChanged();
    }

    private async Task LoadTypeOfServices()
    {
        tipoServicios = await TypeOfServiceService.GetAllAsync();
    }

    private async Task LoadHealthProfessionals()
    {
        profesionales = await HealthProfessionalService.GetAllAsync();
    }

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
    }

    private Task HandlePatientSelected((int ClinicalHistoryId, string MedicalRecordNumber, int PersonId) paciente)
    {
        clinicalHistoryId = paciente.ClinicalHistoryId;
        selectedPatientId = paciente.PersonId;
        selectedHistoryNumber = paciente.MedicalRecordNumber;
        return Task.CompletedTask;
    }

    private async Task GuardarAtencionMedica()
    {
        try
        {
            // Validaciones básicas
            if (selectedPatientId <= 0)
            {
                await JS.InvokeVoidAsync("alert", "Debe seleccionar un paciente");
                return;
            }

            if (string.IsNullOrEmpty(profesionalSeleccionado))
            {
                await JS.InvokeVoidAsync("alert", "Debe seleccionar un profesional responsable");
                return;
            }

            MedicalCareDTO medicalCareResult;

            if (isEditMode && MedicalCare != null)
            {
                // Actualizar atención médica existente
                MedicalCare.Area = areaSeleccionada;
                MedicalCare.HealthProfessionalId = int.Parse(profesionalSeleccionado);

                var updateResult = await MedicalCareService.UpdateAsync(MedicalCare);
                if (!updateResult.Success)
                {
                    await JS.InvokeVoidAsync("alert", $"Error al actualizar la atención médica: {updateResult.Error}");
                    return;
                }
                medicalCareResult = MedicalCare;
            }
            else
            {
                // Crear nueva atención médica
                var medicalCareDto = new MedicalCareDTO
                    {
                        PatientId = selectedPatientId,
                        HealthProfessionalId = int.Parse(profesionalSeleccionado),
                        LocationId = 1,
                        Area = areaSeleccionada,
                    };

                var result = await MedicalCareService.CreateAsync(medicalCareDto);
                if (!result.Success)
                {
                    await JS.InvokeVoidAsync("alert", $"Error al crear la atención médica: {result.Error}");
                    return;
                }
                medicalCareResult = result.Data;
            }

            // Guardar o actualizar signos vitales
            if (HasVitalSignsData())
            {
                var vitalSignsDto = new VitalSignsDTO
                    {
                        Id = existingVitalSigns?.Id ?? 0,
                        MedicalCareId = medicalCareResult.CareId,
                        Weight = ParseDecimal(peso),
                        Height = ParseDecimal(talla),
                        Icm = ParseDecimal(imc),
                        AbdominalCircumference = ParseDecimal(perimetroAbdominal),
                        BloodPressure = presionArterial,
                        Temperature = ParseDecimal(temperatura),
                        MeanArterialPressure = ParseDecimal(pam),
                        HeartRate = ParseInt(frecuenciaCardiaca),
                        OxygenSaturation = ParseDecimal(saturacionOxigeno),
                        RespiratoryRate = ParseInt(frecuenciaRespiratoria),
                        BloodGlucose = ParseDecimal(glucosaCapilar),
                        Hemoglobin = ParseDecimal(hemoglobina)
                    };

                if (existingVitalSigns != null)
                {
                    await VitalSignsService.UpdateAsync(vitalSignsDto);
                }
                else
                {
                    await VitalSignsService.CreateAsync(vitalSignsDto);
                }
            }

            // Guardar o actualizar servicios médicos
            if (HasServiceData())
            {
                var medicalServiceDto = new MedicalServiceDTO
                    {
                        ServiceId = existingMedicalService?.ServiceId ?? 0,
                        CareId = medicalCareResult.CareId,
                        ServiceDate = fechaAtencion,
                        ServiceType = GetServiceTypeName(servicioSeleccionado),
                        Diagnosis = diagnostico,
                        Observations = observaciones,
                        Recommendations = recomendaciones
                    };

                if (existingMedicalService != null)
                {
                    await MedicalServiceService.UpdateAsync(medicalServiceDto);
                }
                else
                {
                    await MedicalServiceService.CreateAsync(medicalServiceDto);
                }
            }

            await OnSaved.InvokeAsync(medicalCareResult);
            await JS.InvokeVoidAsync("alert", isEditMode ? "Atención médica actualizada exitosamente" : "Atención médica creada exitosamente");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error inesperado: {ex.Message}");
        }
    }

    private string GetServiceTypeName(string serviceId)
    {
        if (int.TryParse(serviceId, out int id))
        {
            var service = tipoServicios.FirstOrDefault(s => s.Id == id);
            return service?.Name ?? "";
        }
        return "";
    }

    private bool HasVitalSignsData()
    {
        return !string.IsNullOrWhiteSpace(peso) || !string.IsNullOrWhiteSpace(talla) ||
               !string.IsNullOrWhiteSpace(presionArterial) || !string.IsNullOrWhiteSpace(temperatura) ||
               !string.IsNullOrWhiteSpace(frecuenciaCardiaca) || !string.IsNullOrWhiteSpace(saturacionOxigeno);
    }

    private bool HasServiceData()
    {
        return !string.IsNullOrWhiteSpace(servicioSeleccionado) || !string.IsNullOrWhiteSpace(diagnostico) ||
               !string.IsNullOrWhiteSpace(observaciones) || !string.IsNullOrWhiteSpace(recomendaciones);
    }

    private decimal? ParseDecimal(string value)
    {
        return decimal.TryParse(value, out var result) ? result : null;
    }

    private int? ParseInt(string value)
    {
        return int.TryParse(value, out var result) ? result : null;
    }
}
