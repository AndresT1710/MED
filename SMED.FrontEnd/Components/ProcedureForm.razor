@using SMED.FrontEnd.Components
@using SMED.Shared.DTOs
@using SMED.FrontEnd.Services
@inject TypeOfProceduresService TypeOfProceduresService
@inject ProceduresService ProceduresService
@inject HealthProfessionalService HealthProfessionalService
@inject IJSRuntime JS

<div class="procedure-form">
    @if (isLoading)
    {
        <div class="text-center py-4">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p class="mt-2">Cargando datos del procedimiento...</p>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-md-6">
                <ContainerBox2 Title="Fecha de procedimiento"
                               Width="full"
                               @bind-SelectedDate="fechaProcedimiento" />

                <div class="mb-3">
                    <label class="form-label">Tipo de procedimiento *</label>
                    <select class="form-select @(showValidation && string.IsNullOrEmpty(tipoProcedimientoSeleccionado) ? "is-invalid" : "")"
                            value="@tipoProcedimientoSeleccionado"
                            @onchange="OnTipoProcedimientoChanged">
                        <option value="">Seleccione un tipo</option>
                        @foreach (var tipo in tiposProcedimientos)
                        {
                            <option value="@tipo.Id">
                                @tipo.Name
                            </option>
                        }
                    </select>
                    @if (showValidation && string.IsNullOrEmpty(tipoProcedimientoSeleccionado))
                    {
                        <div class="invalid-feedback">
                            Debe seleccionar un tipo de procedimiento
                        </div>
                    }
                    
                </div>

                <div class="mb-3">
                    <label class="form-label">Procedimiento específico *</label>
                    <select class="form-select @(showValidation && string.IsNullOrEmpty(procedimientoSeleccionado) ? "is-invalid" : "")"
                            @bind="procedimientoSeleccionado"
                            disabled="@(string.IsNullOrEmpty(tipoProcedimientoSeleccionado) || !procedimientosFiltrados.Any())">
                        <option value="">Seleccione un procedimiento</option>
                        @foreach (var proc in procedimientosFiltrados)
                        {
                            <option value="@proc.Id">
                                @proc.Description
                            </option>
                        }
                    </select>
                    @if (showValidation && string.IsNullOrEmpty(procedimientoSeleccionado))
                    {
                        <div class="invalid-feedback">
                            Debe seleccionar un procedimiento específico
                        </div>
                    }
                    
                </div>
            </div>

            <div class="col-md-6">
                <div class="mb-3">
                    <label class="form-label">Médico Tratante</label>
                    <select class="form-select" @bind="medicoTratanteSeleccionado">
                        <option value="">Seleccione médico tratante</option>
                        @foreach (var medico in profesionales)
                        {
                            <option value="@medico.HealthProfessionalId">
                                @medico.FullName - @medico.NameTypeProfessional
                            </option>
                        }
                    </select>
                 
                </div>

                <div class="mb-3">
                    <label class="form-label">Observaciones</label>
                    <textarea class="form-control" rows="4" @bind="observaciones"
                              placeholder="Ingrese observaciones del procedimiento..."></textarea>
                </div>
            </div>
        </div>

        <div class="d-flex justify-content-end mt-3">
            <button class="btn btn-secondary me-2" @onclick="HandleCancel">Cancelar</button>
            <button class="btn btn-primary" @onclick="GuardarProcedimiento" disabled="@isSaving">
                @if (isSaving)
                {
                    <span class="spinner-border spinner-border-sm me-2"></span>
                }
                <i class="fas fa-save me-2"></i>@(IsEditMode ? "Actualizar" : "Guardar")
            </button>
        </div>
    }
</div>

@code {
    [Parameter] public MedicalProcedureDTO? Procedure { get; set; }
    [Parameter] public EventCallback<MedicalProcedureDTO> OnSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private DateTime? fechaProcedimiento = DateTime.Now;
    private string tipoProcedimientoSeleccionado = "";
    private string procedimientoSeleccionado = "";
    private string medicoTratanteSeleccionado = "";
    private string observaciones = "";
    private bool showValidation = false;
    private bool isSaving = false;
    private bool isLoading = true;

    private List<TypeOfProceduresDTO> tiposProcedimientos = new();
    private List<ProceduresDTO> todosProcedimientos = new();
    private List<ProceduresDTO> procedimientosFiltrados = new();
    private List<HealthProfessionalDTO> profesionales = new();

    private bool IsEditMode => Procedure?.ProcedureId > 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadAllData();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Procedure != null)
        {
            await LoadExistingData();
        }
        else
        {
            ClearForm();
        }
        StateHasChanged();
    }

    private async Task LoadAllData()
    {
        isLoading = true;
        try
        {
            await JS.InvokeVoidAsync("console.log", "Cargando datos del formulario de procedimientos...");

            // Cargar todas las listas primero
            var tasks = new List<Task>
            {
                LoadTiposProcedimientos(),
                LoadTodosProcedimientos(),
                LoadProfesionales()
            };

            await Task.WhenAll(tasks);

            await JS.InvokeVoidAsync("console.log", $"Datos cargados: Tipos={tiposProcedimientos.Count}, Procedimientos={todosProcedimientos.Count}, Profesionales={profesionales.Count}");

            // Si hay un procedimiento para editar, cargar sus datos
            if (Procedure != null)
            {
                await LoadExistingData();
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", $"Error cargando datos: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadTiposProcedimientos()
    {
        tiposProcedimientos = await TypeOfProceduresService.GetAllAsync();
    }

    private async Task LoadTodosProcedimientos()
    {
        todosProcedimientos = await ProceduresService.GetAllAsync();
    }

    private async Task LoadProfesionales()
    {
        profesionales = await HealthProfessionalService.GetAllHealthProfessionalsAsync();
    }

    private async Task LoadExistingData()
    {
        if (Procedure == null) return;

        await JS.InvokeVoidAsync("console.log", $"Cargando datos existentes del procedimiento ID: {Procedure.ProcedureId}");

        try
        {
            // Cargar datos básicos
            fechaProcedimiento = Procedure.ProcedureDate;
            observaciones = Procedure.Observations ?? "";
            medicoTratanteSeleccionado = Procedure.TreatingPhysicianId?.ToString() ?? "";

            await JS.InvokeVoidAsync("console.log", $"Datos básicos cargados - Fecha: {fechaProcedimiento}, Médico: {medicoTratanteSeleccionado}");

            // Cargar tipo de procedimiento
            if (Procedure.TypeOfProcedureId.HasValue)
            {
                tipoProcedimientoSeleccionado = Procedure.TypeOfProcedureId.Value.ToString();
                await JS.InvokeVoidAsync("console.log", $"Tipo de procedimiento seleccionado: {tipoProcedimientoSeleccionado}");

                // Filtrar procedimientos específicos basados en el tipo
                await FilterProcedimientosByType(Procedure.TypeOfProcedureId.Value);

                // Seleccionar el procedimiento específico
                procedimientoSeleccionado = Procedure.SpecificProcedureId.ToString();
                await JS.InvokeVoidAsync("console.log", $"Procedimiento específico seleccionado: {procedimientoSeleccionado}");
            }

            await JS.InvokeVoidAsync("console.log", "Datos existentes cargados completamente");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", $"Error cargando datos existentes: {ex.Message}");
        }
    }

    private void ClearForm()
    {
        fechaProcedimiento = DateTime.Now;
        tipoProcedimientoSeleccionado = "";
        procedimientoSeleccionado = "";
        medicoTratanteSeleccionado = "";
        observaciones = "";
        procedimientosFiltrados = new List<ProceduresDTO>();
        showValidation = false;
    }

    private async Task OnTipoProcedimientoChanged(ChangeEventArgs e)
    {
        var newValue = e.Value?.ToString() ?? "";
        await JS.InvokeVoidAsync("console.log", $"Tipo de procedimiento cambiado a: {newValue}");

        tipoProcedimientoSeleccionado = newValue;
        procedimientoSeleccionado = ""; // Limpiar selección específica

        if (int.TryParse(tipoProcedimientoSeleccionado, out int typeId))
        {
            await FilterProcedimientosByType(typeId);
        }
        else
        {
            procedimientosFiltrados = new List<ProceduresDTO>();
        }

        StateHasChanged();
    }

    private async Task FilterProcedimientosByType(int typeId)
    {
        await JS.InvokeVoidAsync("console.log", $"Filtrando procedimientos por tipo ID: {typeId}");

        procedimientosFiltrados = todosProcedimientos
            .Where(p => p.TypeOfProcedureId == typeId)
            .ToList();

        await JS.InvokeVoidAsync("console.log", $"Procedimientos filtrados: {procedimientosFiltrados.Count}");
    }

    private async Task GuardarProcedimiento()
    {
        showValidation = true;

        if (string.IsNullOrEmpty(tipoProcedimientoSeleccionado))
        {
            await JS.InvokeVoidAsync("alert", "Debe seleccionar un tipo de procedimiento");
            return;
        }

        if (string.IsNullOrEmpty(procedimientoSeleccionado))
        {
            await JS.InvokeVoidAsync("alert", "Debe seleccionar un procedimiento específico");
            return;
        }

        isSaving = true;
        try
        {
            var procedimiento = Procedure ?? new MedicalProcedureDTO();

            procedimiento.ProcedureDate = fechaProcedimiento ?? DateTime.Now;
            procedimiento.SpecificProcedureId = int.Parse(procedimientoSeleccionado);
            procedimiento.TypeOfProcedureId = int.Parse(tipoProcedimientoSeleccionado);
            procedimiento.TreatingPhysicianId = string.IsNullOrEmpty(medicoTratanteSeleccionado) ? null : int.Parse(medicoTratanteSeleccionado);
            procedimiento.Observations = observaciones;

            // Obtener nombres para mostrar en la tabla
            var tipoProcedimiento = tiposProcedimientos.FirstOrDefault(t => t.Id == int.Parse(tipoProcedimientoSeleccionado));
            var procedimientoEspecifico = procedimientosFiltrados.FirstOrDefault(p => p.Id == int.Parse(procedimientoSeleccionado));

            procedimiento.TypeOfProcedureName = tipoProcedimiento?.Name ?? "";
            procedimiento.SpecificProcedureName = procedimientoEspecifico?.Description ?? "";

            await JS.InvokeVoidAsync("console.log", $"Guardando procedimiento: {procedimiento.TypeOfProcedureName} - {procedimiento.SpecificProcedureName}");

            await OnSaved.InvokeAsync(procedimiento);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error al guardar el procedimiento: {ex.Message}");
            await JS.InvokeVoidAsync("console.error", $"Error: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task HandleCancel()
    {
        await OnCancel.InvokeAsync();
    }
}
